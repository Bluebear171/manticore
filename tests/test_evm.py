
import struct
import unittest
import json
from manticore.platforms import evm
from manticore.core import state
from manticore.core.smtlib import Operators, ConstraintSet
import os


class EVMTest(unittest.TestCase):
    _multiprocess_can_split_ = True


    def test_mstoreWordToBigError(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 8390000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01R`\x01Q`\x01U',
                             'storage': {
                              1: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01R`\x01Q`\x01U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_DynamicJumpInsidePushWithoutJumpDest(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x05`\x03\x01Va\xee\xff', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_BlockNumberDynamicJump0_AfterJumpdest3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 2,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`#`\x0b`\x08PC\x01V`\x01[`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_BlockNumberDynamicJumpiAfterStop(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 2,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x01`\x08C\x01W\x00`\x01[`\x02`\x03U',
                             'storage': {
                              3: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01`\x08C\x01W\x00`\x01[`\x02`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_byte1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb`\x00\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb`\x01'\
                             '\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb`\x02\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb`'\
                             '\x03\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb`\x04\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb'\
                             '`\x05\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb`\x06\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa'\
                             '\xbb`\x07\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb`\x08\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00'\
                             '\xaa\xbb`\t\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb`\n\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99'\
                             '\x00\xaa\xbb`\x0b\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb`\x0c\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88'\
                             '\x99\x00\xaa\xbb`\r\x1a\x7f\x11"3DUf',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"'\
                                     '3DUfw\x88\x99\x00\xaa\xbb`\x00\x1a\x7f\x11"3DUfw\x88\x99'\
                                     '\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb'\
                                     '`\x01\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99'\
                                     '\x00\x11"3DUfw\x88\x99\x00\xaa\xbb`\x02\x1a\x7f\x11"3DUf'\
                                     'w\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99'\
                                     '\x00\xaa\xbb`\x03\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUf'\
                                     'w\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb`\x04\x1a\x7f\x11"3'\
                                     'DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUf'\
                                     'w\x88\x99\x00\xaa\xbb`\x05\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3'\
                                     'DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb`\x06\x1a\x7f'\
                                     '\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3'\
                                     'DUfw\x88\x99\x00\xaa\xbb`\x07\x1a\x7f\x11"3DUfw\x88\x99\x00'\
                                     '\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb`'\
                                     '\x08\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00'\
                                     '\x11"3DUfw\x88\x99\x00\xaa\xbb`\t\x1a\x7f\x11"3DUfw'\
                                     '\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw\x88\x99\x00'\
                                     '\xaa\xbb`\n\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3DUfw'\
                                     '\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb`\x0b\x1a\x7f\x11"3D'\
                                     'Ufw\x88\x99\x00\x11"3DUfw\x88\x99\x00\x11"3DUfw'\
                                     '\x88\x99\x00\xaa\xbb`\x0c\x1a\x7f\x11"3DUfw\x88\x99\x00\x11"3D'\
                                     'Ufw\x88\x99\x00\x11"3DUfw\x88\x99\x00\xaa\xbb`\r\x1a\x7f\x11'\
                                     '"3DUf', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_JDfromStorageDynamicJumpifInsidePushWithoutJumpDest(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 2,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01`\x07`\x00T\x01Wa\xee\xff', 
                                storage={
                                         u'0x00': u'0x04'
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_DynamicJump0_AfterJumpdest(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`#`\x08`\x03\x01V`\x01[`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_BlockNumberDynamicJump0_jumpdest0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 2,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`#`\x07C\x01V`\x01[`\x02U',
                             'storage': {
                              2: 35
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`#`\x07C\x01V`\x01[`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_BlockNumberDynamicJump0_jumpdest2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 2,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`#`\n`\x08PC\x01V`\x01[`\x02U',
                             'storage': {
                              2: 35
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`#`\n`\x08PC\x01V`\x01[`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_jump0_AfterJumpdest(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`#`\x08V`\x01[`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_JDfromStorageDynamicJumpInsidePushWithJumpDest(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 2,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x04`\x00T\x01Ve[`\x01`\x01U', 
                                storage={
                                         u'0x00': u'0x04'
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mstoreMemExp(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 8390000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xf1c\x0f\xff\xff\xffR', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_pc1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\xff`\x00UX`\x00U',
                             'storage': {
                              0: 5
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xff`\x00UX`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_JDfromStorageDynamicJumpiAfterStop(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 2,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x01`\x08`\x00T\x01W\x00`\x01[`\x02`\x03U',
                             'storage': {
                              0: 4,
                              3: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01`\x08`\x00T\x01W\x00`\x01[`\x02`\x03U', 
                                storage={
                                         u'0x00': u'0x04'
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_pop1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='P`\x02`\x03`\x04U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_jumpTo1InstructionafterJump_jumpdestFirstInstruction(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='[`\x03V[`\x01`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_jumpTo1InstructionafterJump_noJumpDest(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03V`\x01`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_jumpOntoJump(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='V[`\x00V', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sstore_underflow(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_jump0_withoutJumpdest(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`#`\x07V`\x01`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_jumpInsidePushWithJumpDest(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x04Ve[`\x01`\x01U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_bad_indirect_jump1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x1b`%\x02V', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_msize1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'd\xff\xff\xff\xff\xff`\x00RY`\x00U',
                             'storage': {
                              0: 32
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='d\xff\xff\xff\xff\xff`\x00RY`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_jump0_AfterJumpdest3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`#`\x0b`\x08PV`\x01[`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_bad_indirect_jump2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01`\x03`\x03\x02W`\x00`\x00V', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_deadCode_1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x01`\x00SY`\x00\xf3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01`\x00SY`\x00\xf3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_msize0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\xff`\x00RY`\x00U',
                             'storage': {
                              0: 32
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xff`\x00RY`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_DynamicJump0_jumpdest2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`#`\n`\x08P`\x03\x01V`\x01[`\x02U',
                             'storage': {
                              2: 35
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`#`\n`\x08P`\x03\x01V`\x01[`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_DynamicJump0_jumpdest0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`#`\x07`\x03\x01V`\x01[`\x02U',
                             'storage': {
                              2: 35
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`#`\x07`\x03\x01V`\x01[`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_DynamicJumpifInsidePushWithoutJumpDest(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01`\x07`\x03\x01Wa\xee\xff', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_msize2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'd\xff\xff\xff\xff\xff`\x00Ra\xee\xee` RY`\x00U',
                             'storage': {
                              0: 64
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='d\xff\xff\xff\xff\xff`\x00Ra\xee\xee` RY`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_msize3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'd\xff\xff\xff\xff\xff`\x00Ra\xee\xee`ZRY`\x00U',
                             'storage': {
                              0: 128
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='d\xff\xff\xff\xff\xff`\x00Ra\xee\xee`ZRY`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_DynamicJumpJD_DependsOnJumps0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 1,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\tC`\x06W[V`\x01', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_DynamicJumpJD_DependsOnJumps1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 1,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\nC`\x06W[V`\x01[`\x01`\x01U',
                             'storage': {
                              1: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\nC`\x06W[V`\x01[`\x01`\x01U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_jump1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='b\x0f\xff\xffb\x0f\xff\xff\x01V', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_DynamicJumpPathologicalTest2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 4,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='CV1a[`a[`a[``\x01`\x01U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_DynamicJumpPathologicalTest3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 7,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='CV1a[`a[`a[``\x01`\x01U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_DynamicJumpPathologicalTest0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 4,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'CV`a[CC\x02V`a[`a[[[`\x01`\x01U',
                             'storage': {
                              1: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='CV`a[CC\x02V`a[`a[[[`\x01`\x01U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_DynamicJumpPathologicalTest1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 4,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='CV`a[CC\x02V`a[`a[`[`\x01`\x01U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_jumpifInsidePushWithoutJumpDest(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01`\x07Wa\xee\xff', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_jumpTo1InstructionafterJump(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03V[`\x01`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_jumpInsidePushWithoutJumpDest(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x05Va\xee\xff', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_return1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01b\x0fB@\xf3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_BlockNumberDynamicJumpifInsidePushWithJumpDest(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 2,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01`\x06C\x01We[`\x01`\x01U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_jumpdestBigList(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\tV[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[['\
                             '[[[[[[[[[[[[[[[[[[[[[[',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\tV[[[[[[[[[[[[[[[[[[[['\
                                     '[[[[[[[[[[[[[[[[[[[[[[['\
                                     '[[[[[[[[[[[[[[[[[[[[[[['\
                                     '[[[[[[[[[[[[[[[[[[[[[[['\
                                     '[', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_jumpiToUintmaxPlus1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01d\x01\x00\x00\x00\tW[[`\x01`\x01U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_JDfromStorageDynamicJumpifInsidePushWithJumpDest(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 2,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01`\x06`\x00T\x01We[`\x01`\x01U', 
                                storage={
                                         u'0x00': u'0x04'
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_return2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': "`\x01`\x80R`\x00`\x80Q\x11`\x18W`\x01`\x00R` `\x00\xf3[`'`\x00R` `\x00\xf3[",
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01`\x80R`\x00`\x80Q\x11`\x18W`\x01`\x00R` `\x00'\
                                     "\xf3[`'`\x00R` `\x00\xf3[", 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_DynamicJump1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='b\x0f\xff\xffb\x0f\xff\xff\x01`\x03\x01V', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_gasOverFlow(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='``\x03[``\x01\x90\x03\x80``\x02Whh\x01\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x16V', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_jumpHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='c\x0f\xff\xff\xffV', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_jumpiAfterStop(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x01`\x08W\x00`\x01[`\x02`\x03U',
                             'storage': {
                              3: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01`\x08W\x00`\x01[`\x02`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_JDfromStorageDynamicJumpiOutsideBoundary(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 2,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0`\x00T\x01W`\x02`\x03U', 
                                storage={
                                         u'0x00': u'0x04'
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_DynamicJump0_AfterJumpdest3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`#`\x0b`\x08P`\x03\x01V`\x01[`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_difficulty(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'D`\x00U',
                             'storage': {
                              0: 256
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='D`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_gaslimit(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'E`\x00U',
                             'storage': {
                              0: 1000000
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='E`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_blockhash258Block(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 258,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x01@`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01@`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_blockhashMyBlock(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 1,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x01@`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01@`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_number(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 1,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'C`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='C`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_blockhashOutOfRange(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 257,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x00@`\x00Ua\x01\x01@`\x01U\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff@`\x02U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x00@`\x00Ua\x01\x01@`\x01U\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '@`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_blockhash257Block(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 257,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x00@`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x00@`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_blockhashInRange(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 257,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x01@`\x00U`\x02@`\x01Ua\x01\x00@`\x02U',
                             'storage': {
                              0: 90743482286830539503240959006302832933333810038750515972785732718729991261126L,
                              1: 78469846343542442363028680824980501212021332975324075417961003849793346933925L,
                              2: 49141853235351966986450010456217574961379676238517164466470671864163950076078L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01@`\x00U`\x02@`\x01Ua\x01\x00@`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_blockhashUnderFlow(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 1,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='@', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_timestamp(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'B`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='B`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_coinbase(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'A`\x00U',
                             'storage': {
                              0: 244687034288125203496486448490407391986876152250L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='A`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_blockhashNotExistingBlock(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 1,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x02@`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x02@`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf2_128(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x80`\x02\n`\x00U`\x7f`\x02\n`\x01U`\x81`\x02\n`\x02U',
                             'storage': {
                              0: 340282366920938463463374607431768211456L,
                              1: 170141183460469231731687303715884105728L,
                              2: 680564733841876926926749214863536422912L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x80`\x02\n`\x00U`\x7f`\x02\n`\x01U`\x81`\x02\n`\x02'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmod1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x02`\x02`\x00\x03`\x01`\x00\x03\x08`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x02`\x02`\x00\x03`\x01`\x00\x03\x08`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdivByZero0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x00\x03`\x03`\x00\x03\x05`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x00\x03`\x03`\x00\x03\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdivByZero1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03\x05`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdivByZero2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfc\xf9#\xbd\xff`\x00\x03\x05\x01`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfc\xf9#\xbd\xff`\x00\x03\x05\x01`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mod0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x02\x06`\x00U',
                             'storage': {
                              0: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x02\x06`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mod1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x02\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x02\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_29(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x1da\x01\x00\n`\x00U`\x1d`\xff\n`\x01U`\x1da\x01\x01\n`\x02U',
                             'storage': {
                              0: 6901746346790563787434755862277025452451108972170386555162524223799296L,
                              1: 6161198947895343982399660568426761903988167460346780717372894287109375L,
                              2: 7727883682589755429839543181003123889866610449799515773033206399769857L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x1da\x01\x00\n`\x00U`\x1d`\xff\n`\x01U`\x1da\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_28(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x1ca\x01\x00\n`\x00U`\x1c`\xff\n`\x01U`\x1ca\x01\x01\n`\x02U',
                             'storage': {
                              0: 26959946667150639794667015087019630673637144422540572481103610249216L,
                              1: 24161564501550368558430041444810830996032029256261885166168212890625L,
                              2: 30069586313578814902099389809350676614266966730737415459273176652801L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x1ca\x01\x00\n`\x00U`\x1c`\xff\n`\x01U`\x1ca\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mod4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x02`\x00\x03\x06`\x00U',
                             'storage': {
                              0: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x02`\x00\x03\x06`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_23(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x17a\x01\x00\n`\x00U`\x17`\xff\n`\x01U`\x17a\x01\x01\n`\x02U',
                             'storage': {
                              0: 24519928653854221733733552434404946937899825954937634816L,
                              1: 22409086343932890693549885316479244931352138519287109375L,
                              2: 26820189163684151285035147401442659727467946863138510593L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x17a\x01\x00\n`\x00U`\x17`\xff\n`\x01U`\x17a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_22(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x16a\x01\x00\n`\x00U`\x16`\xff\n`\x01U`\x16a\x01\x01\n`\x02U',
                             'storage': {
                              0: 95780971304118053647396689196894323976171195136475136L,
                              1: 87878769976207414484509354182271548750400543212890625L,
                              2: 104358712699160121731654270044523967811159326315714049L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x16a\x01\x00\n`\x00U`\x16`\xff\n`\x01U`\x16a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_21(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x15a\x01\x00\n`\x00U`\x15`\xff\n`\x01U`\x15a\x01\x01\n`\x02U',
                             'storage': {
                              0: 374144419156711147060143317175368453031918731001856L,
                              1: 344622627357676135233370016401064897060394287109375L,
                              2: 406065029957821485337176148033167189926689985664257L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x15a\x01\x00\n`\x00U`\x15`\xff\n`\x01U`\x15a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_20(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x14a\x01\x00\n`\x00U`\x14`\xff\n`\x01U`\x14a\x01\x01\n`\x02U',
                             'storage': {
                              0: 1461501637330902918203684832716283019655932542976L,
                              1: 1351461283755592687189686338827705478668212890625L,
                              2: 1580019571820317063568778786121273112555213952001L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x14a\x01\x00\n`\x00U`\x14`\xff\n`\x01U`\x14a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_27(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x1ba\x01\x00\n`\x00U`\x1b`\xff\n`\x01U`\x1ba\x01\x01\n`\x02U',
                             'storage': {
                              0: 105312291668557186697918027683670432318895095400549111254310977536L,
                              1: 94751233339413210033058986058081690180517761789262294769287109375L,
                              2: 117002281375793054093771944783465667759793644866682550425187457793L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x1ba\x01\x00\n`\x00U`\x1b`\xff\n`\x01U`\x1ba\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_26(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x1aa\x01\x00\n`\x00U`\x1a`\xff\n`\x01U`\x1aa\x01\x01\n`\x02U',
                             'storage': {
                              0: 411376139330301510538742295639337626245683966408394965837152256L,
                              1: 371573464076130235423760729639536039923599065840244293212890625L,
                              2: 455261795236548848613898617834496761711259318547402919942363649L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x1aa\x01\x00\n`\x00U`\x1a`\xff\n`\x01U`\x1aa\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_25(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x19a\x01\x00\n`\x00U`\x19`\xff\n`\x01U`\x19a\x01\x01\n`\x02U',
                             'storage': {
                              0: 1606938044258990275541962092341162602522202993782792835301376L,
                              1: 1457150839514236217348081292704062901661172807216644287109375L,
                              2: 1771446674072174508225286450717886232339530422363435486157057L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x19a\x01\x00\n`\x00U`\x19`\xff\n`\x01U`\x19a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_24(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x18a\x01\x00\n`\x00U`\x18`\xff\n`\x01U`\x18a\x01\x01\n`\x02U',
                             'storage': {
                              0: 6277101735386680763835789423207666416102355444464034512896L,
                              1: 5714317017702887126855220755702207457494795322418212890625L,
                              2: 6892788615066826880254032882170763549959262343826597222401L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x18a\x01\x00\n`\x00U`\x18`\xff\n`\x01U`\x18a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmodBigIntCast(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x05`\x01\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x08`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x05`\x01\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x08`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_signextend_BigByteBigByte(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expXY_success(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x005`\x00U` 5`\x01U`\x01T`\x00T\n`\x02U',
                             'storage': {
                              0: 2,
                              1: 15,
                              2: 32768
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x005`\x00U` 5`\x01U`\x01T`\x00T\n`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f'
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulUnderFlow(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01\x02`\x01U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_19(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x13a\x01\x00\na\x01\x00\n`\x00U`\x13`\xff\na\x01\x00\n`\x01U`\x13a\x01\x01\na\x01\x00\n`\x02U`\x13a\x01\x00\n`\xff\n`\x03U`\x13`\xff\n`\xff\n`\x04U`\x13a\x01\x01\n`\xff\n`'\
                             '\x05U`\x13a\x01\x00\na\x01\x01\n`\x06U`\x13`\xff\na\x01\x01\n`\x07U`\x13a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 58844010661592151918021960971670148005098640888438884074991120880745465249793L,
                              4: 83037708815083470159439176343059806764476791572127774164450033570118131384063L,
                              5: 14042401781101581299243232317313523558021645308348755647897149924594173542655L,
                              6: 80031109568047806892179495136963220151591982015680194332645608881349571117057L,
                              7: 78403999583194856336034090665674264222542182810896154607883723354325233434369L,
                              8: 98020625165909217120717684081299357790464904257325036365510282840011357487361L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x13a\x01\x00\na\x01\x00\n`\x00U`\x13`\xff\na\x01\x00\n`'\
                                     '\x01U`\x13a\x01\x01\na\x01\x00\n`\x02U`\x13a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x13`\xff\n`\xff\n`\x04U`\x13a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x13a\x01\x00\na\x01\x01\n`\x06U`\x13`\xff\na'\
                                     '\x01\x01\n`\x07U`\x13a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_18(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x12a\x01\x00\na\x01\x00\n`\x00U`\x12`\xff\na\x01\x00\n`\x01U`\x12a\x01\x01\na\x01\x00\n`\x02U`\x12a\x01\x00\n`\xff\n`\x03U`\x12`\xff\n`\xff\n`\x04U`\x12a\x01\x01\n`\xff\n`'\
                             '\x05U`\x12a\x01\x00\na\x01\x01\n`\x06U`\x12`\xff\na\x01\x01\n`\x07U`\x12a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 47722708517889815122628810105015236221087683713987101985226708756686031552513L,
                              4: 62498223098821962733903061319732317376595162521044937752089040386950014304511L,
                              5: 87617296414069687466701422777716467712815533019690209856230187888840918827263L,
                              6: 91227504086986730808710732351106377729136167577380599868217265603405814956033L,
                              7: 29421361713313315972990398225990402447830660289868159244224680982816723173633L,
                              8: 110931130223540473897795733757531375082108475243595043250924744061846069313793L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x12a\x01\x00\na\x01\x00\n`\x00U`\x12`\xff\na\x01\x00\n`'\
                                     '\x01U`\x12a\x01\x01\na\x01\x00\n`\x02U`\x12a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x12`\xff\n`\xff\n`\x04U`\x12a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x12a\x01\x00\na\x01\x01\n`\x06U`\x12`\xff\na'\
                                     '\x01\x01\n`\x07U`\x12a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sub3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf2_8(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x08`\x02\n`\x00U`\x07`\x02\n`\x01U`\t`\x02\n`\x02U',
                             'storage': {
                              0: 256,
                              1: 128,
                              2: 512
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x08`\x02\n`\x00U`\x07`\x02\n`\x01U`\t`\x02\n`\x02'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_11(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x0ba\x01\x00\na\x01\x00\n`\x00U`\x0b`\xff\na\x01\x00\n`\x01U`\x0ba\x01\x01\na\x01\x00\n`\x02U`\x0ba\x01\x00\n`\xff\n`\x03U`\x0b`\xff\n`\xff\n`\x04U`\x0ba\x01\x01\n`\xff\n`'\
                             '\x05U`\x0ba\x01\x00\na\x01\x01\n`\x06U`\x0b`\xff\na\x01\x01\n`\x07U`\x0ba\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 101890553050602617754926015251507180655045683544561831677215663393899651530753L,
                              4: 18699204107595983543960872109239991216796489027696178041447150619885834993407L,
                              5: 28030588289907797419557822587653826454800612063029355821581199851736896569599L,
                              6: 46803055793531443315544302649156478669852813820237923809362846979832263213057L,
                              7: 38012487980709084869740788615251142802769579500832552471564899673176158240513L,
                              8: 99386799399269176133460845920098250474961692612186547558407604211935236260097L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x0ba\x01\x00\na\x01\x00\n`\x00U`\x0b`\xff\na\x01\x00\n`'\
                                     '\x01U`\x0ba\x01\x01\na\x01\x00\n`\x02U`\x0ba\x01\x00\n`\xff'\
                                     '\n`\x03U`\x0b`\xff\n`\xff\n`\x04U`\x0ba\x01\x01\n`\xff'\
                                     '\n`\x05U`\x0ba\x01\x00\na\x01\x01\n`\x06U`\x0b`\xff\na'\
                                     '\x01\x01\n`\x07U`\x0ba\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_10(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\na\x01\x00\na\x01\x00\n`\x00U`\n`\xff\na\x01\x00\n`\x01U`\na\x01\x01\na\x01\x00\n`\x02U`\na\x01\x00\n`\xff\n`\x03U`\n`\xff\n`\xff\n`\x04U`\na\x01\x01\n`\xff\n`'\
                             '\x05U`\na\x01\x00\na\x01\x01\n`\x06U`\n`\xff\na\x01\x01\n`\x07U`\na\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 114914632844046583933260134950687189314890709482596989657240944241417975234561L,
                              4: 87710304769150807214235028736827993866595394348364203769770205211527048724735L,
                              5: 39290610890452765349502690951550527297496048075653585758833528807928504123647L,
                              6: 20484820853245168917669616382018121754787019534209236968739196776128530350081L,
                              7: 11024531560426914560193215886265230714814461857853456442906740807421673210113L,
                              8: 75819177417320365411421114579935983460137159977655625167576545660532198867201L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\na\x01\x00\na\x01\x00\n`\x00U`\n`\xff\na\x01\x00\n`'\
                                     '\x01U`\na\x01\x01\na\x01\x00\n`\x02U`\na\x01\x00\n`\xff'\
                                     '\n`\x03U`\n`\xff\n`\xff\n`\x04U`\na\x01\x01\n`\xff'\
                                     '\n`\x05U`\na\x01\x00\na\x01\x01\n`\x06U`\n`\xff\na'\
                                     '\x01\x01\n`\x07U`\na\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_13(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\ra\x01\x00\na\x01\x00\n`\x00U`\r`\xff\na\x01\x00\n`\x01U`\ra\x01\x01\na\x01\x00\n`\x02U`\ra\x01\x00\n`\xff\n`\x03U`\r`\xff\n`\xff\n`\x04U`\ra\x01\x01\n`\xff\n`'\
                             '\x05U`\ra\x01\x00\na\x01\x01\n`\x06U`\r`\xff\na\x01\x01\n`\x07U`\ra\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 101385611762951987714492031095649658484764376091855612650967395547963616919553L,
                              4: 63278556072604564884482487087793889312459895451266827394465757221242014531327L,
                              5: 76503832981956381614151500340961475340424985318231630606058029623855335407871L,
                              6: 29704886013344757714156143369444407261954548115394473056019137567405601980417L,
                              7: 6180831967313900224885719403625820907184847095809151480761496615548164636417L,
                              8: 11715094450588063760202497755635816063485576587916768949517781391496719433985L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\ra\x01\x00\na\x01\x00\n`\x00U`\r`\xff\na\x01\x00\n`'\
                                     '\x01U`\ra\x01\x01\na\x01\x00\n`\x02U`\ra\x01\x00\n`\xff'\
                                     '\n`\x03U`\r`\xff\n`\xff\n`\x04U`\ra\x01\x01\n`\xff'\
                                     '\n`\x05U`\ra\x01\x00\na\x01\x01\n`\x06U`\r`\xff\na'\
                                     '\x01\x01\n`\x07U`\ra\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_12(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x0ca\x01\x00\na\x01\x00\n`\x00U`\x0c`\xff\na\x01\x00\n`\x01U`\x0ca\x01\x01\na\x01\x00\n`\x02U`\x0ca\x01\x00\n`\xff\n`\x03U`\x0c`\xff\n`\xff\n`\x04U`\x0ca\x01\x01\n`\xff\n`'\
                             '\x05U`\x0ca\x01\x00\na\x01\x01\n`\x06U`\x0c`\xff\na\x01\x01\n`\x07U`\x0ca\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 80019368324629526638747930237288975316558411254569129739228874063734837870593L,
                              4: 88884190982786141138179309319347702000408571864083758904533741801152047218943L,
                              5: 93752052283216392393116198718556172755601810993178115549913696304169392799999L,
                              6: 74991547227499153688926126987451352010669639751209250187538225368170577788929L,
                              7: 27079447990334421832768535213001382538364337104003887072154060444218791559425L,
                              8: 28625806625801789859034042498407601320406435797081589212686750536894719459585L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x0ca\x01\x00\na\x01\x00\n`\x00U`\x0c`\xff\na\x01\x00\n`'\
                                     '\x01U`\x0ca\x01\x01\na\x01\x00\n`\x02U`\x0ca\x01\x00\n`\xff'\
                                     '\n`\x03U`\x0c`\xff\n`\xff\n`\x04U`\x0ca\x01\x01\n`\xff'\
                                     '\n`\x05U`\x0ca\x01\x00\na\x01\x01\n`\x06U`\x0c`\xff\na'\
                                     '\x01\x01\n`\x07U`\x0ca\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_15(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x0fa\x01\x00\na\x01\x00\n`\x00U`\x0f`\xff\na\x01\x00\n`\x01U`\x0fa\x01\x01\na\x01\x00\n`\x02U`\x0fa\x01\x00\n`\xff\n`\x03U`\x0f`\xff\n`\xff\n`\x04U`\x0fa\x01\x01\n`\xff\n`'\
                             '\x05U`\x0fa\x01\x00\na\x01\x01\n`\x06U`\x0f`\xff\na\x01\x01\n`\x07U`\x0fa\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 68982874759710612496975781615902521595583884631451676122827056878494762926081L,
                              4: 53267908598997767238534137623343245537541072806296987245216780723497328312063L,
                              5: 41822178356738160566095801792837818951900117455658262420410104537286555140351L,
                              6: 86452819266916911147472883657170177834027340189490420841254375251628114575361L,
                              7: 89845175342602369207035384471933876015521364174370333412283388556428862029569L,
                              8: 104349806891036036967003847033901513956038759123355017779183952015787964694785L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x0fa\x01\x00\na\x01\x00\n`\x00U`\x0f`\xff\na\x01\x00\n`'\
                                     '\x01U`\x0fa\x01\x01\na\x01\x00\n`\x02U`\x0fa\x01\x00\n`\xff'\
                                     '\n`\x03U`\x0f`\xff\n`\xff\n`\x04U`\x0fa\x01\x01\n`\xff'\
                                     '\n`\x05U`\x0fa\x01\x00\na\x01\x01\n`\x06U`\x0f`\xff\na'\
                                     '\x01\x01\n`\x07U`\x0fa\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_14(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x0ea\x01\x00\na\x01\x00\n`\x00U`\x0e`\xff\na\x01\x00\n`\x01U`\x0ea\x01\x01\na\x01\x00\n`\x02U`\x0ea\x01\x00\n`\xff\n`\x03U`\x0e`\xff\n`\xff\n`\x04U`\x0ea\x01\x01\n`\xff\n`'\
                             '\x05U`\x0ea\x01\x00\na\x01\x01\n`\x06U`\x0e`\xff\na\x01\x01\n`\x07U`\x0ea\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 99326861617797847825989094377338474355592720485724747187463584063301701599233L,
                              4: 59695912561066707238569545894561715648962424372877657499564472558682379518207L,
                              5: 28709703754750430860229520230767157586576999441276879698135528982523256111359L,
                              6: 101656667831445454371959219483138111838033319621999128300415596713351307067393L,
                              7: 58439732298837688121708859932549010044236910193436024683432213454604389712129L,
                              8: 92859850393288921948278045707683108445628062778327872864204574351935748833537L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x0ea\x01\x00\na\x01\x00\n`\x00U`\x0e`\xff\na\x01\x00\n`'\
                                     '\x01U`\x0ea\x01\x01\na\x01\x00\n`\x02U`\x0ea\x01\x00\n`\xff'\
                                     '\n`\x03U`\x0e`\xff\n`\xff\n`\x04U`\x0ea\x01\x01\n`\xff'\
                                     '\n`\x05U`\x0ea\x01\x00\na\x01\x01\n`\x06U`\x0e`\xff\na'\
                                     '\x01\x01\n`\x07U`\x0ea\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_17(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x11a\x01\x00\na\x01\x00\n`\x00U`\x11`\xff\na\x01\x00\n`\x01U`\x11a\x01\x01\na\x01\x00\n`\x02U`\x11a\x01\x00\n`\xff\n`\x03U`\x11`\xff\n`\xff\n`\x04U`\x11a\x01\x01\n`\xff\n`'\
                             '\x05U`\x11a\x01\x00\na\x01\x01\n`\x06U`\x11`\xff\na\x01\x01\n`\x07U`\x11a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 106932249095798874746427270594356880818721890878145157091004752088375721197569L,
                              4: 51639322353743519847823032836772280028397740691078922235532368225465122422527L,
                              5: 62775564944078456192298461614676049908347327243429853520972071233715122012415L,
                              6: 65037094785246885454606881205443270315416968651421801787150983510683528724481L,
                              7: 58726458517348185850456409500813811723249871888157665424521042251051315625729L,
                              8: 70752790625743581923020113660624109695844588519198843885497132740742925582593L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x11a\x01\x00\na\x01\x00\n`\x00U`\x11`\xff\na\x01\x00\n`'\
                                     '\x01U`\x11a\x01\x01\na\x01\x00\n`\x02U`\x11a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x11`\xff\n`\xff\n`\x04U`\x11a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x11a\x01\x00\na\x01\x01\n`\x06U`\x11`\xff\na'\
                                     '\x01\x01\n`\x07U`\x11a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_16(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x10a\x01\x00\na\x01\x00\n`\x00U`\x10`\xff\na\x01\x00\n`\x01U`\x10a\x01\x01\na\x01\x00\n`\x02U`\x10a\x01\x00\n`\xff\n`\x03U`\x10`\xff\n`\xff\n`\x04U`\x10a\x01\x01\n`\xff\n`'\
                             '\x05U`\x10a\x01\x00\na\x01\x01\n`\x06U`\x10`\xff\na\x01\x01\n`\x07U`\x10a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 59218374413855094843010372350483534772436796474263353446173791691863603806209L,
                              4: 22225091498890937679096212997872924330088689197184547205512400761506168307967L,
                              5: 48021548981484736825763261181421514354558065935321217017669311494625227178239L,
                              6: 15632688003335927851000079576175125536432017372200003824721518905389570064385L,
                              7: 61912347378855182565924718380527615965311347792179366367697517640802114732289L,
                              8: 33499807378575975745280476771049124131850159969595906991504434239871965462785L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x10a\x01\x00\na\x01\x00\n`\x00U`\x10`\xff\na\x01\x00\n`'\
                                     '\x01U`\x10a\x01\x01\na\x01\x00\n`\x02U`\x10a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x10`\xff\n`\xff\n`\x04U`\x10a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x10a\x01\x00\na\x01\x01\n`\x06U`\x10`\xff\na'\
                                     '\x01\x01\n`\x07U`\x10a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmod1_overflow2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x05`\x00`\x01`\x00\x03\x08`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x05`\x00`\x01`\x00\x03\x08`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmod1_overflow3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x05`\x01`\x01`\x00\x03\x08`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x05`\x01`\x01`\x00\x03\x08`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmod0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x02`\x02`\x01\x08`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x02`\x02`\x01\x08`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_18(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x12a\x01\x00\n`\x00U`\x12`\xff\n`\x01U`\x12a\x01\x01\n`\x02U',
                             'storage': {
                              0: 22300745198530623141535718272648361505980416L,
                              1: 20783718319962978657280835660556793212890625L,
                              2: 23921930261174538048551511546295524724904449L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x12a\x01\x00\n`\x00U`\x12`\xff\n`\x01U`\x12a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_19(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x13a\x01\x00\n`\x00U`\x13`\xff\n`\x01U`\x13a\x01\x01\n`\x02U',
                             'storage': {
                              0: 5708990770823839524233143877797980545530986496L,
                              1: 5299848171590559557606613093441982269287109375L,
                              2: 6147936077121856278477738467397949854300443393L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x13a\x01\x00\n`\x00U`\x13`\xff\n`\x01U`\x13a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_16(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x10a\x01\x00\n`\x00U`\x10`\xff\n`\x01U`\x10a\x01\x01\n`\x02U',
                             'storage': {
                              0: 340282366920938463463374607431768211456L,
                              1: 319626579315078487616775634918212890625L,
                              2: 362184594182720980613658216570962841601L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x10a\x01\x00\n`\x00U`\x10`\xff\n`\x01U`\x10a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_17(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x11a\x01\x00\n`\x00U`\x11`\xff\n`\x01U`\x11a\x01\x01\n`\x02U',
                             'storage': {
                              0: 87112285931760246646623899502532662132736L,
                              1: 81504777725345014342277786904144287109375L,
                              2: 93081440704959292017710161658737450291457L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x11a\x01\x00\n`\x00U`\x11`\xff\n`\x01U`\x11a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_14(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x0ea\x01\x00\n`\x00U`\x0e`\xff\n`\x01U`\x0ea\x01\x01\n`\x02U',
                             'storage': {
                              0: 5192296858534827628530496329220096L,
                              1: 4915441435064644177113043212890625L,
                              2: 5483574227962890893331590433934849L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x0ea\x01\x00\n`\x00U`\x0e`\xff\n`\x01U`\x0ea\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_15(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x0fa\x01\x00\n`\x00U`\x0f`\xff\n`\x01U`\x0fa\x01\x01\n`\x02U',
                             'storage': {
                              0: 1329227995784915872903807060280344576L,
                              1: 1253437565941484265163826019287109375L,
                              2: 1409278576586462959586218741521256193L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x0fa\x01\x00\n`\x00U`\x0f`\xff\n`\x01U`\x0fa\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_12(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x0ca\x01\x00\n`\x00U`\x0c`\xff\n`\x01U`\x0ca\x01\x01\n`\x02U',
                             'storage': {
                              0: 79228162514264337593543950336L,
                              1: 75593101654204447168212890625L,
                              2: 83022819845310162051379891201L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x0ca\x01\x00\n`\x00U`\x0c`\xff\n`\x01U`\x0ca\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_13(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\ra\x01\x00\n`\x00U`\r`\xff\n`\x01U`\ra\x01\x01\n`\x02U',
                             'storage': {
                              0: 20282409603651670423947251286016L,
                              1: 19276240921822134027894287109375L,
                              2: 21336864700244711647204632038657L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\ra\x01\x00\n`\x00U`\r`\xff\n`\x01U`\ra\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_10(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\na\x01\x00\n`\x00U`\n`\xff\n`\x01U`\na\x01\x01\n`\x02U',
                             'storage': {
                              0: 1208925819614629174706176L,
                              1: 1162523670191533212890625L,
                              2: 1256988294225653106805249L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\na\x01\x00\n`\x00U`\n`\xff\n`\x01U`\na\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_11(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x0ba\x01\x00\n`\x00U`\x0b`\xff\n`\x01U`\x0ba\x01\x01\n`\x02U',
                             'storage': {
                              0: 309485009821345068724781056L,
                              1: 296443535898840969287109375L,
                              2: 323045991615992848448948993L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x0ba\x01\x00\n`\x00U`\x0b`\xff\n`\x01U`\x0ba\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmoddivByZero2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x00`\x01\t`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x00`\x01\t`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmoddivByZero3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x00`\x00\t`\x01\x03`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x00`\x00\t`\x01\x03`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmoddivByZero1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x01`\x00\t`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x01`\x00\t`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdiv_i256min2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x00\x03\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00\x03\x05`\x00U',
                             'storage': {
                              0: 57896044618658097711785492504343953926634992332820282019728792003956564819968L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x00\x03\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00\x03\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdiv_i256min3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x05`'\
                             '\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 1
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_fibbonacci_unrolled(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01`\x00R` `\x00\xf3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81'\
                                     '\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01\x81\x81\x01'\
                                     '\x81\x81\x01\x81\x81\x01\x81\x81\x01`\x00R` `\x00\xf3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_divByZero(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x02\x04`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x02\x04`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_signextend_00(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x00\x0b`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x00\x0b`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x04a\x01\x00\n`\x00U`\x04`\xff\n`\x01U`\x04a\x01\x01\n`\x02U',
                             'storage': {
                              0: 4294967296,
                              1: 4228250625,
                              2: 4362470401
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x04a\x01\x00\n`\x00U`\x04`\xff\n`\x01U`\x04a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_5(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x05a\x01\x00\n`\x00U`\x05`\xff\n`\x01U`\x05a\x01\x01\n`\x02U',
                             'storage': {
                              0: 1099511627776,
                              1: 1078203909375,
                              2: 1121154893057
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x05a\x01\x00\n`\x00U`\x05`\xff\n`\x01U`\x05a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_6(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x06a\x01\x00\n`\x00U`\x06`\xff\n`\x01U`\x06a\x01\x01\n`\x02U',
                             'storage': {
                              0: 281474976710656,
                              1: 274941996890625,
                              2: 288136807515649
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x06a\x01\x00\n`\x00U`\x06`\xff\n`\x01U`\x06a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_7(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x07a\x01\x00\n`\x00U`\x07`\xff\n`\x01U`\x07a\x01\x01\n`\x02U',
                             'storage': {
                              0: 72057594037927936,
                              1: 70110209207109375,
                              2: 74051159531521793
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x07a\x01\x00\n`\x00U`\x07`\xff\n`\x01U`\x07a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01a\x01\x00\n`\x00U`\x01`\xff\n`\x01U`\x01a\x01\x01\n`\x02U',
                             'storage': {
                              0: 256,
                              1: 255,
                              2: 257
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01a\x01\x00\n`\x00U`\x01`\xff\n`\x01U`\x01a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x02a\x01\x00\n`\x00U`\x02`\xff\n`\x01U`\x02a\x01\x01\n`\x02U',
                             'storage': {
                              0: 65536,
                              1: 65025,
                              2: 66049
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x02a\x01\x00\n`\x00U`\x02`\xff\n`\x01U`\x02a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03a\x01\x00\n`\x00U`\x03`\xff\n`\x01U`\x03a\x01\x01\n`\x02U',
                             'storage': {
                              0: 16777216,
                              1: 16581375,
                              2: 16974593
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03a\x01\x00\n`\x00U`\x03`\xff\n`\x01U`\x03a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mul2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x17`\x00\x02`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x17`\x00\x02`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mul3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x17\x02`\x00U',
                             'storage': {
                              0: 23
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x17\x02`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mul0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x02\x02`\x00U',
                             'storage': {
                              0: 6
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x02\x02`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mul1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_8(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x08a\x01\x00\n`\x00U`\x08`\xff\n`\x01U`\x08a\x01\x01\n`\x02U',
                             'storage': {
                              0: 18446744073709551616L,
                              1: 17878103347812890625L,
                              2: 19031147999601100801L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x08a\x01\x00\n`\x00U`\x08`\xff\n`\x01U`\x08a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_9(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\ta\x01\x00\n`\x00U`\t`\xff\n`\x01U`\ta\x01\x01\n`\x02U',
                             'storage': {
                              0: 4722366482869645213696L,
                              1: 4558916353692287109375L,
                              2: 4891005035897482905857L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\ta\x01\x00\n`\x00U`\t`\xff\n`\x01U`\ta\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mul4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02`\x00U',
                             'storage': {
                              0: 57896044618658097711785492504343953926634992332820282019728792003956564819968L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mul5(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf2_64(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`@`\x02\n`\x00U`?`\x02\n`\x01U`A`\x02\n`\x02U',
                             'storage': {
                              0: 18446744073709551616L,
                              1: 9223372036854775808L,
                              2: 36893488147419103232L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`@`\x02\n`\x00U`?`\x02\n`\x01U`A`\x02\n`\x02'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_signextend_0_BigByte(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x0b`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x0b`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmodDivByZero(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x01`\x04\x08`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x01`\x04\x08`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expXY(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x005`\x00U` 5`\x01U`\x01T`\x00T\n`\x02U',
                             'storage': {
                              0: 2,
                              1: 281474976710671
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x005`\x00U` 5`\x01U`\x01T`\x00T\n`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x0f'
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_smod8_byZero(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\r`\x00`\xc8`\x00\x03\x07\x03`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639923L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\r`\x00`\xc8`\x00\x03\x07\x03`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mod2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x06`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x06`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mod3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x03\x06`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x03\x06`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_arith1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x01\x90\x01`\x07\x02`\x05\x01`\x02\x90\x04`\x04\x90`\x01`!\x90\x05`\x15\x01`\x03\x02`\x05\x90\x07`\x03\x03`\t`\x11\n`\x00R`\x08`\x00\xf3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x01\x90\x01`\x07\x02`\x05\x01`\x02\x90\x04`\x04\x90`\x01`!'\
                                     '\x90\x05`\x15\x01`\x03\x02`\x05\x90\x07`\x03\x03`\t`\x11\n`\x00R'\
                                     '`\x08`\x00\xf3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmod1_overflow3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x05`\x02\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t`\x00U',
                             'storage': {
                              0: 4
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x05`\x02\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmod1_overflow2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x05`\x02\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x05`\x02\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmod1_overflow4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x05`\x02\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\t`\x00U',
                             'storage': {
                              0: 3
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x05`\x02\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\t`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_signextend_bitIsSet(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'b\x12/\xf4`\x00\x0b`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639924L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='b\x12/\xf4`\x00\x0b`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_add4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01\x01`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01\x01`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_add3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x00\x01`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x00\x01`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_add2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_add1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x04\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01`\x00U',
                             'storage': {
                              0: 3
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x04\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_add0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639934L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdiv_dejavu(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='``\x05``\t``\x00\x03\x05\x80``\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 1
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdiv1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x05`'\
                             '\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdiv0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03\x05`'\
                             '\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03'\
                                     '\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdiv3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x02`\x00\x03`\x04\x05`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639934L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x02`\x00\x03`\x04\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdiv2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x04`\x00\x03`\x02`\x00\x03\x05`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x04`\x00\x03`\x02`\x00\x03\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdiv5(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x00\x03\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00\x03\x05`\x00U',
                             'storage': {
                              0: 57896044618658097711785492504343953926634992332820282019728792003956564819968L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x00\x03\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00\x03\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdiv4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x04`\x00\x03`\x05\x05`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x04`\x00\x03`\x05\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdiv7(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x19`\x01`\x00\x03\x05`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x19`\x01`\x00\x03\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdiv6(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00\x03\x05`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00\x03\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdiv9(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x01`\x00\x03\x05`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x01`\x00\x03\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdiv8(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x00\x03`\x01`\x00\x03\x05`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x00\x03`\x01`\x00\x03\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_signextend_BitIsNotSetInHigherByte(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'b\x12j\xf4`\x01\x0b`\x00U',
                             'storage': {
                              0: 27380
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='b\x12j\xf4`\x01\x0b`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmod1_overflowDiff(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x05`\x02`\x00\x03`\x01`\x00\x03\x08`\x00U',
                             'storage': {
                              0: 4
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x05`\x02`\x00\x03`\x01`\x00\x03\x08`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf2_32(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '` `\x02\n`\x00U`\x1f`\x02\n`\x01U`!`\x02\n`\x02U',
                             'storage': {
                              0: 4294967296,
                              1: 2147483648,
                              2: 8589934592
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='` `\x02\n`\x00U`\x1f`\x02\n`\x01U`!`\x02\n`\x02'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_stop(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x00',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x00', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmod3_0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x02`\x03`\x00\x03`\x01`\x04\x08\x14`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x02`\x03`\x00\x03`\x01`\x04\x08\x14`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmod2_0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x01`\x05`\x00\x03\t`\x03`\x05`\x00\x03\x07\x14`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x01`\x05`\x00\x03\t`\x03`\x05`\x00\x03\x07\x14`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmod2_1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x01`\x05`\x00\x03\t`\x03`\x05`\x00\x03\x06\x14`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x01`\x05`\x00\x03\t`\x03`\x05`\x00\x03\x06\x14`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_signextend_Overflow_dj42(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x05V', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_33(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`!a\x01\x00\na\x01\x00\n`\x00U`!`\xff\na\x01\x00\n`\x01U`!a\x01\x01\na\x01\x00\n`\x02U`!a\x01\x00\n`\xff\n`\x03U`!`\xff\n`\xff\n`\x04U`!a\x01\x01\n`\xff\n`'\
                             '\x05U`!a\x01\x00\na\x01\x01\n`\x06U`!`\xff\na\x01\x01\n`\x07U`!a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              0: 1,
                              3: 1,
                              4: 64135483568242129660189811524440266649397055745562313858450489812292508581631L,
                              5: 46398695887435477574305959260606258506859266453477299410648234630417678926079L,
                              6: 1,
                              7: 104245036966221287026270471239637571306194808795660508680275132968035193847553L,
                              8: 26104390486839708587903636031676095792383620198177622282435444888970572398849L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`!a\x01\x00\na\x01\x00\n`\x00U`!`\xff\na\x01\x00\n`'\
                                     '\x01U`!a\x01\x01\na\x01\x00\n`\x02U`!a\x01\x00\n`\xff'\
                                     '\n`\x03U`!`\xff\n`\xff\n`\x04U`!a\x01\x01\n`\xff'\
                                     '\n`\x05U`!a\x01\x00\na\x01\x01\n`\x06U`!`\xff\na'\
                                     '\x01\x01\n`\x07U`!a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_32(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '` a\x01\x00\na\x01\x00\n`\x00U` `\xff\na\x01\x00\n`\x01U` a\x01\x01\na\x01\x00\n`\x02U` a\x01\x00\n`\xff\n`\x03U` `\xff\n`\xff\n`\x04U` a\x01\x01\n`\xff\n`'\
                             '\x05U` a\x01\x00\na\x01\x01\n`\x06U` `\xff\na\x01\x01\n`\x07U` a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              0: 1,
                              3: 1,
                              4: 83290000642302749123389682511803062288674053658743011274318334092251811021055L,
                              5: 107796101041354274209995467705717706987961056180087872912716600609070003519743L,
                              6: 1,
                              7: 107494645127108603178874279381187166621140539703347472922785670214454066807041L,
                              8: 36720049077504322823338175525090117350613636142111226285606247996852040368385L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='` a\x01\x00\na\x01\x00\n`\x00U` `\xff\na\x01\x00\n`'\
                                     '\x01U` a\x01\x01\na\x01\x00\n`\x02U` a\x01\x00\n`\xff'\
                                     '\n`\x03U` `\xff\n`\xff\n`\x04U` a\x01\x01\n`\xff'\
                                     '\n`\x05U` a\x01\x00\na\x01\x01\n`\x06U` `\xff\na'\
                                     '\x01\x01\n`\x07U` a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_31(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x1fa\x01\x00\na\x01\x00\n`\x00U`\x1f`\xff\na\x01\x00\n`\x01U`\x1fa\x01\x01\na\x01\x00\n`\x02U`\x1fa\x01\x00\n`\xff\n`\x03U`\x1f`\xff\n`\xff\n`\x04U`\x1fa\x01\x01\n`\xff\n`'\
                             '\x05U`\x1fa\x01\x00\na\x01\x01\n`\x06U`\x1f`\xff\na\x01\x01\n`\x07U`\x1fa\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 1,
                              4: 112985507611037855861351294922934055679136269367323143362415325409413936578303L,
                              5: 62075428888398948475210828438627792272695349249636165883831517298362121388287L,
                              6: 1,
                              7: 107818586060941895166288682821279836433776680519631913166930934049164849315585L,
                              8: 81761461417135675039681145207874119897008583353196969206846550448999168409857L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x1fa\x01\x00\na\x01\x00\n`\x00U`\x1f`\xff\na\x01\x00\n`'\
                                     '\x01U`\x1fa\x01\x01\na\x01\x00\n`\x02U`\x1fa\x01\x00\n`\xff'\
                                     '\n`\x03U`\x1f`\xff\n`\xff\n`\x04U`\x1fa\x01\x01\n`\xff'\
                                     '\n`\x05U`\x1fa\x01\x00\na\x01\x01\n`\x06U`\x1f`\xff\na'\
                                     '\x01\x01\n`\x07U`\x1fa\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_30(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x1ea\x01\x00\na\x01\x00\n`\x00U`\x1e`\xff\na\x01\x00\n`\x01U`\x1ea\x01\x01\na\x01\x00\n`\x02U`\x1ea\x01\x00\n`\xff\n`\x03U`\x1e`\xff\n`\xff\n`\x04U`\x1ea\x01\x01\n`\xff\n`'\
                             '\x05U`\x1ea\x01\x00\na\x01\x01\n`\x06U`\x1e`\xff\na\x01\x01\n`\x07U`\x1ea\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 57443731770074831323412168344153766786583156455220123566449660816425654157313L,
                              4: 105599420949718761373086994757860478259024540739650663766696805544756942864639L,
                              5: 23492387631362241410954083125785775807737875757943251864054532318400312377599L,
                              6: 58348357467241364100158816664534141066686828210420440473007923191487475482625L,
                              7: 114548869433232456914198824234733305079953169742594190201731254450200934220033L,
                              8: 89404147834226705822834044214734168223325601657396406432574474219566049132801L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x1ea\x01\x00\na\x01\x00\n`\x00U`\x1e`\xff\na\x01\x00\n`'\
                                     '\x01U`\x1ea\x01\x01\na\x01\x00\n`\x02U`\x1ea\x01\x00\n`\xff'\
                                     '\n`\x03U`\x1e`\xff\n`\xff\n`\x04U`\x1ea\x01\x01\n`\xff'\
                                     '\n`\x05U`\x1ea\x01\x00\na\x01\x01\n`\x06U`\x1e`\xff\na'\
                                     '\x01\x01\n`\x07U`\x1ea\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_exp3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'c\x7f\xff\xff\xff`\x00\n`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='c\x7f\xff\xff\xff`\x00\n`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_exp2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'c\x7f\xff\xff\xffc\x7f\xff\xff\xff\n`\x00U',
                             'storage': {
                              0: 85283587600373122322928310453130164142775440871555374690023406742016433848319L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='c\x7f\xff\xff\xffc\x7f\xff\xff\xff\n`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_exp1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\n`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\n`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_exp0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x02`\x02\n`\x00U',
                             'storage': {
                              0: 4
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x02`\x02\n`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_exp7(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'a\x01\x01`\x02\n`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='a\x01\x01`\x02\n`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_exp6(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'a\x01\x01`\x01\n`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='a\x01\x01`\x01\n`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_exp5(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01a\x01\x01\n`\x00U',
                             'storage': {
                              0: 257
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01a\x01\x01\n`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_exp4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00c\x7f\xff\xff\xff\n`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00c\x7f\xff\xff\xff\n`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmod4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`d`\x1b`%\t`\x00S`\x00`\x01\xf3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`d`\x1b`%\t`\x00S`\x00`\x01\xf3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmod1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x02`\x00\x03`\x01`\x00\x03\t`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x02`\x00\x03`\x01`\x00\x03\t`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmod0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x02`\x02`\x01\t`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x02`\x02`\x01\t`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmod3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x00\x03`\x01`\x05\t`\x00U',
                             'storage': {
                              0: 5
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x00\x03`\x01`\x05\t`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmod2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x01`\x05`\x00\x03\t`\x00U',
                             'storage': {
                              0: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x01`\x05`\x00\x03\t`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_signextend_BitIsNotSet(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'b\x12/j`\x00\x0b`\x00U',
                             'storage': {
                              0: 106
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='b\x12/j`\x00\x0b`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_smod2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x05`\x00\x03\x07`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639934L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x05`\x00\x03\x07`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_smod3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x02`\x00\x03\x07`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x02`\x00\x03\x07`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_smod0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x00\x03`\x05`\x00\x03\x07`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639934L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x00\x03`\x05`\x00\x03\x07`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_smod1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x00\x03`\x05\x07`\x00U',
                             'storage': {
                              0: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x00\x03`\x05\x07`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_smod6(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03\x07`'\
                             '\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03'\
                                     '\x07`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_smod7(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03\x07`'\
                             '\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03'\
                                     '\x07`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_smod4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x02`\x00\x03\x07`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x02`\x00\x03\x07`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_smod5(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03\x07`'\
                             '\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03'\
                                     '\x07`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_signextend_bigBytePlus1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'f\xf0\x00\x00\x00\x00\x00\x01a\xff\xff\x0b`\x00U',
                             'storage': {
                              0: 67553994410557441
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='f\xf0\x00\x00\x00\x00\x00\x01a\xff\xff\x0b`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmodDivByZero3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x00`\x00`\x00\x08\x03`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x00`\x00`\x00\x08\x03`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmodDivByZero2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x00`\x01\x08`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x00`\x01\x08`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmodDivByZero1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x01`\x00\x08`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x01`\x00\x08`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_20(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x14a\x01\x00\na\x01\x00\n`\x00U`\x14`\xff\na\x01\x00\n`\x01U`\x14a\x01\x01\na\x01\x00\n`\x02U`\x14a\x01\x00\n`\xff\n`\x03U`\x14`\xff\n`\xff\n`\x04U`\x14a\x01\x01\n`\xff\n`'\
                             '\x05U`\x14a\x01\x00\na\x01\x01\n`\x06U`\x14`\xff\na\x01\x01\n`\x07U`\x14a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 11095128516485485949393957618129868380154060907080998068241024442132250755073L,
                              4: 46991903036590546434450396132155379898382754470087505882848419300294039175423L,
                              5: 73186518788354931992268309607910110463491507624599205551010472211597684375807L,
                              6: 108556343652588169849457393533512576632030094861390478212741088232779389337601L,
                              7: 92676439589099754655655035309645792128747303076858301322675459756614409257217L,
                              8: 26768014775117825313334555689265921696132636065691461838850023344632663113985L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x14a\x01\x00\na\x01\x00\n`\x00U`\x14`\xff\na\x01\x00\n`'\
                                     '\x01U`\x14a\x01\x01\na\x01\x00\n`\x02U`\x14a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x14`\xff\n`\xff\n`\x04U`\x14a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x14a\x01\x00\na\x01\x01\n`\x06U`\x14`\xff\na'\
                                     '\x01\x01\n`\x07U`\x14a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_21(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x15a\x01\x00\na\x01\x00\n`\x00U`\x15`\xff\na\x01\x00\n`\x01U`\x15a\x01\x01\na\x01\x00\n`\x02U`\x15a\x01\x00\n`\xff\n`\x03U`\x15`\xff\n`\xff\n`\x04U`\x15a\x01\x01\n`\xff\n`'\
                             '\x05U`\x15a\x01\x00\na\x01\x01\n`\x06U`\x15`\xff\na\x01\x01\n`\x07U`\x15a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 61342758524695712879149510032736516840959960237361968522720240995941081939969L,
                              4: 57812011273622918000071749720687928256516815605767307141354861404086017982207L,
                              5: 46296291811536365292556049945344103552150633476469514979425859868512526598399L,
                              6: 322558106684579804056342494121733014907964762227052991898425692372556840961L,
                              7: 12926000559402174768074498440631375790110453153840292162623164820974892089089L,
                              8: 32708451558369615005306371218201330517589418479369948923109316077262889877761L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x15a\x01\x00\na\x01\x00\n`\x00U`\x15`\xff\na\x01\x00\n`'\
                                     '\x01U`\x15a\x01\x01\na\x01\x00\n`\x02U`\x15a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x15`\xff\n`\xff\n`\x04U`\x15a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x15a\x01\x00\na\x01\x01\n`\x06U`\x15`\xff\na'\
                                     '\x01\x01\n`\x07U`\x15a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_22(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x16a\x01\x00\na\x01\x00\n`\x00U`\x16`\xff\na\x01\x00\n`\x01U`\x16a\x01\x01\na\x01\x00\n`\x02U`\x16a\x01\x00\n`\xff\n`\x03U`\x16`\xff\n`\xff\n`\x04U`\x16a\x01\x01\n`\xff\n`'\
                             '\x05U`\x16a\x01\x00\na\x01\x01\n`\x06U`\x16`\xff\na\x01\x01\n`\x07U`\x16a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 71814135284416114880191592207680751094301890903187796489607853892644475240449L,
                              4: 106866850240512374621662861338623158047087776162904039993394603528705656094975L,
                              5: 99765853430484146798068180455785111509035460348020690374049778250251620450559L,
                              6: 82574875311252429838423678495163651816438979130125565925996977247374551285761L,
                              7: 99934025607600089733745581488993139205016396189826818067336339035974376489217L,
                              8: 35007363591506868599869923830536024009816445536217041298284962531613703799041L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x16a\x01\x00\na\x01\x00\n`\x00U`\x16`\xff\na\x01\x00\n`'\
                                     '\x01U`\x16a\x01\x01\na\x01\x00\n`\x02U`\x16a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x16`\xff\n`\xff\n`\x04U`\x16a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x16a\x01\x00\na\x01\x01\n`\x06U`\x16`\xff\na'\
                                     '\x01\x01\n`\x07U`\x16a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_23(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x17a\x01\x00\na\x01\x00\n`\x00U`\x17`\xff\na\x01\x00\n`\x01U`\x17a\x01\x01\na\x01\x00\n`\x02U`\x17a\x01\x00\n`\xff\n`\x03U`\x17`\xff\n`\xff\n`\x04U`\x17a\x01\x01\n`\xff\n`'\
                             '\x05U`\x17a\x01\x00\na\x01\x01\n`\x06U`\x17`\xff\na\x01\x01\n`\x07U`\x17a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 89268533314566532404831973793582839324626494044866783105312323266711178444801L,
                              4: 37762166224943216354061133881990828131179932191099912485812863065457132175103L,
                              5: 60725702600970256357882219932341380643608066257735113198817913599684720918783L,
                              6: 65007838489074471546542423180695635713241448165562221873945885887695534686209L,
                              7: 39191009359259173528470521365271419600056804692268038397265417242355032391425L,
                              8: 38838507269272866444318461020062831438059409336168580428448728650033864835329L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x17a\x01\x00\na\x01\x00\n`\x00U`\x17`\xff\na\x01\x00\n`'\
                                     '\x01U`\x17a\x01\x01\na\x01\x00\n`\x02U`\x17a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x17`\xff\n`\xff\n`\x04U`\x17a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x17a\x01\x00\na\x01\x01\n`\x06U`\x17`\xff\na'\
                                     '\x01\x01\n`\x07U`\x17a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_24(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x18a\x01\x00\na\x01\x00\n`\x00U`\x18`\xff\na\x01\x00\n`\x01U`\x18a\x01\x01\na\x01\x00\n`\x02U`\x18a\x01\x00\n`\xff\n`\x03U`\x18`\xff\n`\xff\n`\x04U`\x18a\x01\x01\n`\xff\n`'\
                             '\x05U`\x18a\x01\x00\na\x01\x01\n`\x06U`\x18`\xff\na\x01\x01\n`\x07U`\x18a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 41702948777741797193501244445689020010195496354705359186810706719175142801409L,
                              4: 96460830178924398484922076248766509909499342148785790039585049283656451358975L,
                              5: 90022260026940719086649458685820469676814156683365485772963019848106668196095L,
                              6: 83737892266848770344209478015711919572202923197328142087712274118479341158401L,
                              7: 34667965620820543567793729481600811750612646439558795709621156892698571440385L,
                              8: 63456349992147796142899484244105564613077224608371012703923436064819027378433L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x18a\x01\x00\na\x01\x00\n`\x00U`\x18`\xff\na\x01\x00\n`'\
                                     '\x01U`\x18a\x01\x01\na\x01\x00\n`\x02U`\x18a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x18`\xff\n`\xff\n`\x04U`\x18a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x18a\x01\x00\na\x01\x01\n`\x06U`\x18`\xff\na'\
                                     '\x01\x01\n`\x07U`\x18a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_25(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x19a\x01\x00\na\x01\x00\n`\x00U`\x19`\xff\na\x01\x00\n`\x01U`\x19a\x01\x01\na\x01\x00\n`\x02U`\x19a\x01\x00\n`\xff\n`\x03U`\x19`\xff\n`\xff\n`\x04U`\x19a\x01\x01\n`\xff\n`'\
                             '\x05U`\x19a\x01\x00\na\x01\x01\n`\x06U`\x19`\xff\na\x01\x01\n`\x07U`\x19a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 23082677268810102567787957297101600109208477565640060193443191380828630286337L,
                              4: 57586941904103598579764390844964981043049052155114937185797634212581688737535L,
                              5: 8349948914438381240675947491016368716939310261807744693247618018857855811839L,
                              6: 15363911409789054756994145414988457629001175372500027154689132866782353162241L,
                              7: 46259949032879378200402632411429142790698144536296724901325017870796521602817L,
                              8: 18926565843436435145785316737060988839741893259630947091482933154404627972353L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x19a\x01\x00\na\x01\x00\n`\x00U`\x19`\xff\na\x01\x00\n`'\
                                     '\x01U`\x19a\x01\x01\na\x01\x00\n`\x02U`\x19a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x19`\xff\n`\xff\n`\x04U`\x19a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x19a\x01\x00\na\x01\x01\n`\x06U`\x19`\xff\na'\
                                     '\x01\x01\n`\x07U`\x19a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_26(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x1aa\x01\x00\na\x01\x00\n`\x00U`\x1a`\xff\na\x01\x00\n`\x01U`\x1aa\x01\x01\na\x01\x00\n`\x02U`\x1aa\x01\x00\n`\xff\n`\x03U`\x1a`\xff\n`\xff\n`\x04U`\x1aa\x01\x01\n`\xff\n`'\
                             '\x05U`\x1aa\x01\x00\na\x01\x01\n`\x06U`\x1a`\xff\na\x01\x01\n`\x07U`\x1aa\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 3768829712260290751596832614926327440601038856186643509120209088559741665281L,
                              4: 13156479618473122453827333675314833413833735874110900611322468555500321898751L,
                              5: 63130786578447000143359706132655438781703096764577257433234668088023930503423L,
                              6: 112022376074563568812658720950344193866391401393868338298317741635149131415553L,
                              7: 47580733608497810153764935870993478768529823747464839196957117315105893515521L,
                              8: 23524974130592294778780884663680818889754585050430865625920211481456128164097L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x1aa\x01\x00\na\x01\x00\n`\x00U`\x1a`\xff\na\x01\x00\n`'\
                                     '\x01U`\x1aa\x01\x01\na\x01\x00\n`\x02U`\x1aa\x01\x00\n`\xff'\
                                     '\n`\x03U`\x1a`\xff\n`\xff\n`\x04U`\x1aa\x01\x01\n`\xff'\
                                     '\n`\x05U`\x1aa\x01\x00\na\x01\x01\n`\x06U`\x1a`\xff\na'\
                                     '\x01\x01\n`\x07U`\x1aa\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_27(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x1ba\x01\x00\na\x01\x00\n`\x00U`\x1b`\xff\na\x01\x00\n`\x01U`\x1ba\x01\x01\na\x01\x00\n`\x02U`\x1ba\x01\x00\n`\xff\n`\x03U`\x1b`\xff\n`\xff\n`\x04U`\x1ba\x01\x01\n`\xff\n`'\
                             '\x05U`\x1ba\x01\x00\na\x01\x01\n`\x06U`\x1b`\xff\na\x01\x01\n`\x07U`\x1ba\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 38483692440104869020221269351636561967706069858656226019112854607988829192193L,
                              4: 10645426101861250165015700741141466012883289588076566266701569922896236248831L,
                              5: 25748258427330701187106324113792620342456959469328998556434781418740772438271L,
                              6: 77082233471173346418599266142200390038512544417075286623318608643634621317121L,
                              7: 94151869200341398878616437045666795696078883504233219193427246506933705506561L,
                              8: 12350951291019601932674792934478196555907435661086930635755345915574960718081L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x1ba\x01\x00\na\x01\x00\n`\x00U`\x1b`\xff\na\x01\x00\n`'\
                                     '\x01U`\x1ba\x01\x01\na\x01\x00\n`\x02U`\x1ba\x01\x00\n`\xff'\
                                     '\n`\x03U`\x1b`\xff\n`\xff\n`\x04U`\x1ba\x01\x01\n`\xff'\
                                     '\n`\x05U`\x1ba\x01\x00\na\x01\x01\n`\x06U`\x1b`\xff\na'\
                                     '\x01\x01\n`\x07U`\x1ba\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_28(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x1ca\x01\x00\na\x01\x00\n`\x00U`\x1c`\xff\na\x01\x00\n`\x01U`\x1ca\x01\x01\na\x01\x00\n`\x02U`\x1ca\x01\x00\n`\xff\n`\x03U`\x1c`\xff\n`\xff\n`\x04U`\x1ca\x01\x01\n`\xff\n`'\
                             '\x05U`\x1ca\x01\x00\na\x01\x01\n`\x06U`\x1c`\xff\na\x01\x01\n`\x07U`\x1ca\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 9497679494969858173111228280487696204805187236545917538996138972524253806593L,
                              4: 115713305055813628029830397870082340621250109295361800782843501472376682709247L,
                              5: 4299935168788447616930174254794111967803711819433703141028002505899609161983L,
                              6: 48396598276623461154344680926355514803313977612377488861774531425231018393601L,
                              7: 11701876412405919828967277792221997215490266144933920662620311123106761801985L,
                              8: 16396339996675966641824655691596686069377228532714487479381181772823590076673L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x1ca\x01\x00\na\x01\x00\n`\x00U`\x1c`\xff\na\x01\x00\n`'\
                                     '\x01U`\x1ca\x01\x01\na\x01\x00\n`\x02U`\x1ca\x01\x00\n`\xff'\
                                     '\n`\x03U`\x1c`\xff\n`\xff\n`\x04U`\x1ca\x01\x01\n`\xff'\
                                     '\n`\x05U`\x1ca\x01\x00\na\x01\x01\n`\x06U`\x1c`\xff\na'\
                                     '\x01\x01\n`\x07U`\x1ca\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_29(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x1da\x01\x00\na\x01\x00\n`\x00U`\x1d`\xff\na\x01\x00\n`\x01U`\x1da\x01\x01\na\x01\x00\n`\x02U`\x1da\x01\x00\n`\xff\n`\x03U`\x1d`\xff\n`\xff\n`\x04U`\x1da\x01\x01\n`\xff\n`'\
                             '\x05U`\x1da\x01\x00\na\x01\x01\n`\x06U`\x1d`\xff\na\x01\x01\n`\x07U`\x1da\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 115564165965959783845054739631092071364728239242943609193859896807946381688833L,
                              4: 29796811703898097440410573382566381985909385283921616312244836775545701924607L,
                              5: 76104085449040805828347092808887448743067930323369183960769396019351951048959L,
                              6: 115567699660089340613713906226093557201759894210737360431776140020348966928385L,
                              7: 8209822676187988811602632091276622081528672854534573424947815086289865015041L,
                              8: 41969510495593925548691353067322800651185377980400075429162359216161003733249L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x1da\x01\x00\na\x01\x00\n`\x00U`\x1d`\xff\na\x01\x00\n`'\
                                     '\x01U`\x1da\x01\x01\na\x01\x00\n`\x02U`\x1da\x01\x00\n`\xff'\
                                     '\n`\x03U`\x1d`\xff\n`\xff\n`\x04U`\x1da\x01\x01\n`\xff'\
                                     '\n`\x05U`\x1da\x01\x00\na\x01\x01\n`\x06U`\x1d`\xff\na'\
                                     '\x01\x01\n`\x07U`\x1da\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_divBoostBug(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\x01\xda\xe6\x07k\x98\x1d\xae`v\xb9\x81\xda\xe6\x07k\x98\x1d\xae`v\xb9\x81\xda\xe6\x07k\x98\x1d\xae`w\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xba\x04`\x00U',
                             'storage': {
                              0: 137
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\x01\xda\xe6\x07k\x98\x1d\xae`v\xb9\x81\xda\xe6\x07k\x98\x1d\xae`v\xb9'\
                                     '\x81\xda\xe6\x07k\x98\x1d\xae`w\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xba\x04`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_divByNonZero2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x18`\x00\x04`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x18`\x00\x04`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_divByNonZero3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x01\x04`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x01\x04`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_divByNonZero0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x02`\x05\x04`\x00U',
                             'storage': {
                              0: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x02`\x05\x04`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_divByNonZero1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x18`\x17\x04`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x18`\x17\x04`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_signextend_AlmostBiggestByte(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\x0b`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639934L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\x0b`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_modByZero(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x00`\x03\x06\x03`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x00`\x03\x06\x03`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmod1_overflow4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x05`\x02`\x01`\x00\x03\x08`\x00U',
                             'storage': {
                              0: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x05`\x02`\x01`\x00\x03\x08`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_signextendInvalidByteNumber(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'b\x12j\xf4`P\x0b`\x00U',
                             'storage': {
                              0: 1207028
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='b\x12j\xf4`P\x0b`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf2_16(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x10`\x02\n`\x00U`\x0f`\x02\n`\x01U`\x11`\x02\n`\x02U',
                             'storage': {
                              0: 65536,
                              1: 32768,
                              2: 131072
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x10`\x02\n`\x00U`\x0f`\x02\n`\x01U`\x11`\x02\n`\x02'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_divByZero_2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x07`\x00`\r\x04\x01`\x00U',
                             'storage': {
                              0: 7
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x07`\x00`\r\x04\x01`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_signextend_BigByte_0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sub4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_signextend_BigBytePlus1_2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\xffh\xf0\x00\x00\x00\x00\x00\x00\x00\x01\x0b`\x00U',
                             'storage': {
                              0: 255
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\xffh\xf0\x00\x00\x00\x00\x00\x00\x00\x01\x0b`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sub2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x17`\x00\x03`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639913L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x17`\x00\x03`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmod2_1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x01`\x06`\x00\x03\x08`\x03`\x05`\x00\x03\x06\x14`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x01`\x06`\x00\x03\x08`\x03`\x05`\x00\x03\x06\x14`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmod2_0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x01`\x06`\x00\x03\x08`\x03`\x05`\x00\x03\x07\x14`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x01`\x06`\x00\x03\x08`\x03`\x05`\x00\x03\x07\x14`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_smod_i256min1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x00\x03\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00\x03\x07`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x00\x03\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00\x03\x07`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmod3_0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x02`\x03`\x00\x03`\x01`\x05\t\x14`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x02`\x03`\x00\x03`\x01`\x05\t\x14`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_div1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x02\x7f\xfe\xdc\xba\x98vT2\x10\xfe\xdc\xba\x98vT2\x10\xfe\xdc\xba\x98vT2\x10\xfe\xdc\xba\x98vT2\x10\x04`\x00R` `\x00\xf3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x02\x7f\xfe\xdc\xba\x98vT2\x10\xfe\xdc\xba\x98vT2\x10\xfe\xdc\xba\x98'\
                                     'vT2\x10\xfe\xdc\xba\x98vT2\x10\x04`\x00R` `\x00\xf3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_smod_i256min2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x01`\x00\x03\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00\x03\x07\x03`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x01`\x00\x03\x7f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00\x03\x07\x03`'\
                                     '\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sdiv_i256min(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x00\x03\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03\x05`\x00U',
                             'storage': {
                              0: 57896044618658097711785492504343953926634992332820282019728792003956564819967L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x00\x03\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf2_4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x04`\x02\n`\x00U`\x03`\x02\n`\x01U`\x05`\x02\n`\x02U',
                             'storage': {
                              0: 16,
                              1: 8,
                              2: 32
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x04`\x02\n`\x00U`\x03`\x02\n`\x01U`\x05`\x02\n`\x02'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sub0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x17\x03`\x00U',
                             'storage': {
                              0: 22
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x17\x03`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mul6(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sub1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x02\x03`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x02\x03`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mul7(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'p\x01#Eg\x89\n\xbc\xde\xf0\xfe\xdc\xba\t\x87eC!p\x01#Eg\x89\n\xbc\xde\xf0\xfe\xdc\xba\t\x87eC!p\x01#Eg\x89\n\xbc\xde\xf0\xfe\xdc\xba\t\x87eC!\x02\x02`\x00R` `\x00\xf3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='p\x01#Eg\x89\n\xbc\xde\xf0\xfe\xdc\xba\t\x87eC!p\x01#Eg'\
                                     '\x89\n\xbc\xde\xf0\xfe\xdc\xba\t\x87eC!p\x01#Eg\x89\n\xbc\xde\xf0'\
                                     '\xfe\xdc\xba\t\x87eC!\x02\x02`\x00R` `\x00\xf3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf2_256(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'a\x01\x00`\x02\n`\x00U`\xff`\x02\n`\x01Ua\x01\x01`\x02\n`\x02U',
                             'storage': {
                              1: 57896044618658097711785492504343953926634992332820282019728792003956564819968L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='a\x01\x00`\x02\n`\x00U`\xff`\x02\n`\x01Ua\x01\x01`\x02\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmod1_overflow(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x05`\x02`\x01`\x00\x03\t`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x05`\x02`\x01`\x00\x03\t`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmod2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x01`\x06`\x00\x03\x08`\x00U',
                             'storage': {
                              0: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x01`\x06`\x00\x03\x08`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01a\x01\x00\na\x01\x00\n`\x00U`\x01`\xff\na\x01\x00\n`\x01U`\x01a\x01\x01\na\x01\x00\n`\x02U`\x01a\x01\x00\n`\xff\n`\x03U`\x01`\xff\n`\xff\n`\x04U`\x01a\x01\x01\n`\xff\n`'\
                             '\x05U`\x01a\x01\x00\na\x01\x01\n`\x06U`\x01`\xff\na\x01\x01\n`\x07U`\x01a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 3059605063183016712277721510764259762596496903723495948835695681317069848577L,
                              4: 64946385749017250832482072853933863069726291388589506484671647877697625915135L,
                              5: 85446755687772089089393075192758792342486802455648082716356894688374033547519L,
                              6: 1226038936089917454166061297023693466909118688613925930124971309282338340865L,
                              7: 90115345861475988335285459389239709198914031330026174061562808454832327884545L,
                              8: 83507828100476394873535783317713405289103533642497835963202458469734694322433L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01a\x01\x00\na\x01\x00\n`\x00U`\x01`\xff\na\x01\x00\n`'\
                                     '\x01U`\x01a\x01\x01\na\x01\x00\n`\x02U`\x01a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x01`\xff\n`\xff\n`\x04U`\x01a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x01a\x01\x00\na\x01\x01\n`\x06U`\x01`\xff\na'\
                                     '\x01\x01\n`\x07U`\x01a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00a\x01\x00\na\x01\x00\n`\x00U`\x00`\xff\na\x01\x00\n`\x01U`\x00a\x01\x01\na\x01\x00\n`\x02U`\x00a\x01\x00\n`\xff\n`\x03U`\x00`\xff\n`\xff\n`\x04U`\x00a\x01\x01\n`\xff\n`'\
                             '\x05U`\x00a\x01\x00\na\x01\x01\n`\x06U`\x00`\xff\na\x01\x01\n`\x07U`\x00a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              0: 256,
                              1: 256,
                              2: 256,
                              3: 255,
                              4: 255,
                              5: 255,
                              6: 257,
                              7: 257,
                              8: 257
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00a\x01\x00\na\x01\x00\n`\x00U`\x00`\xff\na\x01\x00\n`'\
                                     '\x01U`\x00a\x01\x01\na\x01\x00\n`\x02U`\x00a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x00`\xff\n`\xff\n`\x04U`\x00a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x00a\x01\x00\na\x01\x01\n`\x06U`\x00`\xff\na'\
                                     '\x01\x01\n`\x07U`\x00a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03a\x01\x00\na\x01\x00\n`\x00U`\x03`\xff\na\x01\x00\n`\x01U`\x03a\x01\x01\na\x01\x00\n`\x02U`\x03a\x01\x00\n`\xff\n`\x03U`\x03`\xff\n`\xff\n`\x04U`\x03a\x01\x01\n`\xff\n`'\
                             '\x05U`\x03a\x01\x00\na\x01\x01\n`\x06U`\x03`\xff\na\x01\x01\n`\x07U`\x03a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 7509106097093730011630093237202784650072841651671912529772991585339238776833L,
                              4: 38290356903089152037544434592592465510243346109437057546044682301961169665791L,
                              5: 42129814684646543126348356257504972372034277499141030862086683680913974558975L,
                              6: 18796044789528149052406582351866041199292954077820157477205660679666629869569L,
                              7: 30399330551861971515974303894253779338600539720187268158424855738354206244609L,
                              8: 108980024387197914276205543464773254377859711155926716677281663773064325955841L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03a\x01\x00\na\x01\x00\n`\x00U`\x03`\xff\na\x01\x00\n`'\
                                     '\x01U`\x03a\x01\x01\na\x01\x00\n`\x02U`\x03a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x03`\xff\n`\xff\n`\x04U`\x03a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x03a\x01\x00\na\x01\x01\n`\x06U`\x03`\xff\na'\
                                     '\x01\x01\n`\x07U`\x03a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x02a\x01\x00\na\x01\x00\n`\x00U`\x02`\xff\na\x01\x00\n`\x01U`\x02a\x01\x01\na\x01\x00\n`\x02U`\x02a\x01\x00\n`\xff\n`\x03U`\x02`\xff\n`\xff\n`\x04U`\x02a\x01\x01\n`\xff\n`'\
                             '\x05U`\x02a\x01\x00\na\x01\x01\n`\x06U`\x02`\xff\na\x01\x01\n`\x07U`\x02a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 35684671406788450058690691174653691892701243064536139020904391158652521676801L,
                              4: 59232513320897970918910043598136467678606867980584390145697722881629753311487L,
                              5: 58705239428236352267206187056125671899556905316536924076733713273217202913535L,
                              6: 46324544842152038903000162237961413134741269428713822661041693336878771601409L,
                              7: 106379458411604270640200723872979572934101195248236840362867346110552152604929L,
                              8: 51932325499082483871443854601774097918978859083286306620359033691760211656961L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x02a\x01\x00\na\x01\x00\n`\x00U`\x02`\xff\na\x01\x00\n`'\
                                     '\x01U`\x02a\x01\x01\na\x01\x00\n`\x02U`\x02a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x02`\xff\n`\xff\n`\x04U`\x02a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x02a\x01\x00\na\x01\x01\n`\x06U`\x02`\xff\na'\
                                     '\x01\x01\n`\x07U`\x02a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_5(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x05a\x01\x00\na\x01\x00\n`\x00U`\x05`\xff\na\x01\x00\n`\x01U`\x05a\x01\x01\na\x01\x00\n`\x02U`\x05a\x01\x00\n`\xff\n`\x03U`\x05`\xff\n`\xff\n`\x04U`\x05a\x01\x01\n`\xff\n`'\
                             '\x05U`\x05a\x01\x00\na\x01\x01\n`\x06U`\x05`\xff\na\x01\x01\n`\x07U`\x05a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 82097736621887453144738928706488282125439196973497094669655819961703340179457L,
                              4: 53133720224321890553799294263499314496700729388928679458153706176025830096639L,
                              5: 114096355291310632328912361731577724574561909388773748730554036700263630569727L,
                              6: 93526145388008191859340524611820427621352466814415752457515217250352065675265L,
                              7: 50961515925585147602326301824865680942396506779474973511120656365903759671041L,
                              8: 82381723258049923464777114727664785506799309587382046227484519819802942177537L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x05a\x01\x00\na\x01\x00\n`\x00U`\x05`\xff\na\x01\x00\n`'\
                                     '\x01U`\x05a\x01\x01\na\x01\x00\n`\x02U`\x05a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x05`\xff\n`\xff\n`\x04U`\x05a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x05a\x01\x00\na\x01\x01\n`\x06U`\x05`\xff\na'\
                                     '\x01\x01\n`\x07U`\x05a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x04a\x01\x00\na\x01\x00\n`\x00U`\x04`\xff\na\x01\x00\n`\x01U`\x04a\x01\x01\na\x01\x00\n`\x02U`\x04a\x01\x00\n`\xff\n`\x03U`\x04`\xff\n`\xff\n`\x04U`\x04a\x01\x01\n`\xff\n`'\
                             '\x05U`\x04a\x01\x00\na\x01\x01\n`\x06U`\x04`\xff\na\x01\x01\n`\x07U`\x04a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 104180459307073179463913335729947524956342847659456996136147549665912581783553L,
                              4: 45751977055995076893837051142492326735442329149693349358278717162318234124543L,
                              5: 105546705083962239776280838125382873088043929909358687231796858176367034106111L,
                              6: 104614202261512011900638534567018544938205717373709248053501147660488462565377L,
                              7: 20805755454287356068906442693618939408693780123187819689785872758108948529409L,
                              8: 101965897610888126403407041783167308378486948961680044692678870984371172802817L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x04a\x01\x00\na\x01\x00\n`\x00U`\x04`\xff\na\x01\x00\n`'\
                                     '\x01U`\x04a\x01\x01\na\x01\x00\n`\x02U`\x04a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x04`\xff\n`\xff\n`\x04U`\x04a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x04a\x01\x00\na\x01\x01\n`\x06U`\x04`\xff\na'\
                                     '\x01\x01\n`\x07U`\x04a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_7(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x07a\x01\x00\na\x01\x00\n`\x00U`\x07`\xff\na\x01\x00\n`\x01U`\x07a\x01\x01\na\x01\x00\n`\x02U`\x07a\x01\x00\n`\xff\n`\x03U`\x07`\xff\n`\xff\n`\x04U`\x07a\x01\x01\n`\xff\n`'\
                             '\x05U`\x07a\x01\x00\na\x01\x01\n`\x06U`\x07`\xff\na\x01\x01\n`\x07U`\x07a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 63182715569273074787714100940498879016211333097847191821758787388556590448641L,
                              4: 76425605249543128808067971548918170160729791707747064947261918738976669564671L,
                              5: 43345747554253238299465711077671703817838237369468988784434413112512838303999L,
                              6: 90636177557414518135233707311441832681323290295963628475535580382064678010881L,
                              7: 18310447951348423009296867942901618951251473555818375822006835637692098150145L,
                              8: 4330632354923598824005817957634950183537333187179286018273483015945990897921L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x07a\x01\x00\na\x01\x00\n`\x00U`\x07`\xff\na\x01\x00\n`'\
                                     '\x01U`\x07a\x01\x01\na\x01\x00\n`\x02U`\x07a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x07`\xff\n`\xff\n`\x04U`\x07a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x07a\x01\x00\na\x01\x01\n`\x06U`\x07`\xff\na'\
                                     '\x01\x01\n`\x07U`\x07a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_6(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x06a\x01\x00\na\x01\x00\n`\x00U`\x06`\xff\na\x01\x00\n`\x01U`\x06a\x01\x01\na\x01\x00\n`\x02U`\x06a\x01\x00\n`\xff\n`\x03U`\x06`\xff\n`\xff\n`\x04U`\x06a\x01\x01\n`\xff\n`'\
                             '\x05U`\x06a\x01\x00\na\x01\x01\n`\x06U`\x06`\xff\na\x01\x01\n`\x07U`\x06a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 11435072968476041248577174136455222083821632859290360317387830027612682452993L,
                              4: 29838683424993676685700745244695845239470248567130516709948292817813784625407L,
                              5: 107606274993353017652986210904939816968102791635211673659007043946902783918335L,
                              6: 3725531100599457640655441464738752256474927916455295396851587668754273665025L,
                              7: 39450714102859599482682422335408269864750442602220136464558252613040321724673L,
                              8: 58367409542318765371006823048891477968631145636400631624472570914463275155713L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x06a\x01\x00\na\x01\x00\n`\x00U`\x06`\xff\na\x01\x00\n`'\
                                     '\x01U`\x06a\x01\x01\na\x01\x00\n`\x02U`\x06a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x06`\xff\n`\xff\n`\x04U`\x06a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x06a\x01\x00\na\x01\x01\n`\x06U`\x06`\xff\na'\
                                     '\x01\x01\n`\x07U`\x06a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_9(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\ta\x01\x00\na\x01\x00\n`\x00U`\t`\xff\na\x01\x00\n`\x01U`\ta\x01\x01\na\x01\x00\n`\x02U`\ta\x01\x00\n`\xff\n`\x03U`\t`\xff\n`\xff\n`\x04U`\ta\x01\x01\n`\xff\n`'\
                             '\x05U`\ta\x01\x00\na\x01\x01\n`\x06U`\t`\xff\na\x01\x01\n`\x07U`\ta\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 37544599844834186309489558325272750245245031648093458553266128448984962826241L,
                              4: 32902293083653969256382290890943213921228732500552563030700054273598132059903L,
                              5: 20900127223701187507569604367284576078235625433031513598122327338511564865791L,
                              6: 556072892769477086587558712025699215307595196328648543389280473869891665921L,
                              7: 110152184046086891254004814608804722935320045522148244199157782070981523275521L,
                              8: 37242642928182852816882152052488410953256925480179486681539560659802290454785L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\ta\x01\x00\na\x01\x00\n`\x00U`\t`\xff\na\x01\x00\n`'\
                                     '\x01U`\ta\x01\x01\na\x01\x00\n`\x02U`\ta\x01\x00\n`\xff'\
                                     '\n`\x03U`\t`\xff\n`\xff\n`\x04U`\ta\x01\x01\n`\xff'\
                                     '\n`\x05U`\ta\x01\x00\na\x01\x01\n`\x06U`\t`\xff\na'\
                                     '\x01\x01\n`\x07U`\ta\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256Of256_8(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 100000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x08a\x01\x00\na\x01\x00\n`\x00U`\x08`\xff\na\x01\x00\n`\x01U`\x08a\x01\x01\na\x01\x00\n`\x02U`\x08a\x01\x00\n`\xff\n`\x03U`\x08`\xff\n`\xff\n`\x04U`\x08a\x01\x01\n`\xff\n`'\
                             '\x05U`\x08a\x01\x00\na\x01\x01\n`\x06U`\x08`\xff\na\x01\x01\n`\x07U`\x08a\x01\x01\na\x01\x01\n`\x08U',
                             'storage': {
                              3: 15831402651885036213026743568650891923074156065744116877715268619479738744833L,
                              4: 88667181452515305589329844365560673397586036248898611545578811096689003725055L,
                              5: 46877267689434137414103012444013696658268871052188839792194213401121476051199L,
                              6: 50966202311329169373084543122261872221808286010888550654989201724462468169729L,
                              7: 5365749204224685697188957744828197388231200721486680577879035665929073066241L,
                              8: 44602545931516731105551475539355266057143712143472076070568941934099028246785L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x08a\x01\x00\na\x01\x00\n`\x00U`\x08`\xff\na\x01\x00\n`'\
                                     '\x01U`\x08a\x01\x01\na\x01\x00\n`\x02U`\x08a\x01\x00\n`\xff'\
                                     '\n`\x03U`\x08`\xff\n`\xff\n`\x04U`\x08a\x01\x01\n`\xff'\
                                     '\n`\x05U`\x08a\x01\x00\na\x01\x01\n`\x06U`\x08`\xff\na'\
                                     '\x01\x01\n`\x07U`\x08a\x01\x01\na\x01\x01\n`\x08U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_signextend_BitIsSetInHigherByte(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'b\x12\xfa\xf4`\x01\x0b`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129638644L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='b\x12\xfa\xf4`\x01\x0b`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_addmod3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x03`\x00\x03`\x01`\x04\x08`\x00U',
                             'storage': {
                              0: 5
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x03`\x00\x03`\x01`\x04\x08`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf2_2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x02`\x02\n`\x00U`\x01`\x02\n`\x01U`\x03`\x02\n`\x02U',
                             'storage': {
                              0: 4,
                              1: 2,
                              2: 8
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x02`\x02\n`\x00U`\x01`\x02\n`\x01U`\x03`\x02\n`\x02'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_not1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'b\x01\xe2@`\x00R`\x00Q\x19`\x00R` `\x00\xf3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='b\x01\xe2@`\x00R`\x00Q\x19`\x00R` `\x00\xf3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_30(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x1ea\x01\x00\n`\x00U`\x1e`\xff\n`\x01U`\x1ea\x01\x01\n`\x02U',
                             'storage': {
                              0: 1766847064778384329583297500742918515827483896875618958121606201292619776L,
                              1: 1571105731713312715511913444948824285516982702388429082930088043212890625L,
                              2: 1986066106425567145468762597517802839695718885598475553669534044740853249L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x1ea\x01\x00\n`\x00U`\x1e`\xff\n`\x01U`\x1ea\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_31(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x1fa\x01\x00\n`\x00U`\x1f`\xff\n`\x01U`\x1fa\x01\x01\n`\x02U',
                             'storage': {
                              0: 452312848583266388373324160190187140051835877600158453279131187530910662656L,
                              1: 400631961586894742455537928461950192806830589109049416147172451019287109375L,
                              2: 510418989351370756385471987562075329801799753598808217293070249498399284993L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x1fa\x01\x00\n`\x00U`\x1f`\xff\n`\x01U`\x1fa\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_32(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '` a\x01\x00\n`\x00U` `\xff\n`\x01U` a\x01\x01\n`\x02U',
                             'storage': {
                              1: 102161150204658159326162171757797299165741800222807601117528975009918212890625L,
                              2: 15385591025986088967495315794765451905792552009253147804861470113175486603265L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='` a\x01\x00\n`\x00U` `\xff\n`\x01U` a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_expPowerOf256_33(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`!a\x01\x00\n`\x00U`!`\xff\n`\x01U`!a\x01\x01\n`\x02U',
                             'storage': {
                              1: 113665313029002853291453156292219928131682491712451940131389809756603247763711L,
                              2: 17165859609674220244882668959332272777506387746279808507839962817053649281281L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`!a\x01\x00\n`\x00U`!`\xff\n`\x01U`!a\x01\x01\n'\
                                     '`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mulmoddivByZero(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x01`\x05\t`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x01`\x05\t`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069521887415590932569929099639409724315265L
        price = 100000000000000
        data = ''
        caller = 1170859069521887415590932569929099639409724315265L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_origin(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '2`\x00U',
                             'storage': {
                              0: 1170859069862169782511871033392474246841492526721L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='2`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_extcodecopy0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            1170859069862169782511871033392474246841492526721L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x05`\x00U',
                             'storage': {
                             }
                            },
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '3;`\x00`\x003<`\x00Q`\x00U',
                             'storage': {
                              0: 43431530275918301891437990471647490985110803722667001075743172092915804536832L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=1170859069862169782511871033392474246841492526721L, 
                                balance=100000000000000000000000L, 
                                code='`\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 123456789
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
               
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='3;`\x00`\x003<`\x00Q`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 123456789
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldataloadSizeTooHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfa5`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfa5`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\xab\xcd\xef\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatacopy0_return(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x02`\x01`\x007`\x00Q`\x00UY`\x00\xf3',
                             'storage': {
                              0: 15952862147884032111807593134207811279406352104889963572879982391471063957504L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x02`\x01`\x007`\x00Q`\x00UY`\x00\xf3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_codecopy0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x05`\x00`\x009`\x00Q`\x00U',
                             'storage': {
                              0: 43431530277076737099792119525324589289631178478174847125149212316713225289728L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x05`\x00`\x009`\x00Q`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_ExtCodeSizeAddressInputTooBigRightMyAddress(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            497715225512843296443684768496695516028756477610L: {
                             'nonce': 0,
                             'balance': 0,
                             'code': '',
                             'storage': {
                             }
                            },
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 't\x0fW.R\x95\xc5\x7f\x15\x88o\x9b&>/m-l{^\xc6\xaa;`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='t\x0fW.R\x95\xc5\x7f\x15\x88o\x9b&>/m-l{^\xc6\xaa;'\
                                     '`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_balanceAddressInputTooBigRightMyAddress(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            497715225512843296443684768496695516028756477610L: {
                             'nonce': 0,
                             'balance': 0,
                             'code': '',
                             'storage': {
                             }
                            },
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 't\x0fW.R\x95\xc5\x7f\x15\x88o\x9b&>/m-l{^\xc6\xaa1`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='t\x0fW.R\x95\xc5\x7f\x15\x88o\x9b&>/m-l{^\xc6\xaa1'\
                                     '`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_codecopy_DataIndexTooHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x08\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfa`\x009`\x00Q`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x08\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfa`\x009`\x00Q`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatacopy1_return(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x01`\x01`\x007`\x00Q`\x00UY`\x00\xf3',
                             'storage': {
                              0: 15830949700414323593066345606656549901814255716005545864769591563581873192960L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x01`\x01`\x007`\x00Q`\x00UY`\x00\xf3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_extcodecopy_DataIndexTooHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x08\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfa`\x000<`\x00Q`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x08\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfa`\x000<`\x00Q`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatacopy_DataIndexTooHigh2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\t\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfa`\x007`\x00Q`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\t\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfa`\x007`\x00Q`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_codecopyZeroMemExpansion(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x00`\x00`\x009`\x00Q`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x00`\x00`\x009`\x00Q`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatacopyZeroMemExpansion_return(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x00`\x007`\x00Q`\x00UY`\x00\xf3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x00`\x007`\x00Q`\x00UY`\x00\xf3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatacopy2_return(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x01`\x007`\x00Q`\x00UY`\x00\xf3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x01`\x007`\x00Q`\x00UY`\x00\xf3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatacopy_DataIndexTooHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfa`\x007`\x00Q`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfa`\x007`\x00Q`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatacopy_DataIndexTooHigh2_return(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\t\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfa`\x007`\x00Q`\x00UY`\x00\xf3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\t\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfa`\x007`\x00Q`\x00UY`'\
                                     '\x00\xf3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldataload_BigOffset(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7fB\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x005`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7fB\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x005`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = 'B\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatacopyUnderFlow(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01`\x027', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatacopyZeroMemExpansion(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x00`\x00`\x007`\x00Q`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x00`\x00`\x007`\x00Q`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_balanceAddressInputTooBig(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            132086231880366091283593841635388161955915530666L: {
                             'nonce': 0,
                             'balance': 0,
                             'code': '',
                             'storage': {
                             }
                            },
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 't\xcd\x17"\xf3\x94}\xefL\xf1Dg\x9d\xa3\x9cL2\xbd\xc3V\x81\xaa1`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='t\xcd\x17"\xf3\x94}\xefL\xf1Dg\x9d\xa3\x9cL2\xbd\xc3V\x81\xaa1'\
                                     '`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatacopy0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x02`\x01`\x007`\x00Q`\x00U',
                             'storage': {
                              0: 15952862147884032111807593134207811279406352104889963572879982391471063957504L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x02`\x01`\x007`\x00Q`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_callvalue(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '4`\x00U',
                             'storage': {
                              0: 1000000000000000000
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='4`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatasize0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '6`\x00U',
                             'storage': {
                              0: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='6`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x02V'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_balanceAddressInputTooBigLeftMyAddress(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 't\xaa\x0fW.R\x95\xc5\x7f\x15\x88o\x9b&>/m-l{^\xc61`\x00U',
                             'storage': {
                              0: 100000000000000000000000L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='t\xaa\x0fW.R\x95\xc5\x7f\x15\x88o\x9b&>/m-l{^\xc61'\
                                     '`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatasize2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '6`\x00U',
                             'storage': {
                              0: 33
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='6`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '#\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00#'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatacopy1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x01`\x01`\x007`\x00Q`\x00U',
                             'storage': {
                              0: 15830949700414323593066345606656549901814255716005545864769591563581873192960L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01`\x01`\x007`\x00Q`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldataloadSizeTooHighPartial(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\n5`\x00U',
                             'storage': {
                              0: 11141460353568422474092118016L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\n5`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x124Vx\x9a\xbc\xde\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_gasprice(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': ':`\x00U',
                             'storage': {
                              0: 123456789
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code=':`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 123456789
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatasize1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '6`\x00U',
                             'storage': {
                              0: 33
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='6`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff#'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_ExtCodeSizeAddressInputTooBigLeftMyAddress(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 't\xaa\x0fW.R\x95\xc5\x7f\x15\x88o\x9b&>/m-l{^\xc6;`\x00U',
                             'storage': {
                              0: 26
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='t\xaa\x0fW.R\x95\xc5\x7f\x15\x88o\x9b&>/m-l{^\xc6;'\
                                     '`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_extcodesizeUnderFlow(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=1170859069862169782511871033392474246841492526721L, 
                                balance=100000000000000000000000L, 
                                code='83;\x14`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 123456789
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
               
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code=';', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 123456789
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_address0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '0`\x00U',
                             'storage': {
                              0: 87579061662017136990230301793909925042452127430L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='0`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_address1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            1170859069862169782511871033392474246841492526721L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '0`\x00U',
                             'storage': {
                              0: 1170859069862169782511871033392474246841492526721L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=1170859069862169782511871033392474246841492526721L, 
                                balance=100000000000000000000000L, 
                                code='0`\x00U', 
                                storage={
                                        }
                                )        
        address = 1170859069862169782511871033392474246841492526721L
        origin = 87579061662017136990230301793909925042452127430L
        price = 1000000000
        data = ''
        caller = 87579061662017136990230301793909925042452127430L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatacopy2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x00`\x01`\x007`\x00Q`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x00`\x01`\x007`\x00Q`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_balance0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            1170859069862169782511871033392474246841492526721L: {
                             'nonce': 0,
                             'balance': 0,
                             'code': '',
                             'storage': {
                             }
                            },
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 's\xcd\x17"\xf3\x94}\xefL\xf1Dg\x9d\xa3\x9cL2\xbd\xc3V\x811`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='s\xcd\x17"\xf3\x94}\xefL\xf1Dg\x9d\xa3\x9cL2\xbd\xc3V\x811`'\
                                     '\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_balance1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 's\x0fW.R\x95\xc5\x7f\x15\x88o\x9b&>/m-l{^\xc61`\x00U',
                             'storage': {
                              0: 100000000000000000000000L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='s\x0fW.R\x95\xc5\x7f\x15\x88o\x9b&>/m-l{^\xc61`'\
                                     '\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_extcodesize1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            1170859069862169782511871033392474246841492526721L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '3;`\x00U',
                             'storage': {
                              0: 4
                             }
                            },
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '8`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=1170859069862169782511871033392474246841492526721L, 
                                balance=100000000000000000000000L, 
                                code='3;`\x00U', 
                                storage={
                                        }
                                )        
        address = 1170859069862169782511871033392474246841492526721L
        origin = 87579061662017136990230301793909925042452127430L
        price = 123456789
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 87579061662017136990230301793909925042452127430L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
               
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='8`\x00U', 
                                storage={
                                        }
                                )        
        address = 1170859069862169782511871033392474246841492526721L
        origin = 87579061662017136990230301793909925042452127430L
        price = 123456789
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 87579061662017136990230301793909925042452127430L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatacopy_DataIndexTooHigh_return(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfa`\x007`\x00Q`\x00UY`\x00\xf3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfa`\x007`\x00Q`\x00UY`'\
                                     '\x00\xf3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldataload0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x005`\x00U',
                             'storage': {
                              0: 1056574544737473829090811905444265272464835370331620136956720508372986626048L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x005`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x02V'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_extcodecopy0AddressTooBigLeft(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            1170859069862169782511871033392474246841492526721L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x05`\x00U',
                             'storage': {
                             }
                            },
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '3;`\x00`\x00t\xaa\xcd\x17"\xf3\x94}\xefL\xf1Dg\x9d\xa3\x9cL2\xbd\xc3V\x81<`\x00Q`\x00U',
                             'storage': {
                              0: 43431530275918301891437990471647490985110803722667001075743172092915804536832L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=1170859069862169782511871033392474246841492526721L, 
                                balance=100000000000000000000000L, 
                                code='`\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 123456789
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
               
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='3;`\x00`\x00t\xaa\xcd\x17"\xf3\x94}\xefL\xf1Dg\x9d\xa3\x9cL'\
                                     '2\xbd\xc3V\x81<`\x00Q`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 123456789
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_extcodecopyZeroMemExpansion(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            1170859069862169782511871033392474246841492526721L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x05`\x00U',
                             'storage': {
                             }
                            },
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x00`\x00`\x003<`\x00Q`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=1170859069862169782511871033392474246841492526721L, 
                                balance=100000000000000000000000L, 
                                code='`\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 123456789
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
               
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x00`\x00`\x003<`\x00Q`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 123456789
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_extcodecopy0AddressTooBigRight(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            132086231880366091283593841635388161955915530666L: {
                             'nonce': 0,
                             'balance': 0,
                             'code': '',
                             'storage': {
                             }
                            },
                            1170859069862169782511871033392474246841492526721L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x05`\x00U',
                             'storage': {
                             }
                            },
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '3;`\x00`\x00t\xcd\x17"\xf3\x94}\xefL\xf1Dg\x9d\xa3\x9cL2\xbd\xc3V\x81\xaa<`\x00Q`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=1170859069862169782511871033392474246841492526721L, 
                                balance=100000000000000000000000L, 
                                code='`\x05`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 123456789
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
               
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='3;`\x00`\x00t\xcd\x17"\xf3\x94}\xefL\xf1Dg\x9d\xa3\x9cL2'\
                                     '\xbd\xc3V\x81\xaa<`\x00Q`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 123456789
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_env1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 231883281,
                   'gaslimit': 10000013,
                   'number': 5211,
                   'timestamp': 42
                  }
        pos_world = {
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=10000000000000033000L, 
                                code='X013246:`\x01C\x03@ABCDEX6`\x005'\
                                     '`&5`\x1358\x7f\x11\x11""33DDUUffww\x88'\
                                     '\x88\x99\x99\x00\x00\xaa\xaa\xbb\xbb\xcc\xcc\xdd\xdd\xee\xee\xff\xff`\x00R` `'\
                                     '\x00`\x00\xf0` `\x00` `\x00`\x000a\x0b\xb8\xf1`\x00Qa'\
                                     '\x10\x00RY` \x02`\x00 0\xff', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 2015
        data = '\xde\xad\xbe\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 10000000001111111        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_caller(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '3`\x00U',
                             'storage': {
                              0: 1170859069862169782511871033392474246841492526721L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='3`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_codesize(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '8`\x00U',
                             'storage': {
                              0: 4
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='8`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_balanceCaller3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            1170859069862169782511871033392474246841492526721L: {
                             'nonce': 0,
                             'balance': 0,
                             'code': '',
                             'storage': {
                             }
                            },
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '31s\xcd\x17"\xf3\x94}\xefL\xf1Dg\x9d\xa3\x9cL2\xbd\xc3V\x811\x14`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='31s\xcd\x17"\xf3\x94}\xefL\xf1Dg\x9d\xa3\x9cL2\xbd\xc3V\x81'\
                                     '1\x14`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_balance01(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            1170859069862169782511871033392474246841492526721L: {
                             'nonce': 0,
                             'balance': 1,
                             'code': '',
                             'storage': {
                             }
                            },
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 's\xcd\x17"\xf3\x94}\xefL\xf1Dg\x9d\xa3\x9cL2\xbd\xc3V\x811`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=1170859069862169782511871033392474246841492526721L, 
                                balance=1, 
                                code='', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
               
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='s\xcd\x17"\xf3\x94}\xefL\xf1Dg\x9d\xa3\x9cL2\xbd\xc3V\x811`'\
                                     '\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldatacopy_sec(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x05V[\x00[`B`\x1fSa\x01\x03`\x00`\x1f7`\x00Q\x80``\x14`\x03Wd\x0b\xad\xc0\xff\xee`\xffU',
                             'storage': {
                              255: 50159747054
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x05V[\x00[`B`\x1fSa\x01\x03`\x00`\x1f7`\x00Q\x80'\
                                     '``\x14`\x03Wd\x0b\xad\xc0\xff\xee`\xffU', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_extcodesize0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            1170859069862169782511871033392474246841492526721L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '83;\x14`\x00U',
                             'storage': {
                             }
                            },
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '83;\x14`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=1170859069862169782511871033392474246841492526721L, 
                                balance=100000000000000000000000L, 
                                code='83;\x14`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 123456789
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
               
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='83;\x14`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 123456789
        data = '\x01#Eg\x89\n\xbc\xde\xf0\x124Vx\x90\xab\xcd\xef'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldataload1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x015`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639715L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x015`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff#'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_balanceAddress2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '01s\x0fW.R\x95\xc5\x7f\x15\x88o\x9b&>/m-l{^\xc61\x14`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='01s\x0fW.R\x95\xc5\x7f\x15\x88o\x9b&>/m-l{^\xc6'\
                                     '1\x14`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_calldataload2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x055`\x00U',
                             'storage': {
                              0: 77709350273395004144148204286825383453691705083530946119533046182340802379776L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x055`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1000000000
        data = '\x01#Eg\x89\xab\xcd\xef\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_xor1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x01`\x02\x18`\x00U',
                             'storage': {
                              0: 3
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x01`\x02\x18`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_xor0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x02`\x02\x18`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x02`\x02\x18`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_xor3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x18`\x00U',
                             'storage': {
                              0: 115277457729594790117272911370839532189043261309930451181949783328023217713680L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab'\
                                     '\xcd\xef\x01#Eg\x89\xab\xcd\xef\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x18`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_xor2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x01`\x03\x18`\x00U',
                             'storage': {
                              0: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x01`\x03\x18`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_xor5(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xef\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\x18`\x00U',
                             'storage': {
                              0: 7719472615821079694904732333912527103105713045949124289339939431328213176593L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee'\
                                     '\xee\xee\xef\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\x18`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_xor4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\x18`\x00U',
                             'storage': {
                              0: 7719472615821079694904732333912527190217998977709370935963838933860875309329L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee'\
                                     '\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\x18`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_iszeo2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x02`\x00\x03\x15`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x02`\x00\x03\x15`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_iszero1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x00\x15`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x00\x15`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_or4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\x17`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee'\
                                     '\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\x17`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_or5(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xef\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\x17`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee'\
                                     '\xee\xee\xef\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\x17`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_or2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x01`\x03\x17`\x00U',
                             'storage': {
                              0: 3
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x01`\x03\x17`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_or3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x17`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab'\
                                     '\xcd\xef\x01#Eg\x89\xab\xcd\xef\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x17`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_or0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x02`\x02\x17`\x00U',
                             'storage': {
                              0: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x02`\x02\x17`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_iszero0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x15`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x15`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sgt4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x03`\x00\x03`\x05`\x00\x03\x13`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x03`\x00\x03`\x05`\x00\x03\x13`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sgt2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sgt3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x13`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x13`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sgt0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x00`\x02`\x00\x03\x13`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x00`\x02`\x00\x03\x13`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sgt1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x02`\x00\x03`\x00\x13`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x02`\x00\x03`\x00\x13`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_lt3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x10`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x10`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_lt2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 10000000000000000000L,
                             'code': '`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=10000000000000000000L, 
                                code='`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 10000000000000000000L        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_lt1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 10000000000000000000L,
                             'code': '`\x02`\x00\x03`\x00\x10`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=10000000000000000000L, 
                                code='`\x02`\x00\x03`\x00\x10`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 10000000000000000000L        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_lt0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x00`\x02`\x00\x03\x10`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x00`\x02`\x00\x03\x10`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 10000000000000000000L        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_byte9(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': 'g\x80@ \x10\x08\x04\x02\x01` `\x1f\x05\x1a`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='g\x80@ \x10\x08\x04\x02\x01` `\x1f\x05\x1a`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_byte8(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': 'g\x80@ \x10\x08\x04\x02\x01`\x1f`\x1f\x03\x1a`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='g\x80@ \x10\x08\x04\x02\x01`\x1f`\x1f\x03\x1a`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_byte7(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': 'g\x80@ \x10\x08\x04\x02\x01`\x07`\x1f\x03\x1a`\x00U',
                             'storage': {
                              0: 128
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='g\x80@ \x10\x08\x04\x02\x01`\x07`\x1f\x03\x1a`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_byte6(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': 'g\x80@ \x10\x08\x04\x02\x01`\x06`\x1f\x03\x1a`\x00U',
                             'storage': {
                              0: 64
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='g\x80@ \x10\x08\x04\x02\x01`\x06`\x1f\x03\x1a`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_byte5(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': 'g\x80@ \x10\x08\x04\x02\x01`\x05`\x1f\x03\x1a`\x00U',
                             'storage': {
                              0: 32
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='g\x80@ \x10\x08\x04\x02\x01`\x05`\x1f\x03\x1a`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_byte4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': 'g\x80@ \x10\x08\x04\x02\x01`\x04`\x1f\x03\x1a`\x00U',
                             'storage': {
                              0: 16
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='g\x80@ \x10\x08\x04\x02\x01`\x04`\x1f\x03\x1a`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_byte3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': 'g\x80@ \x10\x08\x04\x02\x01`\x03`\x1f\x03\x1a`\x00U',
                             'storage': {
                              0: 8
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='g\x80@ \x10\x08\x04\x02\x01`\x03`\x1f\x03\x1a`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_byte2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': 'g\x80@ \x10\x08\x04\x02\x01`\x02`\x1f\x03\x1a`\x00U',
                             'storage': {
                              0: 4
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='g\x80@ \x10\x08\x04\x02\x01`\x02`\x1f\x03\x1a`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_byte1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': 'g\x80@ \x10\x08\x04\x02\x01`\x01`\x1f\x03\x1a`\x00U',
                             'storage': {
                              0: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='g\x80@ \x10\x08\x04\x02\x01`\x01`\x1f\x03\x1a`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_byte0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': 'g\x80@ \x10\x08\x04\x02\x01`\x00`\x1f\x03\x1a`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='g\x80@ \x10\x08\x04\x02\x01`\x00`\x1f\x03\x1a`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_slt4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x03`\x00\x03`\x05`\x00\x03\x12`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x03`\x00\x03`\x05`\x00\x03\x12`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_slt1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x02`\x00\x03`\x00\x12`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x02`\x00\x03`\x00\x12`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_slt0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x00`\x02`\x00\x03\x12`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x00`\x02`\x00\x03\x12`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_slt3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x12`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x12`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_slt2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_or1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x01`\x02\x17`\x00U',
                             'storage': {
                              0: 3
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x01`\x02\x17`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_not5(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x00`\x00\x03\x19`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x00`\x00\x03\x19`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_not4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03\x19`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639934L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x03\x19`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_not1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x02\x19`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639933L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x02\x19`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_not0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x00\x19`\x00U',
                             'storage': {
                              0: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x00\x19`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_not3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x02`\x00\x03\x19`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x02`\x00\x03\x19`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_not2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x19`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x19`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_eq1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x00`\x00\x14`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x00`\x00\x14`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_eq0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x03`\x00\x03`\x05`\x00\x03\x14`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x03`\x00\x03`\x05`\x00\x03\x14`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_eq2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x14`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x14`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_gt0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x00`\x02`\x00\x03\x11`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x00`\x02`\x00\x03\x11`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_gt1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x02`\x00\x03`\x00\x11`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x02`\x00\x03`\x00\x11`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_gt2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x11`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x11`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_gt3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x11`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x11`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_byte11(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': 'g\x80@ \x10\x08\x04\x02\x01`\x00\x1a`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='g\x80@ \x10\x08\x04\x02\x01`\x00\x1a`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_byte10(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': 'g\x80@ \x10\x08\x04\x02\x01\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1a`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='g\x80@ \x10\x08\x04\x02\x01\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1a`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_and5(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xef\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\x16`\x00U',
                             'storage': {
                              0: 108072616621495115728666252674775380750164271619691439750117644576584916463342L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee'\
                                     '\xee\xee\xef\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\x16`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_and4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\x16`\x00U',
                             'storage': {
                              0: 108072616621495115728666252674775380663051985687931193103493745074052254330606L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee'\
                                     '\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\x16`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_and1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x01`\x02\x16`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x01`\x02\x16`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_and0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x02`\x02\x16`\x00U',
                             'storage': {
                              0: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x02`\x02\x16`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_and3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '\x7f\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16`\x00U',
                             'storage': {
                              0: 514631507721405306298073637848375664226723355710112857507800679889911926255L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='\x7f\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab'\
                                     '\xcd\xef\x01#Eg\x89\xab\xcd\xef\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16`\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_and2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000000000L,
                             'code': '`\x01`\x03\x16`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000000000L, 
                                code='`\x01`\x03\x16`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_callstatelessToNameRegistrator0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            846782024548323446991784721256445173708587954613L: {
                             'nonce': 0,
                             'balance': 23,
                             'code': '`\x005T\x15`\tW\x00[` 5`\x005U',
                             'storage': {
                             }
                            },
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R\x7f\xaa\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa` '\
                             'R`\x00`@`@`\x00`\x17s\x94S\x04\xeb\x96\x06[*\x98\xb5zH\xa0j\xe2\x8d(Zq\xb5b\x0fB@\xf1`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=846782024548323446991784721256445173708587954613L, 
                                balance=23, 
                                code='`\x005T\x15`\tW\x00[` 5`\x005U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 100000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
               
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R\x7f\xaa\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa'\
                                     '` R`\x00`@`@`\x00`\x17s\x94S\x04\xeb\x96\x06[*\x98'\
                                     '\xb5zH\xa0j\xe2\x8d(Zq\xb5b\x0fB@\xf1`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 100000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_createNameRegistratorValueTooHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100,
                             'code': '|`\x10\x80`\x0c`\x009`\x00\xf3\x00`\x005T\x15`\tW\x00[` 5`\x005U`\x00R`\x1d`\x03`\xe6\xf0`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100, 
                                code='|`\x10\x80`\x0c`\x009`\x00\xf3\x00`\x005T\x15`\tW\x00['\
                                     '` 5`\x005U`\x00R`\x1d`\x03`\xe6\xf0`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 100        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_CallToReturn1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            846782024548323446991784721256445173708587954613L: {
                             'nonce': 0,
                             'balance': 23,
                             'code': '`\x01`\x01W`7`\x00U`\x02`\x00\xf2',
                             'storage': {
                             }
                            },
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R\x7f\xaa\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa` '\
                             'R`\x02`\x00`@`\x00`\x17s\x94S\x04\xeb\x96\x06[*\x98\xb5zH\xa0j\xe2\x8d(Zq\xb5b\x0fB@\xf1`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=846782024548323446991784721256445173708587954613L, 
                                balance=23, 
                                code='`\x01`\x01W`7`\x00U`\x02`\x00\xf2', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 100000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
               
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R\x7f\xaa\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa'\
                                     '` R`\x02`\x00`@`\x00`\x17s\x94S\x04\xeb\x96\x06[*\x98'\
                                     '\xb5zH\xa0j\xe2\x8d(Zq\xb5b\x0fB@\xf1`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 100000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_CallToNameRegistrator0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            846782024548323446991784721256445173708587954613L: {
                             'nonce': 0,
                             'balance': 23,
                             'code': '`\x005T\x15`\tW\x00[` 5`\x005U',
                             'storage': {
                             }
                            },
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R\x7f\xaa\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa` '\
                             'R`\x00`@`@`\x00`\x17s\x94S\x04\xeb\x96\x06[*\x98\xb5zH\xa0j\xe2\x8d(Zq\xb5b\x0fB@\xf1`\x00U',
                             'storage': {
                              0: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=846782024548323446991784721256445173708587954613L, 
                                balance=23, 
                                code='`\x005T\x15`\tW\x00[` 5`\x005U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 100000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
               
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R\x7f\xaa\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa'\
                                     '` R`\x00`@`@`\x00`\x17s\x94S\x04\xeb\x96\x06[*\x98'\
                                     '\xb5zH\xa0j\xe2\x8d(Zq\xb5b\x0fB@\xf1`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 100000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_CallToNameRegistratorOutOfGas(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=846782024548323446991784721256445173708587954613L, 
                                balance=23, 
                                code='`\x005T\x15`\tW\x00[` 5`\x005U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 100000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
               
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xee\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00`\x00R\x7f\xaa\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa'\
                                     '` R`\x00`@`@`\x00`\x17s\x94S\x04\xeb\x96\x06[*\x98'\
                                     '\xb5zH\xa0j\xe2\x8d(Zq\xb5`d\xf1`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 100000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_CallToNameRegistratorNotMuchMemory0(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=846782024548323446991784721256445173708587954613L, 
                                balance=23, 
                                code='`\x005T\x15`\tW\x00[` 5`\x005U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 100000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
               
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xee\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00`\x00R\x7f\xaa\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa'\
                                     '` R`\x00b\x0f\x12\x06`@`\x00`\x17s\x94S\x04\xeb\x96\x06['\
                                     '*\x98\xb5zH\xa0j\xe2\x8d(Zq\xb5a\x01\xf4\xf1`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 100000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_CallToNameRegistratorNotMuchMemory1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 10000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=846782024548323446991784721256445173708587954613L, 
                                balance=23, 
                                code='`\x005T\x15`\tW\x00[` 5`\x005U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 100000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
               
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xee\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00`\x00R\x7f\xaa\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa'\
                                     '` R`\x00`@`\x00b\x0f\x12\x06`\x17s\x94S\x04\xeb\x96\x06['\
                                     '*\x98\xb5zH\xa0j\xe2\x8d(Zq\xb5a\x01\xf4\xf1`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 100000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_loop_mulmod_2M(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 20000,
                   'gaslimit': 100000000000,
                   'number': 9999,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '```@Rc\xff\xff\xff\xff`\xe0`\x02\n`\x005\x04\x16c\x15\xd4#\'\x81\x14`"W[`\x00V[4`\x00W`8`\x045`$5`D5`d5`JV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` '\
                             '\x01\x90\xf3[`\x00\x84\x81[\x83\x81\x10\x15`dW\x84\x86\x83\t\x91P[`\x01\x01`OV[\x81\x92P[PP\x94\x93PPPPV\x00\xa1ebzzr0X \x0b/R\xfb\xc82{\xacG\xda\x17b3\x8fp\xad\x171'\
                             '\r\xe9V\xa5\x8b\xbb\xca\x8e\xe5\x83x\xf3W\x90\x00)',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='```@Rc\xff\xff\xff\xff`\xe0`\x02\n`\x005\x04\x16c\x15\xd4'\
                                     '#\'\x81\x14`"W[`\x00V[4`\x00W`8`\x045`$'\
                                     '5`D5`d5`JV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03'\
                                     '` \x01\x90\xf3[`\x00\x84\x81[\x83\x81\x10\x15`dW\x84\x86\x83\t\x91'\
                                     'P[`\x01\x01`OV[\x81\x92P[PP\x94\x93PPPPV\x00'\
                                     '\xa1ebzzr0X \x0b/R\xfb\xc82{\xacG\xda\x17b3\x8f'\
                                     'p\xad\x171\r\xe9V\xa5\x8b\xbb\xca\x8e\xe5\x83x\xf3W\x90\x00)', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = "\x15\xd4#'\x8e\xda\xd8\xb5[\x15\x86\x80^\xa8\xc2E\xd8\xc1k\x06\xa5\x10+y\x1f\xc6\xeb`i71\xc0g{\xf5\x01\x1ch\xdb\x1c\x17\x9c\xd3Z\xb3\xfc`\xc67\x04\xaa\x7f\xcb\xea@\xf1\x97\x82\xb1a\x1a\xab\xa8g&\xa7hl\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"\
'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x84\x80'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 0        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_loop_exp_8b_100k(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 20000,
                   'gaslimit': 100000000000,
                   'number': 9999,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '```@R`\xe0`\x02\n`\x005\x04c3\x92\xff\xc8\x81\x14a\x00?W\x80c<w\xb9\\\x14a\x00jW\x80c\xceg\xbd\xa6\x14a\x00\xc2W\x80c\xeb\xbb\xe0\x0b\x14a\x00\xe8W[a\x00\x02V[4a\x00\x02Wa\x01'\
                             '\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90\x85\x90\n\x90`\x01\x01a\x00UV[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90\x85\x90\n\x85'\
                             '\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x90`\x10\x01a\x00\x80V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`'\
                             '\x00\x80[\x82\x81\x10\x15a\x01)W[`\x01\x01a\x00\xd7V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x80[\x82\x81\x10\x15a\x01)W[`\x10\x01a\x00\xfdV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03`'\
                             ' \x01\x90\xf3[P\x94\x93PPPPV[P\x91\x93\x92PPPV',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='```@R`\xe0`\x02\n`\x005\x04c3\x92\xff\xc8\x81\x14a\x00'\
                                     '?W\x80c<w\xb9\\\x14a\x00jW\x80c\xceg\xbd\xa6\x14a\x00\xc2'\
                                     'W\x80c\xeb\xbb\xe0\x0b\x14a\x00\xe8W[a\x00\x02V[4a\x00\x02W'\
                                     'a\x01\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01'\
                                     ' W\x90\x85\x90\n\x90`\x01\x01a\x00UV[4a\x00\x02Wa\x01\x0e'\
                                     '`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90'\
                                     '\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90'\
                                     '\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85'\
                                     '\x90\n\x90`\x10\x01a\x00\x80V[4a\x00\x02Wa\x01\x0e`\x045`'\
                                     '$5`D5`\x00\x80[\x82\x81\x10\x15a\x01)W[`\x01\x01a\x00'\
                                     '\xd7V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x80'\
                                     '[\x82\x81\x10\x15a\x01)W[`\x10\x01a\x00\xfdV[`@\x80Q\x91'\
                                     '\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[P\x94\x93PPPPV[P'\
                                     '\x91\x93\x92PPPV', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = '3\x92\xff\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00XQ\xf4-L\x95\x7f-\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x86\xa0'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 0        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_loop_exp_1b_1M(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 20000,
                   'gaslimit': 100000000000,
                   'number': 9999,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '```@R`\xe0`\x02\n`\x005\x04c3\x92\xff\xc8\x81\x14a\x00?W\x80c<w\xb9\\\x14a\x00jW\x80c\xceg\xbd\xa6\x14a\x00\xc2W\x80c\xeb\xbb\xe0\x0b\x14a\x00\xe8W[a\x00\x02V[4a\x00\x02Wa\x01'\
                             '\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90\x85\x90\n\x90`\x01\x01a\x00UV[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90\x85\x90\n\x85'\
                             '\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x90`\x10\x01a\x00\x80V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`'\
                             '\x00\x80[\x82\x81\x10\x15a\x01)W[`\x01\x01a\x00\xd7V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x80[\x82\x81\x10\x15a\x01)W[`\x10\x01a\x00\xfdV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03`'\
                             ' \x01\x90\xf3[P\x94\x93PPPPV[P\x91\x93\x92PPPV',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='```@R`\xe0`\x02\n`\x005\x04c3\x92\xff\xc8\x81\x14a\x00'\
                                     '?W\x80c<w\xb9\\\x14a\x00jW\x80c\xceg\xbd\xa6\x14a\x00\xc2'\
                                     'W\x80c\xeb\xbb\xe0\x0b\x14a\x00\xe8W[a\x00\x02V[4a\x00\x02W'\
                                     'a\x01\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01'\
                                     ' W\x90\x85\x90\n\x90`\x01\x01a\x00UV[4a\x00\x02Wa\x01\x0e'\
                                     '`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90'\
                                     '\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90'\
                                     '\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85'\
                                     '\x90\n\x90`\x10\x01a\x00\x80V[4a\x00\x02Wa\x01\x0e`\x045`'\
                                     '$5`D5`\x00\x80[\x82\x81\x10\x15a\x01)W[`\x01\x01a\x00'\
                                     '\xd7V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x80'\
                                     '[\x82\x81\x10\x15a\x01)W[`\x10\x01a\x00\xfdV[`@\x80Q\x91'\
                                     '\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[P\x94\x93PPPPV[P'\
                                     '\x91\x93\x92PPPV', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = '3\x92\xff\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00XQ\xf4-L\x95\x7f-\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0fB@'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 0        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_loop_add_10M(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 20000,
                   'gaslimit': 100000000000,
                   'number': 9999,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': "```@Rc\xff\xff\xff\xff`\xe0`\x02\n`\x005\x04\x16c\x15\xd4#'\x81\x14a\x00BW\x80cY\xe3\xe1\xea\x14a\x00pW\x80c\xc4\xf8\xb9\xfb\x14a\x00\x9eW\x80c\xe0\x130\xbb\x14a\x00\xc9W[\xfe[4\x15a\x00"\
                             'JW\xfe[a\x00^`\x045`$5`D5`d5a\x00\xf4V[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[4\x15a\x00xW\xfe[a\x00^`\x045`$5`D5`d5a\x01\x1eV[`'\
                             '@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[4\x15a\x00\xa6W\xfe[a\x00^`\x045`$5`D5a\x01RV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[4\x15a\x00\xd1W\xfe[a\x00^'\
                             '`\x045`$5`D5a\x01yV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[`\x00\x84\x81[\x83\x81\x10\x15a\x01\x10W\x84\x86\x83\t\x91P[`\x01\x01a\x00\xf9V[\x81\x92P[PP\x94\x93PPP'\
                             'PV[`\x00\x84\x81[\x83\x81\x10\x15a\x01\x10W\x85\x82\x81\x15\x15a\x016W\xfe[\x04\x85\x01\x91P[`\x01\x01a\x01#V[\x81\x92P[PP\x94\x93PPPPV[`\x00\x83\x81[\x83\x81\x10\x15a\x01lW\x90\x84\x01'\
                             '\x90[`\x01\x01a\x01WV[\x81\x92P[PP\x93\x92PPPV[`\x00\x83\x81[\x83\x81\x10\x15a\x01lW\x90\x84\x02\x90[`\x01\x01a\x01~V[\x81\x92P[PP\x93\x92PPPV\x00\xa1ebzzr0X '\
                             '\x06P\x81\xbd\x1e\x9f\xdf\xfc\xcd%\x132R2A\xea\xab\xd0\xfb\x18\x81\xa0e)Y\x9a\x9cg\xd0\xa5h\xe5\x00)',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='```@Rc\xff\xff\xff\xff`\xe0`\x02\n`\x005\x04\x16c\x15\xd4'\
                                     "#'\x81\x14a\x00BW\x80cY\xe3\xe1\xea\x14a\x00pW\x80c\xc4\xf8"\
                                     '\xb9\xfb\x14a\x00\x9eW\x80c\xe0\x130\xbb\x14a\x00\xc9W[\xfe[4\x15'\
                                     'a\x00JW\xfe[a\x00^`\x045`$5`D5`d5a\x00'\
                                     '\xf4V[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[4\x15'\
                                     'a\x00xW\xfe[a\x00^`\x045`$5`D5`d5a\x01'\
                                     '\x1eV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[4\x15'\
                                     'a\x00\xa6W\xfe[a\x00^`\x045`$5`D5a\x01RV['\
                                     '`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[4\x15a\x00\xd1'\
                                     'W\xfe[a\x00^`\x045`$5`D5a\x01yV[`@\x80'\
                                     'Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[`\x00\x84\x81[\x83\x81\x10'\
                                     '\x15a\x01\x10W\x84\x86\x83\t\x91P[`\x01\x01a\x00\xf9V[\x81\x92P'\
                                     '[PP\x94\x93PPPPV[`\x00\x84\x81[\x83\x81\x10\x15a\x01\x10'\
                                     'W\x85\x82\x81\x15\x15a\x016W\xfe[\x04\x85\x01\x91P[`\x01\x01a\x01'\
                                     '#V[\x81\x92P[PP\x94\x93PPPPV[`\x00\x83\x81[\x83'\
                                     '\x81\x10\x15a\x01lW\x90\x84\x01\x90[`\x01\x01a\x01WV[\x81\x92P'\
                                     '[PP\x93\x92PPPV[`\x00\x83\x81[\x83\x81\x10\x15a\x01lW'\
                                     '\x90\x84\x02\x90[`\x01\x01a\x01~V[\x81\x92P[PP\x93\x92PP'\
                                     'PV\x00\xa1ebzzr0X \x06P\x81\xbd\x1e\x9f\xdf\xfc\xcd%\x13'\
                                     '2R2A\xea\xab\xd0\xfb\x18\x81\xa0e)Y\x9a\x9cg\xd0\xa5h\xe5\x00)', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = '\xc4\xf8\xb9\xfb\x8e\xda\xd8\xb5[\x15\x86\x80^\xa8\xc2E\xd8\xc1k\x06\xa5\x10+y\x1f\xc6\xeb`i71\xc0g{\xf5\x01\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa\xff\xff\xff\xff\xff\xff\xff\xff\xbb\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x98\x96\x80'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 0        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_loop_exp_nop_1M(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 20000,
                   'gaslimit': 100000000000,
                   'number': 9999,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '```@R`\xe0`\x02\n`\x005\x04c3\x92\xff\xc8\x81\x14a\x00?W\x80c<w\xb9\\\x14a\x00jW\x80c\xceg\xbd\xa6\x14a\x00\xc2W\x80c\xeb\xbb\xe0\x0b\x14a\x00\xe8W[a\x00\x02V[4a\x00\x02Wa\x01'\
                             '\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90\x85\x90\n\x90`\x01\x01a\x00UV[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90\x85\x90\n\x85'\
                             '\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x90`\x10\x01a\x00\x80V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`'\
                             '\x00\x80[\x82\x81\x10\x15a\x01)W[`\x01\x01a\x00\xd7V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x80[\x82\x81\x10\x15a\x01)W[`\x10\x01a\x00\xfdV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03`'\
                             ' \x01\x90\xf3[P\x94\x93PPPPV[P\x91\x93\x92PPPV',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='```@R`\xe0`\x02\n`\x005\x04c3\x92\xff\xc8\x81\x14a\x00'\
                                     '?W\x80c<w\xb9\\\x14a\x00jW\x80c\xceg\xbd\xa6\x14a\x00\xc2'\
                                     'W\x80c\xeb\xbb\xe0\x0b\x14a\x00\xe8W[a\x00\x02V[4a\x00\x02W'\
                                     'a\x01\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01'\
                                     ' W\x90\x85\x90\n\x90`\x01\x01a\x00UV[4a\x00\x02Wa\x01\x0e'\
                                     '`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90'\
                                     '\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90'\
                                     '\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85'\
                                     '\x90\n\x90`\x10\x01a\x00\x80V[4a\x00\x02Wa\x01\x0e`\x045`'\
                                     '$5`D5`\x00\x80[\x82\x81\x10\x15a\x01)W[`\x01\x01a\x00'\
                                     '\xd7V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x80'\
                                     '[\x82\x81\x10\x15a\x01)W[`\x10\x01a\x00\xfdV[`@\x80Q\x91'\
                                     '\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[P\x94\x93PPPPV[P'\
                                     '\x91\x93\x92PPPV', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = '\xceg\xbd\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0fB@'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 0        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_loop_divadd_unr100_10M(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 20000,
                   'gaslimit': 100000000000,
                   'number': 9999,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '```@R`\x005|\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90\x04c\xff\xff\xff\xff\x16\x80c[\xc0\xd2\xf1\x14a\x00;W[\xfe[4\x15a\x00CW\xfe[a\x00t'\
                             '`\x04\x80\x805\x90` \x01\x90\x91\x90\x805\x90` \x01\x90\x91\x90\x805\x90` \x01\x90\x91\x90\x805\x90` \x01\x90\x91\x90PPa\x00\x8aV[`@Q\x80\x82\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[`\x00`'\
                             '\x00`\x00\x86\x91P`\x00\x90P[\x83\x81\x10\x15a\x08\x18W\x85\x82\x81\x15\x15a\x00\xabW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x00\xbeW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x00\xd1W\xfe[\x04\x91P'\
                             '\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x00\xe4W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x00\xf7W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01\nW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01\x1dW'\
                             '\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x010W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01CW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01VW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15'\
                             '\x15a\x01iW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01|W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01\x8fW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01\xa2W\xfe[\x04\x91P\x84\x82\x01\x91'\
                             'P\x85\x82\x81\x15\x15a\x01\xb5W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01\xc8W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01\xdbW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01\xeeW\xfe[\x04\x91'\
                             "P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02\x01W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02\x14W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02'W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02:"\
                             'W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02MW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02`W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02sW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81'\
                             '\x15\x15a\x02\x86W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02\x99W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02\xacW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02\xbfW\xfe[\x04\x91P\x84\x82\x01'\
                             '\x91P\x85\x82\x81\x15\x15a\x02\xd2W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02\xe5W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02\xf8W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03\x0bW\xfe[\x04'\
                             '\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03\x1eW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x031W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03DW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03'\
                             'WW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03jW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03}W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03\x90W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82'\
                             '\x81\x15\x15a\x03\xa3W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03\xb6W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03\xc9W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03\xdcW\xfe[\x04\x91P\x84\x82'\
                             '\x01\x91P\x85\x82\x81\x15\x15a\x03\xefW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04\x02W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04\x15W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04(W\xfe['\
                             '\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04;W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04NW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04aW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a'\
                             '\x04tW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04\x87W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04\x9aW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04\xadW\xfe[\x04\x91P\x84\x82\x01\x91P\x85'\
                             '\x82\x81\x15\x15a\x04\xc0W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04\xd3W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04\xe6W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04\xf9W\xfe[\x04\x91P\x84'\
                             '\x82\x01\x91P\x85\x82\x81\x15\x15a\x05\x0cW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x05\x1fW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x052W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x05EW\xfe'\
                             '[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x05XW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x05kW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x05~W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15'\
                             'a\x05\x91W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x05\xa4W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x05\xb7W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x05\xcaW\xfe[\x04\x91P\x84\x82\x01\x91P'\
                             '\x85\x82\x81\x15\x15a\x05\xddW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x05\xf0W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06\x03W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06\x16W\xfe[\x04\x91P'\
                             '\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06)W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06<W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06OW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06bW'\
                             '\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06uW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06\x88W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06\x9bW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15'\
                             '\x15a\x06\xaeW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06\xc1W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06\xd4W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06\xe7W\xfe[\x04\x91P\x84\x82\x01\x91'\
                             'P\x85\x82\x81\x15\x15a\x06\xfaW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07\rW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07 W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x073W\xfe[\x04\x91'\
                             'P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07FW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07YW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07lW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07\x7f'\
                             'W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07\x92W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07\xa5W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07\xb8W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81'\
                             '\x15\x15a\x07\xcbW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07\xdeW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07\xf1W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x08\x04W\xfe[\x04\x91P\x84\x82\x01'\
                             "\x91P[`d\x81\x01\x90Pa\x00\x98V[\x81\x92P[PP\x94\x93PPPPV\x00\xa1ebzzr0X \xc3\x8c \xb7'p\xeatQD\xfe\xc105Bp\xa6Z\x17\xf7\\\x8eM\x1a\xd1X\x08vmb\xbc\xdc\x00)",
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='```@R`\x005|\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90\x04c\xff\xff\xff\xff\x16'\
                                     '\x80c[\xc0\xd2\xf1\x14a\x00;W[\xfe[4\x15a\x00CW\xfe[a'\
                                     '\x00t`\x04\x80\x805\x90` \x01\x90\x91\x90\x805\x90` \x01\x90\x91\x90'\
                                     '\x805\x90` \x01\x90\x91\x90\x805\x90` \x01\x90\x91\x90PPa\x00\x8a'\
                                     'V[`@Q\x80\x82\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3'\
                                     '[`\x00`\x00`\x00\x86\x91P`\x00\x90P[\x83\x81\x10\x15a\x08\x18W'\
                                     '\x85\x82\x81\x15\x15a\x00\xabW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15'\
                                     '\x15a\x00\xbeW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x00\xd1'\
                                     'W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x00\xe4W\xfe[\x04'\
                                     '\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x00\xf7W\xfe[\x04\x91P\x84\x82'\
                                     '\x01\x91P\x85\x82\x81\x15\x15a\x01\nW\xfe[\x04\x91P\x84\x82\x01\x91P\x85'\
                                     '\x82\x81\x15\x15a\x01\x1dW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15'\
                                     'a\x010W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01CW'\
                                     '\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01VW\xfe[\x04\x91'\
                                     'P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01iW\xfe[\x04\x91P\x84\x82\x01'\
                                     '\x91P\x85\x82\x81\x15\x15a\x01|W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82'\
                                     '\x81\x15\x15a\x01\x8fW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a'\
                                     '\x01\xa2W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01\xb5W\xfe'\
                                     '[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01\xc8W\xfe[\x04\x91P'\
                                     '\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x01\xdbW\xfe[\x04\x91P\x84\x82\x01\x91'\
                                     'P\x85\x82\x81\x15\x15a\x01\xeeW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81'\
                                     '\x15\x15a\x02\x01W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02'\
                                     "\x14W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02'W\xfe["\
                                     '\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02:W\xfe[\x04\x91P\x84'\
                                     '\x82\x01\x91P\x85\x82\x81\x15\x15a\x02MW\xfe[\x04\x91P\x84\x82\x01\x91P'\
                                     '\x85\x82\x81\x15\x15a\x02`W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15'\
                                     '\x15a\x02sW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02\x86'\
                                     'W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02\x99W\xfe[\x04'\
                                     '\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02\xacW\xfe[\x04\x91P\x84\x82'\
                                     '\x01\x91P\x85\x82\x81\x15\x15a\x02\xbfW\xfe[\x04\x91P\x84\x82\x01\x91P\x85'\
                                     '\x82\x81\x15\x15a\x02\xd2W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15'\
                                     'a\x02\xe5W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x02\xf8W'\
                                     '\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03\x0bW\xfe[\x04\x91'\
                                     'P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03\x1eW\xfe[\x04\x91P\x84\x82\x01'\
                                     '\x91P\x85\x82\x81\x15\x15a\x031W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82'\
                                     '\x81\x15\x15a\x03DW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a'\
                                     '\x03WW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03jW\xfe'\
                                     '[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03}W\xfe[\x04\x91P'\
                                     '\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03\x90W\xfe[\x04\x91P\x84\x82\x01\x91'\
                                     'P\x85\x82\x81\x15\x15a\x03\xa3W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81'\
                                     '\x15\x15a\x03\xb6W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03'\
                                     '\xc9W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03\xdcW\xfe['\
                                     '\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x03\xefW\xfe[\x04\x91P\x84'\
                                     '\x82\x01\x91P\x85\x82\x81\x15\x15a\x04\x02W\xfe[\x04\x91P\x84\x82\x01\x91P'\
                                     '\x85\x82\x81\x15\x15a\x04\x15W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15'\
                                     '\x15a\x04(W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04;'\
                                     'W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04NW\xfe[\x04'\
                                     '\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04aW\xfe[\x04\x91P\x84\x82'\
                                     '\x01\x91P\x85\x82\x81\x15\x15a\x04tW\xfe[\x04\x91P\x84\x82\x01\x91P\x85'\
                                     '\x82\x81\x15\x15a\x04\x87W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15'\
                                     'a\x04\x9aW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04\xadW'\
                                     '\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04\xc0W\xfe[\x04\x91'\
                                     'P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x04\xd3W\xfe[\x04\x91P\x84\x82\x01'\
                                     '\x91P\x85\x82\x81\x15\x15a\x04\xe6W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82'\
                                     '\x81\x15\x15a\x04\xf9W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a'\
                                     '\x05\x0cW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x05\x1fW\xfe'\
                                     '[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x052W\xfe[\x04\x91P'\
                                     '\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x05EW\xfe[\x04\x91P\x84\x82\x01\x91'\
                                     'P\x85\x82\x81\x15\x15a\x05XW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81'\
                                     '\x15\x15a\x05kW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x05'\
                                     '~W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x05\x91W\xfe['\
                                     '\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x05\xa4W\xfe[\x04\x91P\x84'\
                                     '\x82\x01\x91P\x85\x82\x81\x15\x15a\x05\xb7W\xfe[\x04\x91P\x84\x82\x01\x91P'\
                                     '\x85\x82\x81\x15\x15a\x05\xcaW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15'\
                                     '\x15a\x05\xddW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x05\xf0'\
                                     'W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06\x03W\xfe[\x04'\
                                     '\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06\x16W\xfe[\x04\x91P\x84\x82'\
                                     '\x01\x91P\x85\x82\x81\x15\x15a\x06)W\xfe[\x04\x91P\x84\x82\x01\x91P\x85'\
                                     '\x82\x81\x15\x15a\x06<W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15'\
                                     'a\x06OW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06bW'\
                                     '\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06uW\xfe[\x04\x91'\
                                     'P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06\x88W\xfe[\x04\x91P\x84\x82\x01'\
                                     '\x91P\x85\x82\x81\x15\x15a\x06\x9bW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82'\
                                     '\x81\x15\x15a\x06\xaeW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a'\
                                     '\x06\xc1W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06\xd4W\xfe'\
                                     '[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06\xe7W\xfe[\x04\x91P'\
                                     '\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x06\xfaW\xfe[\x04\x91P\x84\x82\x01\x91'\
                                     'P\x85\x82\x81\x15\x15a\x07\rW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81'\
                                     '\x15\x15a\x07 W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07'\
                                     '3W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07FW\xfe['\
                                     '\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07YW\xfe[\x04\x91P\x84'\
                                     '\x82\x01\x91P\x85\x82\x81\x15\x15a\x07lW\xfe[\x04\x91P\x84\x82\x01\x91P'\
                                     '\x85\x82\x81\x15\x15a\x07\x7fW\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15'\
                                     '\x15a\x07\x92W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07\xa5'\
                                     'W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07\xb8W\xfe[\x04'\
                                     '\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15a\x07\xcbW\xfe[\x04\x91P\x84\x82'\
                                     '\x01\x91P\x85\x82\x81\x15\x15a\x07\xdeW\xfe[\x04\x91P\x84\x82\x01\x91P\x85'\
                                     '\x82\x81\x15\x15a\x07\xf1W\xfe[\x04\x91P\x84\x82\x01\x91P\x85\x82\x81\x15\x15'\
                                     'a\x08\x04W\xfe[\x04\x91P\x84\x82\x01\x91P[`d\x81\x01\x90Pa\x00'\
                                     '\x98V[\x81\x92P[PP\x94\x93PPPPV\x00\xa1ebzzr'\
                                     "0X \xc3\x8c \xb7'p\xeatQD\xfe\xc105Bp\xa6Z\x17\xf7"\
                                     '\\\x8eM\x1a\xd1X\x08vmb\xbc\xdc\x00)', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = '[\xc0\xd2\xf1\x8e\xda\xd8\xb5[\x15\x86\x80^\xa8\xc2E\xd8\xc1k\x06\xa5\x10+y\x1f\xc6\xeb`i71\xc0g{\xf5\x01\x1ch\xdb\x1c\x17\x9c\xd3Z\xb3\xfc`\xc67\x04\xaa\x7f\xcb\xea@\xf1\x97\x82\xb1a\x1a\xab\xa8g&\xa7hl\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa\xff\xff\xff\xff\xff\xff\xff\xff\xbb\xff\xff\xff\xff\xff\xff\xff'\
'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x98\x96\x80'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 0        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_loop_exp_16b_100k(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 20000,
                   'gaslimit': 100000000000,
                   'number': 9999,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '```@R`\xe0`\x02\n`\x005\x04c3\x92\xff\xc8\x81\x14a\x00?W\x80c<w\xb9\\\x14a\x00jW\x80c\xceg\xbd\xa6\x14a\x00\xc2W\x80c\xeb\xbb\xe0\x0b\x14a\x00\xe8W[a\x00\x02V[4a\x00\x02Wa\x01'\
                             '\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90\x85\x90\n\x90`\x01\x01a\x00UV[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90\x85\x90\n\x85'\
                             '\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x90`\x10\x01a\x00\x80V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`'\
                             '\x00\x80[\x82\x81\x10\x15a\x01)W[`\x01\x01a\x00\xd7V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x80[\x82\x81\x10\x15a\x01)W[`\x10\x01a\x00\xfdV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03`'\
                             ' \x01\x90\xf3[P\x94\x93PPPPV[P\x91\x93\x92PPPV',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='```@R`\xe0`\x02\n`\x005\x04c3\x92\xff\xc8\x81\x14a\x00'\
                                     '?W\x80c<w\xb9\\\x14a\x00jW\x80c\xceg\xbd\xa6\x14a\x00\xc2'\
                                     'W\x80c\xeb\xbb\xe0\x0b\x14a\x00\xe8W[a\x00\x02V[4a\x00\x02W'\
                                     'a\x01\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01'\
                                     ' W\x90\x85\x90\n\x90`\x01\x01a\x00UV[4a\x00\x02Wa\x01\x0e'\
                                     '`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90'\
                                     '\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90'\
                                     '\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85'\
                                     '\x90\n\x90`\x10\x01a\x00\x80V[4a\x00\x02Wa\x01\x0e`\x045`'\
                                     '$5`D5`\x00\x80[\x82\x81\x10\x15a\x01)W[`\x01\x01a\x00'\
                                     '\xd7V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x80'\
                                     '[\x82\x81\x10\x15a\x01)W[`\x10\x01a\x00\xfdV[`@\x80Q\x91'\
                                     '\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[P\x94\x93PPPPV[P'\
                                     '\x91\x93\x92PPPV', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = '3\x92\xff\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00XQ\xf4-L\x95\x7f-\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x86\xa0'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 0        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_loop_divadd_10M(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 20000,
                   'gaslimit': 100000000000,
                   'number': 9999,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': "```@Rc\xff\xff\xff\xff`\xe0`\x02\n`\x005\x04\x16c\x15\xd4#'\x81\x14a\x00BW\x80cY\xe3\xe1\xea\x14a\x00pW\x80c\xc4\xf8\xb9\xfb\x14a\x00\x9eW\x80c\xe0\x130\xbb\x14a\x00\xc9W[\xfe[4\x15a\x00"\
                             'JW\xfe[a\x00^`\x045`$5`D5`d5a\x00\xf4V[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[4\x15a\x00xW\xfe[a\x00^`\x045`$5`D5`d5a\x01\x1eV[`'\
                             '@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[4\x15a\x00\xa6W\xfe[a\x00^`\x045`$5`D5a\x01RV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[4\x15a\x00\xd1W\xfe[a\x00^'\
                             '`\x045`$5`D5a\x01yV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[`\x00\x84\x81[\x83\x81\x10\x15a\x01\x10W\x84\x86\x83\t\x91P[`\x01\x01a\x00\xf9V[\x81\x92P[PP\x94\x93PPP'\
                             'PV[`\x00\x84\x81[\x83\x81\x10\x15a\x01\x10W\x85\x82\x81\x15\x15a\x016W\xfe[\x04\x85\x01\x91P[`\x01\x01a\x01#V[\x81\x92P[PP\x94\x93PPPPV[`\x00\x83\x81[\x83\x81\x10\x15a\x01lW\x90\x84\x01'\
                             '\x90[`\x01\x01a\x01WV[\x81\x92P[PP\x93\x92PPPV[`\x00\x83\x81[\x83\x81\x10\x15a\x01lW\x90\x84\x02\x90[`\x01\x01a\x01~V[\x81\x92P[PP\x93\x92PPPV\x00\xa1ebzzr0X '\
                             '\x06P\x81\xbd\x1e\x9f\xdf\xfc\xcd%\x132R2A\xea\xab\xd0\xfb\x18\x81\xa0e)Y\x9a\x9cg\xd0\xa5h\xe5\x00)',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='```@Rc\xff\xff\xff\xff`\xe0`\x02\n`\x005\x04\x16c\x15\xd4'\
                                     "#'\x81\x14a\x00BW\x80cY\xe3\xe1\xea\x14a\x00pW\x80c\xc4\xf8"\
                                     '\xb9\xfb\x14a\x00\x9eW\x80c\xe0\x130\xbb\x14a\x00\xc9W[\xfe[4\x15'\
                                     'a\x00JW\xfe[a\x00^`\x045`$5`D5`d5a\x00'\
                                     '\xf4V[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[4\x15'\
                                     'a\x00xW\xfe[a\x00^`\x045`$5`D5`d5a\x01'\
                                     '\x1eV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[4\x15'\
                                     'a\x00\xa6W\xfe[a\x00^`\x045`$5`D5a\x01RV['\
                                     '`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[4\x15a\x00\xd1'\
                                     'W\xfe[a\x00^`\x045`$5`D5a\x01yV[`@\x80'\
                                     'Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[`\x00\x84\x81[\x83\x81\x10'\
                                     '\x15a\x01\x10W\x84\x86\x83\t\x91P[`\x01\x01a\x00\xf9V[\x81\x92P'\
                                     '[PP\x94\x93PPPPV[`\x00\x84\x81[\x83\x81\x10\x15a\x01\x10'\
                                     'W\x85\x82\x81\x15\x15a\x016W\xfe[\x04\x85\x01\x91P[`\x01\x01a\x01'\
                                     '#V[\x81\x92P[PP\x94\x93PPPPV[`\x00\x83\x81[\x83'\
                                     '\x81\x10\x15a\x01lW\x90\x84\x01\x90[`\x01\x01a\x01WV[\x81\x92P'\
                                     '[PP\x93\x92PPPV[`\x00\x83\x81[\x83\x81\x10\x15a\x01lW'\
                                     '\x90\x84\x02\x90[`\x01\x01a\x01~V[\x81\x92P[PP\x93\x92PP'\
                                     'PV\x00\xa1ebzzr0X \x06P\x81\xbd\x1e\x9f\xdf\xfc\xcd%\x13'\
                                     '2R2A\xea\xab\xd0\xfb\x18\x81\xa0e)Y\x9a\x9cg\xd0\xa5h\xe5\x00)', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = 'Y\xe3\xe1\xea\x8e\xda\xd8\xb5[\x15\x86\x80^\xa8\xc2E\xd8\xc1k\x06\xa5\x10+y\x1f\xc6\xeb`i71\xc0g{\xf5\x01\x1ch\xdb\x1c\x17\x9c\xd3Z\xb3\xfc`\xc67\x04\xaa\x7f\xcb\xea@\xf1\x97\x82\xb1a\x1a\xab\xa8g&\xa7hl\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xaa\xff\xff\xff\xff\xff\xff\xff\xff\xbb\xff\xff\xff\xff\xff\xff\xff'\
'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x98\x96\x80'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 0        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_loop_exp_2b_100k(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 20000,
                   'gaslimit': 100000000000,
                   'number': 9999,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '```@R`\xe0`\x02\n`\x005\x04c3\x92\xff\xc8\x81\x14a\x00?W\x80c<w\xb9\\\x14a\x00jW\x80c\xceg\xbd\xa6\x14a\x00\xc2W\x80c\xeb\xbb\xe0\x0b\x14a\x00\xe8W[a\x00\x02V[4a\x00\x02Wa\x01'\
                             '\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90\x85\x90\n\x90`\x01\x01a\x00UV[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90\x85\x90\n\x85'\
                             '\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x90`\x10\x01a\x00\x80V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`'\
                             '\x00\x80[\x82\x81\x10\x15a\x01)W[`\x01\x01a\x00\xd7V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x80[\x82\x81\x10\x15a\x01)W[`\x10\x01a\x00\xfdV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03`'\
                             ' \x01\x90\xf3[P\x94\x93PPPPV[P\x91\x93\x92PPPV',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='```@R`\xe0`\x02\n`\x005\x04c3\x92\xff\xc8\x81\x14a\x00'\
                                     '?W\x80c<w\xb9\\\x14a\x00jW\x80c\xceg\xbd\xa6\x14a\x00\xc2'\
                                     'W\x80c\xeb\xbb\xe0\x0b\x14a\x00\xe8W[a\x00\x02V[4a\x00\x02W'\
                                     'a\x01\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01'\
                                     ' W\x90\x85\x90\n\x90`\x01\x01a\x00UV[4a\x00\x02Wa\x01\x0e'\
                                     '`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90'\
                                     '\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90'\
                                     '\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85'\
                                     '\x90\n\x90`\x10\x01a\x00\x80V[4a\x00\x02Wa\x01\x0e`\x045`'\
                                     '$5`D5`\x00\x80[\x82\x81\x10\x15a\x01)W[`\x01\x01a\x00'\
                                     '\xd7V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x80'\
                                     '[\x82\x81\x10\x15a\x01)W[`\x10\x01a\x00\xfdV[`@\x80Q\x91'\
                                     '\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[P\x94\x93PPPPV[P'\
                                     '\x91\x93\x92PPPV', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = '3\x92\xff\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00XQ\xf4-L\x95\x7f-\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x86\xa0'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 0        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_loop_mul(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 20000,
                   'gaslimit': 100000000000,
                   'number': 9999,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '```@R`\xe0`\x02\n`\x005\x04c\xeb\x8a\xc9!\x81\x14`\x1cW[`\x02V[4`\x02W`d`\x045`$5`\x00gXQ\xf4-L\x95\x7f-g\x14\x05{~\xf7g\x81O\x82\x80[`\x00\x86\x14`vW'\
                             'PP\x93\x81\x02\x84\x01\x80\x82\x02\x85\x01\x80\x82\x02\x95`\x00\x19\x95\x90\x95\x01\x94\x91\x90`?V[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[P\x94\x95\x94PPPPPV',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='```@R`\xe0`\x02\n`\x005\x04c\xeb\x8a\xc9!\x81\x14`\x1c'\
                                     'W[`\x02V[4`\x02W`d`\x045`$5`\x00gXQ'\
                                     '\xf4-L\x95\x7f-g\x14\x05{~\xf7g\x81O\x82\x80[`\x00\x86\x14`'\
                                     'vWPP\x93\x81\x02\x84\x01\x80\x82\x02\x85\x01\x80\x82\x02\x95`\x00\x19\x95\x90'\
                                     '\x95\x01\x94\x91\x90`?V[`@\x80Q\x91\x82RQ\x90\x81\x90\x03` '\
                                     '\x01\x90\xf3[P\x94\x95\x94PPPPPV', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = '\xeb\x8a\xc9!^\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xee\xed\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 0        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_loop_exp_4b_100k(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 20000,
                   'gaslimit': 100000000000,
                   'number': 9999,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '```@R`\xe0`\x02\n`\x005\x04c3\x92\xff\xc8\x81\x14a\x00?W\x80c<w\xb9\\\x14a\x00jW\x80c\xceg\xbd\xa6\x14a\x00\xc2W\x80c\xeb\xbb\xe0\x0b\x14a\x00\xe8W[a\x00\x02V[4a\x00\x02Wa\x01'\
                             '\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90\x85\x90\n\x90`\x01\x01a\x00UV[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90\x85\x90\n\x85'\
                             '\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x90`\x10\x01a\x00\x80V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`'\
                             '\x00\x80[\x82\x81\x10\x15a\x01)W[`\x01\x01a\x00\xd7V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x80[\x82\x81\x10\x15a\x01)W[`\x10\x01a\x00\xfdV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03`'\
                             ' \x01\x90\xf3[P\x94\x93PPPPV[P\x91\x93\x92PPPV',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='```@R`\xe0`\x02\n`\x005\x04c3\x92\xff\xc8\x81\x14a\x00'\
                                     '?W\x80c<w\xb9\\\x14a\x00jW\x80c\xceg\xbd\xa6\x14a\x00\xc2'\
                                     'W\x80c\xeb\xbb\xe0\x0b\x14a\x00\xe8W[a\x00\x02V[4a\x00\x02W'\
                                     'a\x01\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01'\
                                     ' W\x90\x85\x90\n\x90`\x01\x01a\x00UV[4a\x00\x02Wa\x01\x0e'\
                                     '`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90'\
                                     '\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90'\
                                     '\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85'\
                                     '\x90\n\x90`\x10\x01a\x00\x80V[4a\x00\x02Wa\x01\x0e`\x045`'\
                                     '$5`D5`\x00\x80[\x82\x81\x10\x15a\x01)W[`\x01\x01a\x00'\
                                     '\xd7V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x80'\
                                     '[\x82\x81\x10\x15a\x01)W[`\x10\x01a\x00\xfdV[`@\x80Q\x91'\
                                     '\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[P\x94\x93PPPPV[P'\
                                     '\x91\x93\x92PPPV', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = '3\x92\xff\xc8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00XQ\xf4-L\x95\x7f-\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x86\xa0'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 0        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_fibonacci16(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 100000000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\xe0`\x02\n`\x005\x04\x80c(9\xe9(\x14`\x1eW\x80ca\x04\x7f\xf4\x14`4W\x00[`*`\x045`$5`GV[\x80`\x00R` `\x00\xf3[`=`\x045`\x99V[\x80`\x00R` `\x00\xf3'\
                             '[`\x00\x82`\x00\x14`TW`^V[\x81`\x01\x01\x90P`\x93V[\x81`\x00\x14`iW`{V[`u`\x01\x84\x03`\x01`GV[\x90P`\x93V[`\x90`\x01\x84\x03`\x8c\x85`\x01\x86\x03`GV[`'\
                             'GV[\x90P[\x92\x91PPV[`\x00\x81`\x00\x14\x80`\xa9WP\x81`\x01\x14[`\xb0W`\xb7V[\x81\x90P`\xcfV[`\xc1`\x02\x83\x03`\x99V[`\xcb`\x01\x84\x03`\x99V[\x01\x90P[\x91\x90PV',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xe0`\x02\n`\x005\x04\x80c(9\xe9(\x14`\x1eW\x80ca\x04'\
                                     '\x7f\xf4\x14`4W\x00[`*`\x045`$5`GV[\x80`\x00'\
                                     'R` `\x00\xf3[`=`\x045`\x99V[\x80`\x00R` `'\
                                     '\x00\xf3[`\x00\x82`\x00\x14`TW`^V[\x81`\x01\x01\x90P`'\
                                     '\x93V[\x81`\x00\x14`iW`{V[`u`\x01\x84\x03`\x01`'\
                                     'GV[\x90P`\x93V[`\x90`\x01\x84\x03`\x8c\x85`\x01\x86\x03`'\
                                     'GV[`GV[\x90P[\x92\x91PPV[`\x00\x81`\x00\x14\x80'\
                                     '`\xa9WP\x81`\x01\x14[`\xb0W`\xb7V[\x81\x90P`\xcfV['\
                                     '`\xc1`\x02\x83\x03`\x99V[`\xcb`\x01\x84\x03`\x99V[\x01\x90P'\
                                     '[\x91\x90PV', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = 'a\x04\x7f\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_fibonacci10(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 100000000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\xe0`\x02\n`\x005\x04\x80c(9\xe9(\x14`\x1eW\x80ca\x04\x7f\xf4\x14`4W\x00[`*`\x045`$5`GV[\x80`\x00R` `\x00\xf3[`=`\x045`\x99V[\x80`\x00R` `\x00\xf3'\
                             '[`\x00\x82`\x00\x14`TW`^V[\x81`\x01\x01\x90P`\x93V[\x81`\x00\x14`iW`{V[`u`\x01\x84\x03`\x01`GV[\x90P`\x93V[`\x90`\x01\x84\x03`\x8c\x85`\x01\x86\x03`GV[`'\
                             'GV[\x90P[\x92\x91PPV[`\x00\x81`\x00\x14\x80`\xa9WP\x81`\x01\x14[`\xb0W`\xb7V[\x81\x90P`\xcfV[`\xc1`\x02\x83\x03`\x99V[`\xcb`\x01\x84\x03`\x99V[\x01\x90P[\x91\x90PV',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xe0`\x02\n`\x005\x04\x80c(9\xe9(\x14`\x1eW\x80ca\x04'\
                                     '\x7f\xf4\x14`4W\x00[`*`\x045`$5`GV[\x80`\x00'\
                                     'R` `\x00\xf3[`=`\x045`\x99V[\x80`\x00R` `'\
                                     '\x00\xf3[`\x00\x82`\x00\x14`TW`^V[\x81`\x01\x01\x90P`'\
                                     '\x93V[\x81`\x00\x14`iW`{V[`u`\x01\x84\x03`\x01`'\
                                     'GV[\x90P`\x93V[`\x90`\x01\x84\x03`\x8c\x85`\x01\x86\x03`'\
                                     'GV[`GV[\x90P[\x92\x91PPV[`\x00\x81`\x00\x14\x80'\
                                     '`\xa9WP\x81`\x01\x14[`\xb0W`\xb7V[\x81\x90P`\xcfV['\
                                     '`\xc1`\x02\x83\x03`\x99V[`\xcb`\x01\x84\x03`\x99V[\x01\x90P'\
                                     '[\x91\x90PV', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = 'a\x04\x7f\xf4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_manyFunctions100(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 100000000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\xe0`\x02\n`\x005\x04\x80c\x01\xf9\x9a\xd7\x14a\x08\xc3W\x80c\x02:bJ\x14a\x08\xd8W\x80c\x03\xbd\xec\xf5\x14a\x08\xedW\x80c\x05\xfe\x03_\x14a\t\x02W\x80c\x08-\x8fI\x14a\t\x17W\x80c\t\x0b\xf3\xb7\x14'\
                             'a\t,W\x80c\x0b\xd9\xc54\x14a\tAW\x80c\x0cK\xfa\x94\x14a\tVW\x80c\x0e \xeb\xe2\x14a\tkW\x80c\x0fv\xde\r\x14a\t\x80W\x80c\x10\xcf\xcc\x19\x14a\t\x95W\x80c\x13\xce\x15\xa9\x14a\t\xaaW\x80'\
                             'c\x14\r\xce\xc4\x14a\t\xbfW\x80c\x14\xd0z>\x14a\t\xd4W\x80c\x16\x87\xf1\x12\x14a\t\xe9W\x80c\x16\xebf\x03\x14a\t\xfeW\x80c\x17,\xf7\x17\x14a\n\x13W\x80c\x1b\xd6\xf5\x96\x14a\n(W\x80c\x1c\xdb\x85q'\
                             '\x14a\n=W\x80c\x1c\xf7N\xce\x14a\nRW\x80c\x1d\t\xba,\x14a\ngW\x80c\x1fi\xaaQ\x14a\n|W\x80c"=\xcct\x14a\n\x91W\x80c%\xe5$\xd3\x14a\n\xa6W\x80c&\x1d\xe7\xc4\x14a\n\xbbW'\
                             '\x80c&2\x92M\x14a\n\xd0W\x80c)\t\xcc]\x14a\n\xe5W\x80c)\x81i\x98\x14a\n\xfaW\x80c*\x85\xa4]\x14a\x0b\x0fW\x80c,\xa3m\xa0\x14a\x0b$W\x80c,\xbf\x1f\r\x14a\x0b9W\x80c-\x0fU'\
                             's\x14a\x0bNW\x80c-\x97\x86x\x14a\x0bcW\x80c1\xdb\x9e\xfd\x14a\x0bxW\x80c2\x06M\xb7\x14a\x0b\x8dW\x80c2\x93\x1f\xbb\x14a\x0b\xa2W\x80c5_Q\xa0\x14a\x0b\xb7W\x80c6\x1b\xb3@\x14a\x0b\xcc'\
                             'W\x80c6M\xdb\x0e\x14a\x0b\xe1W\x80c7\x92\xa0\x18\x14a\x0b\xf6W\x80c8\xc6\x8f\x8f\x14a\x0c\x0bW\x80c8\xe5\x86\xfd\x14a\x0c W\x80c9-B\xae\x14a\x0c5W\x80c9\xa8{\xd9\x14a\x0cJW\x80c:\x95'\
                             '\xa32\x14a\x0c_W\x80c;\x8e\xcd\xf9\x14a\x0ctW\x80c<\xf0e\x9a\x14a\x0c\x89W\x80c>\xaf\x99#\x14a\x0c\x9eW\x80c?\xe9~\xad\x14a\x0c\xb3W\x80c?\xf1\x1c\x8b\x14a\x0c\xc8W\x80c@N\xfcS\x14a\x0c'\
                             '\xddW\x80c@\x7f\xce{\x14a\x0c\xf2W\x80c@\xc3\xb1\x87\x14a\r\x07W\x80cD\x02\x08\xc3\x14a\r\x1cW\x80cD\xe8k/\x14a\r1W\x80cE]\xf5y\x14a\rFW\x80cF\x89\xabM\x14a\r[W\x80cF'\
                             '\xbe.\x0c\x14a\rpW\x80cH|\xd8o\x14a\r\x85W\x80cH\xe6\x17\x82\x14a\r\x9aW\x80cI\xd4\xa3D\x14a\r\xafW\x80cJ\x0fYt\x14a\r\xc4W\x80cK\xc2N\xc5\x14a\r\xd9W\x80cL/\xe4V\x14a'\
                             '\r\xeeW\x80cL\xc8\x85\xd4\x14a\x0e\x03W\x80cN\xaa\xad{\x14a\x0e\x18W\x80cN\xb1f\xaf\x14a\x0e-W\x80cPP\t4\x14a\x0eBW\x80cPk\xff\x11\x14a\x0eWW\x80cP\x87b\xc1\x14a\x0elW\x80c'\
                             'Ri8\xf8\x14a\x0e\x81W\x80cT@\x0c`\x14a\x0e\x96W\x80cU\x95\x10\xd8\x14a\x0e\xabW\x80cU\xa5\xf7\x02\x14a\x0e\xc0W\x80cV\xcaR\x8f\x14a\x0e\xd5W\x80cW\n*\x16\x14a\x0e\xeaW\x80c]\xab.\x0f\x14'\
                             'a\x0e\xffW\x80c]\xcaS\xd3\x14a\x0f\x14W\x80cb\x01~\xbc\x14a\x0f)W\x80cb\x1a%\xf8\x14a\x0f>W\x80cbmJ6\x14a\x0fSW\x80cb\xb6\xa2\x82\x14a\x0fhW\x80cd\xfa\xf2,\x14a\x0f}W\x80'\
                             'cf\xd7\xff\xde\x14a\x0f\x92W\x80cg\xb8\x86\xe8\x14a\x0f\xa7W\x80cg\xe9\x02\xc7\x14a\x0f\xbcW\x80ci\xd7w@\x14a\x0f\xd1W\x80ckz\xe8\xe6\x14a\x0f\xe6W\x80cl;e\x91\x14a\x0f\xfbW\x80cnT\x18\x1e'\
                             '\x14a\x10\x10W\x80cn\x97\x8d\x91\x14a\x10%W\x80coc\xd2\xec\x14a\x10:W\x80cpc2\xd1\x14a\x10OW\x80cp\xacK\xb9\x14a\x10dW\x80cq8\xefR\x14a\x10yW\x80cq\xddF\xa9\x14a\x10\x8eW'\
                             '\x80cr\xa7\xc2)\x14a\x10\xa3W\x80csv\xfc\x8d\x14a\x10\xb8W\x80cs\x8a&y\x14a\x10\xcdW\x80ctU&P\x14a\x10\xe2W\x80cto\xc8\xd0\x14a\x10\xf7W\x80cy%K\xb8\x14a\x11\x0cW\x80cz\xda\xa3'\
                             '\xf8\x14a\x11!W\x80c~N\xb3[\x14a\x116W\x80c\x88^\xc1\x8e\x14a\x11KW\x80c\x8b\x9f\xf6\xb6\x14a\x11`W\x80c\x8c\xe1\x13\xdc\x14a\x11uW\x80c\x8d\xef\xbc^\x14a\x11\x8aW\x80c\x8fF\x13\xd5\x14a\x11\x9f'\
                             'W\x80c\x8f\xdc$\xba\x14a\x11\xb4W\x80c\x90\x02\xdb\xa4\x14a\x11\xc9W\x80c\x91\xd1W5\x14a\x11\xdeW\x80c\x91\xd4;#\x14a\x11\xf3W\x80c\x93\xb1M\xaa\x14a\x12\x08W\x80c\x94\xd6:\xfd\x14a\x12\x1dW\x80c\x95\x80'\
                             ']\xad\x14a\x122W\x80c\x96\xf6\x87\x82\x14a\x12GW\x80c\x97@\xe4\xa2\x14a\x12\\W\x80c\x98\x12\x90\x13\x14a\x12qW\x80c\x99\xa3\xf0\xe8\x14a\x12\x86W\x80c\x9a\xcb\x1a\xd4\x14a\x12\x9bW\x80c\x9b\xe0y\x08\x14a\x12'\
                             '\xb0W\x80c\x9c\x15\xbe\x0b\x14a\x12\xc5W\x80c\x9dE\x1cM\x14a\x12\xdaW\x80c\x9d\x8e\xe9C\x14a\x12\xefW\x80c\x9e\xf6\xca\x0f\x14a\x13\x04W\x80c\xa0\xdb\n"\x14a\x13\x19W\x80c\xa1\x8e.\xb9\x14a\x13.W\x80c\xa4'\
                             '\x088I\x14a\x13CW\x80c\xa5uD\xda\x14a\x13XW\x80c\xa5\xa8>M\x14a\x13mW\x80c\xa6\x84?4\x14a\x13\x82W\x80c\xa6\xda\xcd\xd7\x14a\x13\x97W\x80c\xa8\xc4\xc8\xbc\x14a\x13\xacW\x80c\xaa\x05\x8as\x14a'\
                             '\x13\xc1W\x80c\xaa\xd6-\xa2\x14a\x13\xd6W\x80c\xaa\xf3\xe4\xf4\x14a\x13\xebW\x80c\xab\x81\xe7s\x14a\x14\x00W\x80c\xab\xc9:\xee\x14a\x14\x15W\x80c\xab\xde3\xf7\x14a\x14*W\x80c\xb1\x14\xb9l\x14a\x14?W\x80c'\
                             '\xb3\xdf\x877\x14a\x14TW\x80c\xb4\x17L\xb0\x14a\x14iW\x80c\xb5\xd0*V\x14a\x14~W\x80c\xb71\xe8H\x14a\x14\x93W\x80c\xb7\xb9g#\x14a\x14\xa8W\x80c\xbb\xcd\xedz\x14a\x14\xbdW\x80c\xbb\xec\xec\xa9\x14'\
                             'a\x14\xd2W\x80c\xbe\xcat@\x14a\x14\xe7W\x80c\xbf\x89\x81\xc0\x14a\x14\xfcW\x80c\xc0(\xc6t\x14a\x15\x11W\x80c\xc28_\xa6\x14a\x15&W\x80c\xc3\x19\xa0,\x14a\x15;W\x80c\xc5i\xba\xe0\x14a\x15PW\x80'\
                             'c\xc6q_\x81\x14a\x15eW\x80c\xc7\xb9\x8d\xec\x14a\x15zW\x80c\xc9\xac\xab\x84\x14a\x15\x8fW\x80c\xca\x9e\xfcs\x14a\x15\xa4W\x80c\xca\xd8\x00$\x14a\x15\xb9W\x80c\xcd\xad\xb0\xfa\x14a\x15\xceW\x80c\xcd\xbd\xf3\x91'\
                             '\x14a\x15\xe3W\x80c\xcfF\x0f\xa5\x14a\x15\xf8W\x80c\xcfi1\x8a\x14a\x16\rW\x80c\xd1\x83[\x8c\x14a\x16"W\x80c\xd3S\xa1\xcb\x14a\x167W\x80c\xd3\xe1A\xe0\x14a\x16LW\x80c\xd5\xec~\x1d\x14a\x16aW'\
                             '\x80c\xd7\xea\xd1\xde\x14a\x16vW\x80c\xd9\x0b\x02\xaa\x14a\x16\x8bW\x80c\xd9Y\xe2D\x14a\x16\xa0W\x80c\xd9\xe6\x8bD\x14a\x16\xb5W\x80c\xda\xac\xb2O\x14a\x16\xcaW\x80c\xdc\x12\xa8\x05\x14a\x16\xdfW\x80c\xdd\x94`'\
                             "3\x14a\x16\xf4W\x80c\xdd\xa5\x14$\x14a\x17\tW\x80c\xdef\x12\x17\x14a\x17\x1eW\x80c\xdf\xb9V\x0c\x14a\x173W\x80c\xe08'\xd2\x14a\x17HW\x80c\xe2\x17 \x00\x14a\x17]W\x80c\xe2\xc7\x18\xd8\x14a\x17r"\
                             'W\x80c\xe3\xdaS\x99\x14a\x17\x87W\x80c\xe4\x8e`?\x14a\x17\x9cW\x80c\xe5\xf9\xec)\x14a\x17\xb1W\x80c\xe6\xc0E\x9a\x14a\x17\xc6W\x80c\xe7\n\xdd\xec\x14a\x17\xdbW\x80c\xe7\xa0\x12\x15\x14a\x17\xf0W\x80c\xea\x7f'\
                             "M'\x14a\x18\x05W\x80c\xeb\xb6\xc5\x9f\x14a\x18\x1aW\x80c\xedc\x02\xbe\x14a\x18/W\x80c\xedd\xb3k\x14a\x18DW\x80c\xee\xcd'\x89\x14a\x18YW\x80c\xf0\xed\x14\xe0\x14a\x18nW\x80c\xf0\xf2\x13D\x14a\x18"\
                             '\x83W\x80c\xf1\xe3(\xf9\x14a\x18\x98W\x80c\xf1\xe6\xf4\xcd\x14a\x18\xadW\x80c\xf3/\xe9\x95\x14a\x18\xc2W\x80c\xf7Qe\xc6\x14a\x18\xd7W\x80c\xf7\xedq\xd0\x14a\x18\xecW\x80c\xf8\x0fD\xf3\x14a\x19\x01W\x80c\xf8'\
                             '\xbc\x05\x05\x14a\x19\x16W\x80c\xfb\xd3\xc5\x1a\x14a\x19+W\x80c\xfdr\x00\x90\x14a\x19@W\x80c\xfe\xd3\xa3\x00\x14a\x19UW\x00[a\x08\xce`\x045a.\xdfV[\x80`\x00R` `\x00\xf3[a\x08\xe3`\x045a'\
                             '/\xb5V[\x80`\x00R` `\x00\xf3[a\x08\xf8`\x045a?GV[\x80`\x00R` `\x00\xf3[a\t\r`\x045a*\x11V[\x80`\x00R` `\x00\xf3[a\t"`\x045a\'\xecV[\x80`\x00R'\
                             '` `\x00\xf3[a\t7`\x045a!\\V[\x80`\x00R` `\x00\xf3[a\tL`\x045a(\xc2V[\x80`\x00R` `\x00\xf3[a\ta`\x045a1\x0fV[\x80`\x00R` `\x00\xf3[a\t'\
                             'v`\x045aN\x0bV[\x80`\x00R` `\x00\xf3[a\t\x8b`\x045a2iV[\x80`\x00R` `\x00\xf3[a\t\xa0`\x045a\x1a\x82V[\x80`\x00R` `\x00\xf3[a\t\xb5`\x045a>qV'\
                             '[\x80`\x00R` `\x00\xf3[a\t\xca`\x045a\x1d\xd2V[\x80`\x00R` `\x00\xf3[a\t\xdf`\x045a \xd0V[\x80`\x00R` `\x00\xf3[a\t\xf4`\x045a7UV[\x80`\x00R` `'\
                             '\x00\xf3[a\n\t`\x045a4\xe3V[\x80`\x00R` `\x00\xf3[a\n\x1e`\x045a7\xe1V[\x80`\x00R` `\x00\xf3[a\n3`\x045a8+V[\x80`\x00R` `\x00\xf3[a\nH`\x04'\
                             '5a+\x0bV[\x80`\x00R` `\x00\xf3[a\n]`\x045a8mV[\x80`\x00R` `\x00\xf3[a\nr`\x045a1\xe5V[\x80`\x00R` `\x00\xf3[a\n\x87`\x045aC\xe9V[\x80`'\
                             '\x00R` `\x00\xf3[a\n\x9c`\x045a1\x9bV[\x80`\x00R` `\x00\xf3[a\n\xb1`\x045a.\x11V[\x80`\x00R` `\x00\xf3[a\n\xc6`\x045a#JV[\x80`\x00R` `\x00\xf3['\
                             'a\n\xdb`\x045a!\xe8V[\x80`\x00R` `\x00\xf3[a\n\xf0`\x045a\x19\xf6V[\x80`\x00R` `\x00\xf3[a\x0b\x05`\x045a;\xffV[\x80`\x00R` `\x00\xf3[a\x0b\x1a`\x045a&'\
                             '\x06V[\x80`\x00R` `\x00\xf3[a\x0b/`\x045a&\xd4V[\x80`\x00R` `\x00\xf3[a\x0bD`\x045a;\xb5V[\x80`\x00R` `\x00\xf3[a\x0bY`\x045a$bV[\x80`\x00R`'\
                             ' `\x00\xf3[a\x0bn`\x045a\x1e\x14V[\x80`\x00R` `\x00\xf3[a\x0b\x83`\x045aI\xabV[\x80`\x00R` `\x00\xf3[a\x0b\x98`\x045a\x1c&V[\x80`\x00R` `\x00\xf3[a\x0b\xad'\
                             '`\x045a*\x7fV[\x80`\x00R` `\x00\xf3[a\x0b\xc2`\x045a4WV[\x80`\x00R` `\x00\xf3[a\x0b\xd7`\x045a4\rV[\x80`\x00R` `\x00\xf3[a\x0b\xec`\x045a6=V['\
                             '\x80`\x00R` `\x00\xf3[a\x0c\x01`\x045a.SV[\x80`\x00R` `\x00\xf3[a\x0c\x16`\x045aG{V[\x80`\x00R` `\x00\xf3[a\x0c+`\x045a,mV[\x80`\x00R` `\x00'\
                             '\xf3[a\x0c@`\x045a&HV[\x80`\x00R` `\x00\xf3[a\x0cU`\x045a"tV[\x80`\x00R` `\x00\xf3[a\x0cj`\x045a8\xf9V[\x80`\x00R` `\x00\xf3[a\x0c\x7f`\x045'\
                             'a+UV[\x80`\x00R` `\x00\xf3[a\x0c\x94`\x045a\x1e\xeaV[\x80`\x00R` `\x00\xf3[a\x0c\xa9`\x045a>\xbbV[\x80`\x00R` `\x00\xf3[a\x0c\xbe`\x045a4\x99V[\x80`\x00'\
                             'R` `\x00\xf3[a\x0c\xd3`\x045aH\x07V[\x80`\x00R` `\x00\xf3[a\x0c\xe8`\x045a\x1f\xb8V[\x80`\x00R` `\x00\xf3[a\x0c\xfd`\x045a0\x83V[\x80`\x00R` `\x00\xf3[a'\
                             "\r\x12`\x045a%\xbcV[\x80`\x00R` `\x00\xf3[a\r'`\x045a0AV[\x80`\x00R` `\x00\xf3[a\r<`\x045a@\xa1V[\x80`\x00R` `\x00\xf3[a\rQ`\x045aG\xbd"\
                             'V[\x80`\x00R` `\x00\xf3[a\rf`\x045a\x1cpV[\x80`\x00R` `\x00\xf3[a\r{`\x045a#\x00V[\x80`\x00R` `\x00\xf3[a\r\x90`\x045a#\xd6V[\x80`\x00R` '\
                             '`\x00\xf3[a\r\xa5`\x045a,#V[\x80`\x00R` `\x00\xf3[a\r\xba`\x045aO\xafV[\x80`\x00R` `\x00\xf3[a\r\xcf`\x045a DV[\x80`\x00R` `\x00\xf3[a\r\xe4`'\
                             '\x045a:\xe7V[\x80`\x00R` `\x00\xf3[a\r\xf9`\x045aL\xf3V[\x80`\x00R` `\x00\xf3[a\x0e\x0e`\x045a=\x17V[\x80`\x00R` `\x00\xf3[a\x0e#`\x045aA-V[\x80'\
                             '`\x00R` `\x00\xf3[a\x0e8`\x045aAwV[\x80`\x00R` `\x00\xf3[a\x0eM`\x045a \x8eV[\x80`\x00R` `\x00\xf3[a\x0eb`\x045a-\xc7V[\x80`\x00R` `\x00\xf3'\
                             '[a\x0ew`\x045a/)V[\x80`\x00R` `\x00\xf3[a\x0e\x8c`\x045a$\xa4V[\x80`\x00R` `\x00\xf3[a\x0e\xa1`\x045a\x1bXV[\x80`\x00R` `\x00\xf3[a\x0e\xb6`\x045a'\
                             "6\xc9V[\x80`\x00R` `\x00\xf3[a\x0e\xcb`\x045a2'V[\x80`\x00R` `\x00\xf3[a\x0e\xe0`\x045a\x1a\xccV[\x80`\x00R` `\x00\xf3[a\x0e\xf5`\x045a6\x87V[\x80`\x00R"\
                             '` `\x00\xf3[a\x0f\n`\x045aF\xa5V[\x80`\x00R` `\x00\xf3[a\x0f\x1f`\x045a!\xa6V[\x80`\x00R` `\x00\xf3[a\x0f4`\x045a2\xf5V[\x80`\x00R` `\x00\xf3[a\x0f'\
                             'I`\x045a=\xa3V[\x80`\x00R` `\x00\xf3[a\x0f^`\x045a7\x9fV[\x80`\x00R` `\x00\xf3[a\x0fs`\x045a(xV[\x80`\x00R` `\x00\xf3[a\x0f\x88`\x045a\x1b\x0eV'\
                             '[\x80`\x00R` `\x00\xf3[a\x0f\x9d`\x045a\x1e\xa0V[\x80`\x00R` `\x00\xf3[a\x0f\xb2`\x045aN\xd9V[\x80`\x00R` `\x00\xf3[a\x0f\xc7`\x045aK\xdbV[\x80`\x00R` `'\
                             '\x00\xf3[a\x0f\xdc`\x045aL\x1dV[\x80`\x00R` `\x00\xf3[a\x0f\xf1`\x045aBEV[\x80`\x00R` `\x00\xf3[a\x10\x06`\x045aF\xefV[\x80`\x00R` `\x00\xf3[a\x10\x1b`\x04'\
                             '5aB\x8fV[\x80`\x00R` `\x00\xf3[a\x100`\x045aJ\xc3V[\x80`\x00R` `\x00\xf3[a\x10E`\x045a=\xe5V[\x80`\x00R` `\x00\xf3[a\x10Z`\x045a2\xb3V[\x80`'\
                             '\x00R` `\x00\xf3[a\x10o`\x045a"\xbeV[\x80`\x00R` `\x00\xf3[a\x10\x84`\x045a.\x9dV[\x80`\x00R` `\x00\xf3[a\x10\x99`\x045a\x1b\x9aV[\x80`\x00R` `\x00\xf3['\
                             "a\x10\xae`\x045a'\xaaV[\x80`\x00R` `\x00\xf3[a\x10\xc3`\x045a>/V[\x80`\x00R` `\x00\xf3[a\x10\xd8`\x045aHIV[\x80`\x00R` `\x00\xf3[a\x10\xed`\x045aM"\
                             '\xc1V[\x80`\x00R` `\x00\xf3[a\x11\x02`\x045a3?V[\x80`\x00R` `\x00\xf3[a\x11\x17`\x045a!\x1aV[\x80`\x00R` `\x00\xf3[a\x11,`\x045a&\x92V[\x80`\x00R`'\
                             ' `\x00\xf3[a\x11A`\x045a)\x04V[\x80`\x00R` `\x00\xf3[a\x11V`\x045a-;V[\x80`\x00R` `\x00\xf3[a\x11k`\x045aK\x91V[\x80`\x00R` `\x00\xf3[a\x11\x80'\
                             '`\x045a:[V[\x80`\x00R` `\x00\xf3[a\x11\x95`\x045a"2V[\x80`\x00R` `\x00\xf3[a\x11\xaa`\x045a/kV[\x80`\x00R` `\x00\xf3[a\x11\xbf`\x045aM5V['\
                             '\x80`\x00R` `\x00\xf3[a\x11\xd4`\x045a\x1a@V[\x80`\x00R` `\x00\xf3[a\x11\xe9`\x045a/\xf7V[\x80`\x00R` `\x00\xf3[a\x11\xfe`\x045aC\x1bV[\x80`\x00R` `\x00'\
                             '\xf3[a\x12\x13`\x045a1YV[\x80`\x00R` `\x00\xf3[a\x12(`\x045a+\x97V[\x80`\x00R` `\x00\xf3[a\x12=`\x045a)\x90V[\x80`\x00R` `\x00\xf3[a\x12R`\x045'\
                             'a;sV[\x80`\x00R` `\x00\xf3[a\x12g`\x045aIaV[\x80`\x00R` `\x00\xf3[a\x12|`\x045a3\x81V[\x80`\x00R` `\x00\xf3[a\x12\x91`\x045a?\xd3V[\x80`\x00'\
                             'R` `\x00\xf3[a\x12\xa6`\x045a%zV[\x80`\x00R` `\x00\xf3[a\x12\xbb`\x045aE\x01V[\x80`\x00R` `\x00\xf3[a\x12\xd0`\x045a=YV[\x80`\x00R` `\x00\xf3[a'\
                             '\x12\xe5`\x045aC\xa7V[\x80`\x00R` `\x00\xf3[a\x12\xfa`\x045a@_V[\x80`\x00R` `\x00\xf3[a\x13\x0f`\x045a#\x8cV[\x80`\x00R` `\x00\xf3[a\x13$`\x045a+\xe1'\
                             'V[\x80`\x00R` `\x00\xf3[a\x139`\x045a?\x89V[\x80`\x00R` `\x00\xf3[a\x13N`\x045a)NV[\x80`\x00R` `\x00\xf3[a\x13c`\x045a$\xeeV[\x80`\x00R` '\
                             '`\x00\xf3[a\x13x`\x045aKOV[\x80`\x00R` `\x00\xf3[a\x13\x8d`\x045a3\xcbV[\x80`\x00R` `\x00\xf3[a\x13\xa2`\x045a9\xcfV[\x80`\x00R` `\x00\xf3[a\x13\xb7`'\
                             '\x045a<\x8bV[\x80`\x00R` `\x00\xf3[a\x13\xcc`\x045a,\xf9V[\x80`\x00R` `\x00\xf3[a\x13\xe1`\x045aJyV[\x80`\x00R` `\x00\xf3[a\x13\xf6`\x045aI\xedV[\x80'\
                             '`\x00R` `\x00\xf3[a\x14\x0b`\x045a;)V[\x80`\x00R` `\x00\xf3[a\x14 `\x045a<\xcdV[\x80`\x00R` `\x00\xf3[a\x145`\x045a\x1fvV[\x80`\x00R` `\x00\xf3'\
                             '[a\x14J`\x045aO\xf1V[\x80`\x00R` `\x00\xf3[a\x14_`\x045a5%V[\x80`\x00R` `\x00\xf3[a\x14t`\x045a5oV[\x80`\x00R` `\x00\xf3[a\x14\x89`\x045a'\
                             ')\xdcV[\x80`\x00R` `\x00\xf3[a\x14\x9e`\x045aL\xa9V[\x80`\x00R` `\x00\xf3[a\x14\xb3`\x045a-\x85V[\x80`\x00R` `\x00\xf3[a\x14\xc8`\x045aA\xb9V[\x80`\x00R'\
                             '` `\x00\xf3[a\x14\xdd`\x045aDuV[\x80`\x00R` `\x00\xf3[a\x14\xf2`\x045a5\xfbV[\x80`\x00R` `\x00\xf3[a\x15\x07`\x045a%0V[\x80`\x00R` `\x00\xf3[a\x15'\
                             '\x1c`\x045aFcV[\x80`\x00R` `\x00\xf3[a\x151`\x045aD3V[\x80`\x00R` `\x00\xf3[a\x15F`\x045aO#V[\x80`\x00R` `\x00\xf3[a\x15[`\x045aLgV'\
                             '[\x80`\x00R` `\x00\xf3[a\x15p`\x045a\x1d>V[\x80`\x00R` `\x00\xf3[a\x15\x85`\x045a*=V[\x80`\x00R` `\x00\xf3[a\x15\x9a`\x045a:\x11V[\x80`\x00R` `'\
                             '\x00\xf3[a\x15\xaf`\x045aF\x19V[\x80`\x00R` `\x00\xf3[a\x15\xc4`\x045a9\x85V[\x80`\x00R` `\x00\xf3[a\x15\xd9`\x045a9CV[\x80`\x00R` `\x00\xf3[a\x15\xee`\x04'\
                             '5a$\x18V[\x80`\x00R` `\x00\xf3[a\x16\x03`\x045a\x19\xb4V[\x80`\x00R` `\x00\xf3[a\x16\x18`\x045a:\x9dV[\x80`\x00R` `\x00\xf3[a\x16-`\x045a\x1c\xb2V[\x80`'\
                             '\x00R` `\x00\xf3[a\x16B`\x045a)\xd2V[\x80`\x00R` `\x00\xf3[a\x16W`\x045a,\xafV[\x80`\x00R` `\x00\xf3[a\x16l`\x045a\x1d\x88V[\x80`\x00R` `\x00\xf3['\
                             'a\x16\x81`\x045aB\x03V[\x80`\x00R` `\x00\xf3[a\x16\x96`\x045aE\x8dV[\x80`\x00R` `\x00\xf3[a\x16\xab`\x045a\x1f,V[\x80`\x00R` `\x00\xf3[a\x16\xc0`\x045a*'\
                             '#V[\x80`\x00R` `\x00\xf3[a\x16\xd5`\x045a(6V[\x80`\x00R` `\x00\xf3[a\x16\xea`\x045a8\xb7V[\x80`\x00R` `\x00\xf3[a\x16\xff`\x045aE\xd7V[\x80`\x00R`'\
                             ' `\x00\xf3[a\x17\x14`\x045aEKV[\x80`\x00R` `\x00\xf3[a\x17)`\x045aB\xd1V[\x80`\x00R` `\x00\xf3[a\x17>`\x045a\x1e^V[\x80`\x00R` `\x00\xf3[a\x17S'\
                             '`\x045a@\x15V[\x80`\x00R` `\x00\xf3[a\x17h`\x045a<AV[\x80`\x00R` `\x00\xf3[a\x17}`\x045a\x1b\xe4V[\x80`\x00R` `\x00\xf3[a\x17\x92`\x045aK\x05V['\
                             '\x80`\x00R` `\x00\xf3[a\x17\xa7`\x045a7\x13V[\x80`\x00R` `\x00\xf3[a\x17\xbc`\x045a5\xb1V[\x80`\x00R` `\x00\xf3[a\x17\xd1`\x045aD\xbfV[\x80`\x00R` `\x00'\
                             '\xf3[a\x17\xe6`\x045aI\x1fV[\x80`\x00R` `\x00\xf3[a\x17\xfb`\x045a*\xc9V[\x80`\x00R` `\x00\xf3[a\x18\x10`\x045a0\xcdV[\x80`\x00R` `\x00\xf3[a\x18%`\x045'\
                             'a@\xebV[\x80`\x00R` `\x00\xf3[a\x18:`\x045aOeV[\x80`\x00R` `\x00\xf3[a\x18O`\x045a\x19jV[\x80`\x00R` `\x00\xf3[a\x18d`\x045aH\xd5V[\x80`\x00'\
                             'R` `\x00\xf3[a\x18y`\x045aM\x7fV[\x80`\x00R` `\x00\xf3[a\x18\x8e`\x045a \x02V[\x80`\x00R` `\x00\xf3[a\x18\xa3`\x045a>\xfdV[\x80`\x00R` `\x00\xf3[a'\
                             "\x18\xb8`\x045a'\x1eV[\x80`\x00R` `\x00\xf3[a\x18\xcd`\x045aNMV[\x80`\x00R` `\x00\xf3[a\x18\xe2`\x045a\x1c\xfcV[\x80`\x00R` `\x00\xf3[a\x18\xf7`\x045a'`"\
                             'V[\x80`\x00R` `\x00\xf3[a\x19\x0c`\x045aN\x97V[\x80`\x00R` `\x00\xf3[a\x19!`\x045aC]V[\x80`\x00R` `\x00\xf3[a\x196`\x045aG1V[\x80`\x00R` '\
                             '`\x00\xf3[a\x19K`\x045aH\x93V[\x80`\x00R` `\x00\xf3[a\x19``\x045aJ7V[\x80`\x00R` `\x00\xf3[`\x00`\x00a\x19\x7fa\x19z\x84a)\xdcV[a)\xdcV[\x90P`]'\
                             '`\x02\n\x81\x10\x15a\x19\x92Wa\x19\xa2V[a\x19\x9b\x81a\x19\xf6V[\x91Pa\x19\xaeV[a\x19\xab\x81a\x19\xb4V[\x91P[P\x91\x90PV[`\x00`\x00a\x19\xc1\x83a)\xdcV[\x90P`^`\x02\n\x81\x10'\
                             '\x15a\x19\xd4Wa\x19\xe4V[a\x19\xdd\x81a\x1a@V[\x91Pa\x19\xf0V[a\x19\xed\x81a\x1a\x82V[\x91P[P\x91\x90PV[`\x00`\x00a\x1a\x0ba\x1a\x06\x84a)\xdcV[a)\xdcV[\x90P`^`\x02'\
                             "\n\x81\x10\x15a\x1a\x1eWa\x1a.V[a\x1a'\x81a\x1a\x82V[\x91Pa\x1a:V[a\x1a7\x81a\x1a@V[\x91P[P\x91\x90PV[`\x00`\x00a\x1aM\x83a)\xdcV[\x90P`_`\x02\n\x81\x10\x15a"\
                             '\x1a`Wa\x1apV[a\x1ai\x81a\x1a\xccV[\x91Pa\x1a|V[a\x1ay\x81a\x1b\x0eV[\x91P[P\x91\x90PV[`\x00`\x00a\x1a\x97a\x1a\x92\x84a)\xdcV[a)\xdcV[\x90P`_`\x02\n\x81'\
                             '\x10\x15a\x1a\xaaWa\x1a\xbaV[a\x1a\xb3\x81a\x1b\x0eV[\x91Pa\x1a\xc6V[a\x1a\xc3\x81a\x1a\xccV[\x91P[P\x91\x90PV[`\x00`\x00a\x1a\xd9\x83a)\xdcV[\x90P```\x02\n\x81\x10\x15a\x1a\xec'\
                             'Wa\x1a\xfcV[a\x1a\xf5\x81a\x1bXV[\x91Pa\x1b\x08V[a\x1b\x05\x81a\x1b\x9aV[\x91P[P\x91\x90PV[`\x00`\x00a\x1b#a\x1b\x1e\x84a)\xdcV[a)\xdcV[\x90P```\x02\n\x81\x10\x15'\
                             'a\x1b6Wa\x1bFV[a\x1b?\x81a\x1b\x9aV[\x91Pa\x1bRV[a\x1bO\x81a\x1bXV[\x91P[P\x91\x90PV[`\x00`\x00a\x1be\x83a)\xdcV[\x90P`a`\x02\n\x81\x10\x15a\x1bxWa'\
                             '\x1b\x88V[a\x1b\x81\x81a\x1b\xe4V[\x91Pa\x1b\x94V[a\x1b\x91\x81a\x1c&V[\x91P[P\x91\x90PV[`\x00`\x00a\x1b\xafa\x1b\xaa\x84a)\xdcV[a)\xdcV[\x90P`a`\x02\n\x81\x10\x15a\x1b'\
                             '\xc2Wa\x1b\xd2V[a\x1b\xcb\x81a\x1c&V[\x91Pa\x1b\xdeV[a\x1b\xdb\x81a\x1b\xe4V[\x91P[P\x91\x90PV[`\x00`\x00a\x1b\xf1\x83a)\xdcV[\x90P`b`\x02\n\x81\x10\x15a\x1c\x04Wa\x1c\x14'\
                             'V[a\x1c\r\x81a\x1cpV[\x91Pa\x1c V[a\x1c\x1d\x81a\x1c\xb2V[\x91P[P\x91\x90PV[`\x00`\x00a\x1c;a\x1c6\x84a)\xdcV[a)\xdcV[\x90P`b`\x02\n\x81\x10\x15a\x1cNW'\
                             'a\x1c^V[a\x1cW\x81a\x1c\xb2V[\x91Pa\x1cjV[a\x1cg\x81a\x1cpV[\x91P[P\x91\x90PV[`\x00`\x00a\x1c}\x83a)\xdcV[\x90P`c`\x02\n\x81\x10\x15a\x1c\x90Wa\x1c\xa0V['\
                             'a\x1c\x99\x81a\x1c\xfcV[\x91Pa\x1c\xacV[a\x1c\xa9\x81a\x1d\x88V[\x91P[P\x91\x90PV[`\x00`\x00a\x1c\xc7a\x1c\xc2\x84a)\xdcV[a)\xdcV[\x90P`c`\x02\n\x81\x10\x15a\x1c\xdaWa\x1c'\
                             '\xeaV[a\x1c\xe3\x81a\x1d\x88V[\x91Pa\x1c\xf6V[a\x1c\xf3\x81a\x1c\xfcV[\x91P[P\x91\x90PV[`\x00`\x00a\x1d\t\x83a)\xdcV[\x90P`d`\x02\n\x81\x10\x15a\x1d\x1cWa\x1d,V[a\x1d'\
                             '%\x81a\x1d\xd2V[\x91Pa\x1d8V[a\x1d5\x81a\x1e\x14V[\x91P[P\x91\x90PV[`\x00`\x00a\x1dSa\x1dN\x84a)\xdcV[a)\xdcV[\x90P`z`\x02\n\x81\x10\x15a\x1dfWa\x1dvV'\
                             "[a\x1do\x81a2iV[\x91Pa\x1d\x82V[a\x1d\x7f\x81a2'V[\x91P[P\x91\x90PV[`\x00`\x00a\x1d\x9da\x1d\x98\x84a)\xdcV[a)\xdcV[\x90P`d`\x02\n\x81\x10\x15a\x1d\xb0Wa"\
                             '\x1d\xc0V[a\x1d\xb9\x81a\x1e\x14V[\x91Pa\x1d\xccV[a\x1d\xc9\x81a\x1d\xd2V[\x91P[P\x91\x90PV[`\x00`\x00a\x1d\xdf\x83a)\xdcV[\x90P`e`\x02\n\x81\x10\x15a\x1d\xf2Wa\x1e\x02V[a'\
                             '\x1d\xfb\x81a\x1e^V[\x91Pa\x1e\x0eV[a\x1e\x0b\x81a\x1e\xa0V[\x91P[P\x91\x90PV[`\x00`\x00a\x1e)a\x1e$\x84a)\xdcV[a)\xdcV[\x90P`e`\x02\n\x81\x10\x15a\x1e<Wa\x1eL'\
                             'V[a\x1eE\x81a\x1e\xa0V[\x91Pa\x1eXV[a\x1eU\x81a\x1e^V[\x91P[P\x91\x90PV[`\x00`\x00a\x1ek\x83a)\xdcV[\x90P`f`\x02\n\x81\x10\x15a\x1e~Wa\x1e\x8eV[a\x1e\x87'\
                             '\x81a\x1e\xeaV[\x91Pa\x1e\x9aV[a\x1e\x97\x81a\x1f,V[\x91P[P\x91\x90PV[`\x00`\x00a\x1e\xb5a\x1e\xb0\x84a)\xdcV[a)\xdcV[\x90P`f`\x02\n\x81\x10\x15a\x1e\xc8Wa\x1e\xd8V['\
                             'a\x1e\xd1\x81a\x1f,V[\x91Pa\x1e\xe4V[a\x1e\xe1\x81a\x1e\xeaV[\x91P[P\x91\x90PV[`\x00`\x00a\x1e\xf7\x83a)\xdcV[\x90P`g`\x02\n\x81\x10\x15a\x1f\nWa\x1f\x1aV[a\x1f\x13\x81a'\
                             '\x1fvV[\x91Pa\x1f&V[a\x1f#\x81a\x1f\xb8V[\x91P[P\x91\x90PV[`\x00`\x00a\x1fAa\x1f<\x84a)\xdcV[a)\xdcV[\x90P`g`\x02\n\x81\x10\x15a\x1fTWa\x1fdV[a\x1f'\
                             ']\x81a\x1f\xb8V[\x91Pa\x1fpV[a\x1fm\x81a\x1fvV[\x91P[P\x91\x90PV[`\x00`\x00a\x1f\x83\x83a)\xdcV[\x90P`h`\x02\n\x81\x10\x15a\x1f\x96Wa\x1f\xa6V[a\x1f\x9f\x81a \x02'\
                             'V[\x91Pa\x1f\xb2V[a\x1f\xaf\x81a DV[\x91P[P\x91\x90PV[`\x00`\x00a\x1f\xcda\x1f\xc8\x84a)\xdcV[a)\xdcV[\x90P`h`\x02\n\x81\x10\x15a\x1f\xe0Wa\x1f\xf0V[a\x1f\xe9\x81'\
                             'a DV[\x91Pa\x1f\xfcV[a\x1f\xf9\x81a \x02V[\x91P[P\x91\x90PV[`\x00`\x00a \x0f\x83a)\xdcV[\x90P`i`\x02\n\x81\x10\x15a "Wa 2V[a +\x81a \x8eV['\
                             '\x91Pa >V[a ;\x81a \xd0V[\x91P[P\x91\x90PV[`\x00`\x00a Ya T\x84a)\xdcV[a)\xdcV[\x90P`i`\x02\n\x81\x10\x15a lWa |V[a u\x81a '\
                             '\xd0V[\x91Pa \x88V[a \x85\x81a \x8eV[\x91P[P\x91\x90PV[`\x00`\x00a \x9b\x83a)\xdcV[\x90P`j`\x02\n\x81\x10\x15a \xaeWa \xbeV[a \xb7\x81a!\x1aV[\x91P'\
                             'a \xcaV[a \xc7\x81a!\\V[\x91P[P\x91\x90PV[`\x00`\x00a \xe5a \xe0\x84a)\xdcV[a)\xdcV[\x90P`j`\x02\n\x81\x10\x15a \xf8Wa!\x08V[a!\x01\x81a!\\V'\
                             "[\x91Pa!\x14V[a!\x11\x81a!\x1aV[\x91P[P\x91\x90PV[`\x00`\x00a!'\x83a)\xdcV[\x90P`k`\x02\n\x81\x10\x15a!:Wa!JV[a!C\x81a!\xa6V[\x91Pa!"\
                             'VV[a!S\x81a!\xe8V[\x91P[P\x91\x90PV[`\x00`\x00a!qa!l\x84a)\xdcV[a)\xdcV[\x90P`k`\x02\n\x81\x10\x15a!\x84Wa!\x94V[a!\x8d\x81a!\xe8V[\x91'\
                             'Pa!\xa0V[a!\x9d\x81a!\xa6V[\x91P[P\x91\x90PV[`\x00`\x00a!\xb3\x83a)\xdcV[\x90P`l`\x02\n\x81\x10\x15a!\xc6Wa!\xd6V[a!\xcf\x81a"2V[\x91Pa!\xe2V'\
                             '[a!\xdf\x81a"tV[\x91P[P\x91\x90PV[`\x00`\x00a!\xfda!\xf8\x84a)\xdcV[a)\xdcV[\x90P`l`\x02\n\x81\x10\x15a"\x10Wa" V[a"\x19\x81a"tV[\x91Pa'\
                             '",V[a")\x81a"2V[\x91P[P\x91\x90PV[`\x00`\x00a"?\x83a)\xdcV[\x90P`m`\x02\n\x81\x10\x15a"RWa"bV[a"[\x81a"\xbeV[\x91Pa"nV[a'\
                             '"k\x81a#\x00V[\x91P[P\x91\x90PV[`\x00`\x00a"\x89a"\x84\x84a)\xdcV[a)\xdcV[\x90P`m`\x02\n\x81\x10\x15a"\x9cWa"\xacV[a"\xa5\x81a#\x00V[\x91Pa"\xb8'\
                             'V[a"\xb5\x81a"\xbeV[\x91P[P\x91\x90PV[`\x00`\x00a"\xcb\x83a)\xdcV[\x90P`n`\x02\n\x81\x10\x15a"\xdeWa"\xeeV[a"\xe7\x81a#JV[\x91Pa"\xfaV[a"\xf7'\
                             '\x81a#\x8cV[\x91P[P\x91\x90PV[`\x00`\x00a#\x15a#\x10\x84a)\xdcV[a)\xdcV[\x90P`n`\x02\n\x81\x10\x15a#(Wa#8V[a#1\x81a#\x8cV[\x91Pa#DV['\
                             'a#A\x81a#JV[\x91P[P\x91\x90PV[`\x00`\x00a#W\x83a)\xdcV[\x90P`o`\x02\n\x81\x10\x15a#jWa#zV[a#s\x81a#\xd6V[\x91Pa#\x86V[a#\x83\x81a'\
                             '$\x18V[\x91P[P\x91\x90PV[`\x00`\x00a#\xa1a#\x9c\x84a)\xdcV[a)\xdcV[\x90P`o`\x02\n\x81\x10\x15a#\xb4Wa#\xc4V[a#\xbd\x81a$\x18V[\x91Pa#\xd0V[a#'\
                             '\xcd\x81a#\xd6V[\x91P[P\x91\x90PV[`\x00`\x00a#\xe3\x83a)\xdcV[\x90P`p`\x02\n\x81\x10\x15a#\xf6Wa$\x06V[a#\xff\x81a$bV[\x91Pa$\x12V[a$\x0f\x81a$\xa4'\
                             'V[\x91P[P\x91\x90PV[`\x00`\x00a$-a$(\x84a)\xdcV[a)\xdcV[\x90P`p`\x02\n\x81\x10\x15a$@Wa$PV[a$I\x81a$\xa4V[\x91Pa$\\V[a$Y\x81'\
                             'a$bV[\x91P[P\x91\x90PV[`\x00`\x00a$o\x83a)\xdcV[\x90P`q`\x02\n\x81\x10\x15a$\x82Wa$\x92V[a$\x8b\x81a$\xeeV[\x91Pa$\x9eV[a$\x9b\x81a%0V['\
                             '\x91P[P\x91\x90PV[`\x00`\x00a$\xb9a$\xb4\x84a)\xdcV[a)\xdcV[\x90P`q`\x02\n\x81\x10\x15a$\xccWa$\xdcV[a$\xd5\x81a%0V[\x91Pa$\xe8V[a$\xe5\x81a$'\
                             "\xeeV[\x91P[P\x91\x90PV[`\x00`\x00a$\xfb\x83a)\xdcV[\x90P`r`\x02\n\x81\x10\x15a%\x0eWa%\x1eV[a%\x17\x81a%zV[\x91Pa%*V[a%'\x81a%\xbcV[\x91P"\
                             '[P\x91\x90PV[`\x00`\x00a%Ea%@\x84a)\xdcV[a)\xdcV[\x90P`r`\x02\n\x81\x10\x15a%XWa%hV[a%a\x81a%\xbcV[\x91Pa%tV[a%q\x81a%zV'\
                             '[\x91P[P\x91\x90PV[`\x00`\x00a%\x87\x83a)\xdcV[\x90P`s`\x02\n\x81\x10\x15a%\x9aWa%\xaaV[a%\xa3\x81a&\x06V[\x91Pa%\xb6V[a%\xb3\x81a&HV[\x91P[P'\
                             '\x91\x90PV[`\x00`\x00a%\xd1a%\xcc\x84a)\xdcV[a)\xdcV[\x90P`s`\x02\n\x81\x10\x15a%\xe4Wa%\xf4V[a%\xed\x81a&HV[\x91Pa&\x00V[a%\xfd\x81a&\x06V[\x91'\
                             'P[P\x91\x90PV[`\x00`\x00a&\x13\x83a)\xdcV[\x90P`t`\x02\n\x81\x10\x15a&&Wa&6V[a&/\x81a&\x92V[\x91Pa&BV[a&?\x81a&\xd4V[\x91P[P\x91\x90'\
                             'PV[`\x00`\x00a&]a&X\x84a)\xdcV[a)\xdcV[\x90P`t`\x02\n\x81\x10\x15a&pWa&\x80V[a&y\x81a&\xd4V[\x91Pa&\x8cV[a&\x89\x81a&\x92V[\x91P['\
                             "P\x91\x90PV[`\x00`\x00a&\x9f\x83a)\xdcV[\x90P`u`\x02\n\x81\x10\x15a&\xb2Wa&\xc2V[a&\xbb\x81a'\x1eV[\x91Pa&\xceV[a&\xcb\x81a'`V[\x91P[P\x91\x90PV"\
                             "[`\x00`\x00a&\xe9a&\xe4\x84a)\xdcV[a)\xdcV[\x90P`u`\x02\n\x81\x10\x15a&\xfcWa'\x0cV[a'\x05\x81a'`V[\x91Pa'\x18V[a'\x15\x81a'\x1eV[\x91P[P\x91"\
                             "\x90PV[`\x00`\x00a'+\x83a)\xdcV[\x90P`v`\x02\n\x81\x10\x15a'>Wa'NV[a'G\x81a'\xaaV[\x91Pa'ZV[a'W\x81a'\xecV[\x91P[P\x91\x90PV[`"\
                             "\x00`\x00a'ua'p\x84a)\xdcV[a)\xdcV[\x90P`v`\x02\n\x81\x10\x15a'\x88Wa'\x98V[a'\x91\x81a'\xecV[\x91Pa'\xa4V[a'\xa1\x81a'\xaaV[\x91P[P\x91\x90P"\
                             "V[`\x00`\x00a'\xb7\x83a)\xdcV[\x90P`w`\x02\n\x81\x10\x15a'\xcaWa'\xdaV[a'\xd3\x81a(6V[\x91Pa'\xe6V[a'\xe3\x81a(xV[\x91P[P\x91\x90PV[`\x00`"\
                             "\x00a(\x01a'\xfc\x84a)\xdcV[a)\xdcV[\x90P`w`\x02\n\x81\x10\x15a(\x14Wa($V[a(\x1d\x81a(xV[\x91Pa(0V[a(-\x81a(6V[\x91P[P\x91\x90PV["\
                             '`\x00`\x00a(C\x83a)\xdcV[\x90P`x`\x02\n\x81\x10\x15a(VWa(fV[a(_\x81a(\xc2V[\x91Pa(rV[a(o\x81a)\x04V[\x91P[P\x91\x90PV[`\x00`\x00a'\
                             '(\x8da(\x88\x84a)\xdcV[a)\xdcV[\x90P`x`\x02\n\x81\x10\x15a(\xa0Wa(\xb0V[a(\xa9\x81a)\x04V[\x91Pa(\xbcV[a(\xb9\x81a(\xc2V[\x91P[P\x91\x90PV[`\x00'\
                             '`\x00a(\xcf\x83a)\xdcV[\x90P`y`\x02\n\x81\x10\x15a(\xe2Wa(\xf2V[a(\xeb\x81a)NV[\x91Pa(\xfeV[a(\xfb\x81a\x1d>V[\x91P[P\x91\x90PV[`\x00`\x00a)\x19'\
                             'a)\x14\x84a)\xdcV[a)\xdcV[\x90P`y`\x02\n\x81\x10\x15a),Wa)<V[a)5\x81a\x1d>V[\x91Pa)HV[a)E\x81a)NV[\x91P[P\x91\x90PV[`\x00`\x00'\
                             "a)[\x83a)\xdcV[\x90P`z`\x02\n\x81\x10\x15a)nWa)~V[a)w\x81a2'V[\x91Pa)\x8aV[a)\x87\x81a2iV[\x91P[P\x91\x90PV[`\x00`\x00a)\x9d\x83a"\
                             ')\xdcV[\x90P`N`\x02\n\x81\x10\x15a)\xb0Wa)\xc0V[a)\xb9\x81a*\x7fV[\x91Pa)\xccV[a)\xc9\x81a*=V[\x91P[P\x91\x90PV[`\x00\x81\x90P\x91\x90PV[`\x00`\x00'\
                             '\x7fXQ\xf4-L\x95\x7f,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x90P\x82\x81\x02`\x01\x01\x91PP\x91\x90PV[`\x00a*\x1c\x82a)\xd2V[\x90P\x91\x90PV[`\x00a*'\
                             '6a*1\x83a)\xdcV[a)\xd2V[\x90P\x91\x90PV[`\x00`\x00a*J\x83a)\xdcV[\x90P`O`\x02\n\x81\x10\x15a*]Wa*mV[a*f\x81a*\xc9V[\x91Pa*yV[a'\
                             '*v\x81a+\x0bV[\x91P[P\x91\x90PV[`\x00`\x00a*\x94a*\x8f\x84a)\xdcV[a)\xdcV[\x90P`O`\x02\n\x81\x10\x15a*\xa7Wa*\xb7V[a*\xb0\x81a+\x0bV[\x91Pa*\xc3'\
                             'V[a*\xc0\x81a*\xc9V[\x91P[P\x91\x90PV[`\x00`\x00a*\xd6\x83a)\xdcV[\x90P`P`\x02\n\x81\x10\x15a*\xe9Wa*\xf9V[a*\xf2\x81a+UV[\x91Pa+\x05V[a+\x02'\
                             '\x81a+\x97V[\x91P[P\x91\x90PV[`\x00`\x00a+ a+\x1b\x84a)\xdcV[a)\xdcV[\x90P`P`\x02\n\x81\x10\x15a+3Wa+CV[a+<\x81a+\x97V[\x91Pa+OV['\
                             'a+L\x81a+UV[\x91P[P\x91\x90PV[`\x00`\x00a+b\x83a)\xdcV[\x90P`Q`\x02\n\x81\x10\x15a+uWa+\x85V[a+~\x81a+\xe1V[\x91Pa+\x91V[a+\x8e\x81a'\
                             ',#V[\x91P[P\x91\x90PV[`\x00`\x00a+\xaca+\xa7\x84a)\xdcV[a)\xdcV[\x90P`Q`\x02\n\x81\x10\x15a+\xbfWa+\xcfV[a+\xc8\x81a,#V[\x91Pa+\xdbV[a+'\
                             '\xd8\x81a+\xe1V[\x91P[P\x91\x90PV[`\x00`\x00a+\xee\x83a)\xdcV[\x90P`R`\x02\n\x81\x10\x15a,\x01Wa,\x11V[a,\n\x81a,mV[\x91Pa,\x1dV[a,\x1a\x81a,\xaf'\
                             'V[\x91P[P\x91\x90PV[`\x00`\x00a,8a,3\x84a)\xdcV[a)\xdcV[\x90P`R`\x02\n\x81\x10\x15a,KWa,[V[a,T\x81a,\xafV[\x91Pa,gV[a,d\x81'\
                             'a,mV[\x91P[P\x91\x90PV[`\x00`\x00a,z\x83a)\xdcV[\x90P`S`\x02\n\x81\x10\x15a,\x8dWa,\x9dV[a,\x96\x81a,\xf9V[\x91Pa,\xa9V[a,\xa6\x81a-;V['\
                             '\x91P[P\x91\x90PV[`\x00`\x00a,\xc4a,\xbf\x84a)\xdcV[a)\xdcV[\x90P`S`\x02\n\x81\x10\x15a,\xd7Wa,\xe7V[a,\xe0\x81a-;V[\x91Pa,\xf3V[a,\xf0\x81a,'\
                             '\xf9V[\x91P[P\x91\x90PV[`\x00`\x00a-\x06\x83a)\xdcV[\x90P`T`\x02\n\x81\x10\x15a-\x19Wa-)V[a-"\x81a-\x85V[\x91Pa-5V[a-2\x81a-\xc7V[\x91P'\
                             '[P\x91\x90PV[`\x00`\x00a-Pa-K\x84a)\xdcV[a)\xdcV[\x90P`T`\x02\n\x81\x10\x15a-cWa-sV[a-l\x81a-\xc7V[\x91Pa-\x7fV[a-|\x81a-\x85V'\
                             '[\x91P[P\x91\x90PV[`\x00`\x00a-\x92\x83a)\xdcV[\x90P`U`\x02\n\x81\x10\x15a-\xa5Wa-\xb5V[a-\xae\x81a.\x11V[\x91Pa-\xc1V[a-\xbe\x81a.SV[\x91P[P'\
                             '\x91\x90PV[`\x00`\x00a-\xdca-\xd7\x84a)\xdcV[a)\xdcV[\x90P`U`\x02\n\x81\x10\x15a-\xefWa-\xffV[a-\xf8\x81a.SV[\x91Pa.\x0bV[a.\x08\x81a.\x11V[\x91'\
                             'P[P\x91\x90PV[`\x00`\x00a.\x1e\x83a)\xdcV[\x90P`V`\x02\n\x81\x10\x15a.1Wa.AV[a.:\x81a.\x9dV[\x91Pa.MV[a.J\x81a.\xdfV[\x91P[P\x91\x90'\
                             'PV[`\x00`\x00a.ha.c\x84a)\xdcV[a)\xdcV[\x90P`V`\x02\n\x81\x10\x15a.{Wa.\x8bV[a.\x84\x81a.\xdfV[\x91Pa.\x97V[a.\x94\x81a.\x9dV[\x91P['\
                             'P\x91\x90PV[`\x00`\x00a.\xaa\x83a)\xdcV[\x90P`W`\x02\n\x81\x10\x15a.\xbdWa.\xcdV[a.\xc6\x81a/)V[\x91Pa.\xd9V[a.\xd6\x81a/kV[\x91P[P\x91\x90PV'\
                             '[`\x00`\x00a.\xf4a.\xef\x84a)\xdcV[a)\xdcV[\x90P`W`\x02\n\x81\x10\x15a/\x07Wa/\x17V[a/\x10\x81a/kV[\x91Pa/#V[a/ \x81a/)V[\x91P[P\x91'\
                             '\x90PV[`\x00`\x00a/6\x83a)\xdcV[\x90P`X`\x02\n\x81\x10\x15a/IWa/YV[a/R\x81a/\xb5V[\x91Pa/eV[a/b\x81a/\xf7V[\x91P[P\x91\x90PV[`'\
                             '\x00`\x00a/\x80a/{\x84a)\xdcV[a)\xdcV[\x90P`X`\x02\n\x81\x10\x15a/\x93Wa/\xa3V[a/\x9c\x81a/\xf7V[\x91Pa/\xafV[a/\xac\x81a/\xb5V[\x91P[P\x91\x90P'\
                             'V[`\x00`\x00a/\xc2\x83a)\xdcV[\x90P`Y`\x02\n\x81\x10\x15a/\xd5Wa/\xe5V[a/\xde\x81a0AV[\x91Pa/\xf1V[a/\xee\x81a0\x83V[\x91P[P\x91\x90PV[`\x00`'\
                             '\x00a0\x0ca0\x07\x84a)\xdcV[a)\xdcV[\x90P`Y`\x02\n\x81\x10\x15a0\x1fWa0/V[a0(\x81a0\x83V[\x91Pa0;V[a08\x81a0AV[\x91P[P\x91\x90PV['\
                             '`\x00`\x00a0N\x83a)\xdcV[\x90P`Z`\x02\n\x81\x10\x15a0aWa0qV[a0j\x81a0\xcdV[\x91Pa0}V[a0z\x81a1\x0fV[\x91P[P\x91\x90PV[`\x00`\x00a'\
                             '0\x98a0\x93\x84a)\xdcV[a)\xdcV[\x90P`Z`\x02\n\x81\x10\x15a0\xabWa0\xbbV[a0\xb4\x81a1\x0fV[\x91Pa0\xc7V[a0\xc4\x81a0\xcdV[\x91P[P\x91\x90PV[`\x00'\
                             '`\x00a0\xda\x83a)\xdcV[\x90P`[`\x02\n\x81\x10\x15a0\xedWa0\xfdV[a0\xf6\x81a1YV[\x91Pa1\tV[a1\x06\x81a1\x9bV[\x91P[P\x91\x90PV[`\x00`\x00a1$'\
                             'a1\x1f\x84a)\xdcV[a)\xdcV[\x90P`[`\x02\n\x81\x10\x15a17Wa1GV[a1@\x81a1\x9bV[\x91Pa1SV[a1P\x81a1YV[\x91P[P\x91\x90PV[`\x00`\x00'\
                             'a1f\x83a)\xdcV[\x90P`\\`\x02\n\x81\x10\x15a1yWa1\x89V[a1\x82\x81a1\xe5V[\x91Pa1\x95V[a1\x92\x81a\x19jV[\x91P[P\x91\x90PV[`\x00`\x00a1\xb0a1'\
                             '\xab\x84a)\xdcV[a)\xdcV[\x90P`\\`\x02\n\x81\x10\x15a1\xc3Wa1\xd3V[a1\xcc\x81a\x19jV[\x91Pa1\xdfV[a1\xdc\x81a1\xe5V[\x91P[P\x91\x90PV[`\x00`\x00a1'\
                             '\xf2\x83a)\xdcV[\x90P`]`\x02\n\x81\x10\x15a2\x05Wa2\x15V[a2\x0e\x81a\x19\xb4V[\x91Pa2!V[a2\x1e\x81a\x19\xf6V[\x91P[P\x91\x90PV[`\x00`\x00a24\x83a)\xdc'\
                             'V[\x90P`{`\x02\n\x81\x10\x15a2GWa2WV[a2P\x81a2\xb3V[\x91Pa2cV[a2`\x81a2\xf5V[\x91P[P\x91\x90PV[`\x00`\x00a2~a2y\x84a)\xdcV['\
                             'a)\xdcV[\x90P`{`\x02\n\x81\x10\x15a2\x91Wa2\xa1V[a2\x9a\x81a2\xf5V[\x91Pa2\xadV[a2\xaa\x81a2\xb3V[\x91P[P\x91\x90PV[`\x00`\x00a2\xc0\x83a)\xdcV['\
                             '\x90P`|`\x02\n\x81\x10\x15a2\xd3Wa2\xe3V[a2\xdc\x81a3?V[\x91Pa2\xefV[a2\xec\x81a3\x81V[\x91P[P\x91\x90PV[`\x00`\x00a3\na3\x05\x84a)\xdcV[a)'\
                             '\xdcV[\x90P`|`\x02\n\x81\x10\x15a3\x1dWa3-V[a3&\x81a3\x81V[\x91Pa39V[a36\x81a3?V[\x91P[P\x91\x90PV[`\x00`\x00a3L\x83a)\xdcV[\x90P'\
                             '`}`\x02\n\x81\x10\x15a3_Wa3oV[a3h\x81a3\xcbV[\x91Pa3{V[a3x\x81a4\rV[\x91P[P\x91\x90PV[`\x00`\x00a3\x96a3\x91\x84a)\xdcV[a)\xdcV'\
                             '[\x90P`}`\x02\n\x81\x10\x15a3\xa9Wa3\xb9V[a3\xb2\x81a4\rV[\x91Pa3\xc5V[a3\xc2\x81a3\xcbV[\x91P[P\x91\x90PV[`\x00`\x00a3\xd8\x83a)\xdcV[\x90P`~'\
                             '`\x02\n\x81\x10\x15a3\xebWa3\xfbV[a3\xf4\x81a4WV[\x91Pa4\x07V[a4\x04\x81a4\x99V[\x91P[P\x91\x90PV[`\x00`\x00a4"a4\x1d\x84a)\xdcV[a)\xdcV[\x90'\
                             'P`~`\x02\n\x81\x10\x15a45Wa4EV[a4>\x81a4\x99V[\x91Pa4QV[a4N\x81a4WV[\x91P[P\x91\x90PV[`\x00`\x00a4d\x83a)\xdcV[\x90P`\x7f`\x02'\
                             '\n\x81\x10\x15a4wWa4\x87V[a4\x80\x81a4\xe3V[\x91Pa4\x93V[a4\x90\x81a5%V[\x91P[P\x91\x90PV[`\x00`\x00a4\xaea4\xa9\x84a)\xdcV[a)\xdcV[\x90P`'\
                             '\x7f`\x02\n\x81\x10\x15a4\xc1Wa4\xd1V[a4\xca\x81a5%V[\x91Pa4\xddV[a4\xda\x81a4\xe3V[\x91P[P\x91\x90PV[`\x00`\x00a4\xf0\x83a)\xdcV[\x90P`\x80`\x02\n\x81'\
                             '\x10\x15a5\x03Wa5\x13V[a5\x0c\x81a5oV[\x91Pa5\x1fV[a5\x1c\x81a5\xb1V[\x91P[P\x91\x90PV[`\x00`\x00a5:a55\x84a)\xdcV[a)\xdcV[\x90P`\x80`'\
                             '\x02\n\x81\x10\x15a5MWa5]V[a5V\x81a5\xb1V[\x91Pa5iV[a5f\x81a5oV[\x91P[P\x91\x90PV[`\x00`\x00a5|\x83a)\xdcV[\x90P`\x81`\x02\n\x81\x10\x15'\
                             'a5\x8fWa5\x9fV[a5\x98\x81a5\xfbV[\x91Pa5\xabV[a5\xa8\x81a6=V[\x91P[P\x91\x90PV[`\x00`\x00a5\xc6a5\xc1\x84a)\xdcV[a)\xdcV[\x90P`\x81`\x02\n'\
                             '\x81\x10\x15a5\xd9Wa5\xe9V[a5\xe2\x81a6=V[\x91Pa5\xf5V[a5\xf2\x81a5\xfbV[\x91P[P\x91\x90PV[`\x00`\x00a6\x08\x83a)\xdcV[\x90P`\x82`\x02\n\x81\x10\x15a6'\
                             '\x1bWa6+V[a6$\x81a6\x87V[\x91Pa67V[a64\x81a6\xc9V[\x91P[P\x91\x90PV[`\x00`\x00a6Ra6M\x84a)\xdcV[a)\xdcV[\x90P`\x82`\x02\n\x81\x10'\
                             '\x15a6eWa6uV[a6n\x81a6\xc9V[\x91Pa6\x81V[a6~\x81a6\x87V[\x91P[P\x91\x90PV[`\x00`\x00a6\x94\x83a)\xdcV[\x90P`\x83`\x02\n\x81\x10\x15a6\xa7W'\
                             'a6\xb7V[a6\xb0\x81a7\x13V[\x91Pa6\xc3V[a6\xc0\x81a7UV[\x91P[P\x91\x90PV[`\x00`\x00a6\xdea6\xd9\x84a)\xdcV[a)\xdcV[\x90P`\x83`\x02\n\x81\x10\x15a'\
                             '6\xf1Wa7\x01V[a6\xfa\x81a7UV[\x91Pa7\rV[a7\n\x81a7\x13V[\x91P[P\x91\x90PV[`\x00`\x00a7 \x83a)\xdcV[\x90P`\x84`\x02\n\x81\x10\x15a73Wa7'\
                             'CV[a7<\x81a7\x9fV[\x91Pa7OV[a7L\x81a7\xe1V[\x91P[P\x91\x90PV[`\x00`\x00a7ja7e\x84a)\xdcV[a)\xdcV[\x90P`\x84`\x02\n\x81\x10\x15a7}'\
                             'Wa7\x8dV[a7\x86\x81a7\xe1V[\x91Pa7\x99V[a7\x96\x81a7\x9fV[\x91P[P\x91\x90PV[`\x00`\x00a7\xac\x83a)\xdcV[\x90P`\x85`\x02\n\x81\x10\x15a7\xbfWa7\xcfV'\
                             '[a7\xc8\x81a8+V[\x91Pa7\xdbV[a7\xd8\x81a8mV[\x91P[P\x91\x90PV[`\x00`\x00a7\xf6a7\xf1\x84a)\xdcV[a)\xdcV[\x90P`\x85`\x02\n\x81\x10\x15a8\tWa'\
                             '8\x19V[a8\x12\x81a8mV[\x91Pa8%V[a8"\x81a8+V[\x91P[P\x91\x90PV[`\x00`\x00a88\x83a)\xdcV[\x90P`\x86`\x02\n\x81\x10\x15a8KWa8[V[a'\
                             '8T\x81a8\xb7V[\x91Pa8gV[a8d\x81a8\xf9V[\x91P[P\x91\x90PV[`\x00`\x00a8\x82a8}\x84a)\xdcV[a)\xdcV[\x90P`\x86`\x02\n\x81\x10\x15a8\x95Wa8\xa5'\
                             'V[a8\x9e\x81a8\xf9V[\x91Pa8\xb1V[a8\xae\x81a8\xb7V[\x91P[P\x91\x90PV[`\x00`\x00a8\xc4\x83a)\xdcV[\x90P`\x87`\x02\n\x81\x10\x15a8\xd7Wa8\xe7V[a8\xe0'\
                             '\x81a9CV[\x91Pa8\xf3V[a8\xf0\x81a9\x85V[\x91P[P\x91\x90PV[`\x00`\x00a9\x0ea9\t\x84a)\xdcV[a)\xdcV[\x90P`\x87`\x02\n\x81\x10\x15a9!Wa91V['\
                             'a9*\x81a9\x85V[\x91Pa9=V[a9:\x81a9CV[\x91P[P\x91\x90PV[`\x00`\x00a9P\x83a)\xdcV[\x90P`\x88`\x02\n\x81\x10\x15a9cWa9sV[a9l\x81a'\
                             '9\xcfV[\x91Pa9\x7fV[a9|\x81a:\x11V[\x91P[P\x91\x90PV[`\x00`\x00a9\x9aa9\x95\x84a)\xdcV[a)\xdcV[\x90P`\x88`\x02\n\x81\x10\x15a9\xadWa9\xbdV[a9'\
                             '\xb6\x81a:\x11V[\x91Pa9\xc9V[a9\xc6\x81a9\xcfV[\x91P[P\x91\x90PV[`\x00`\x00a9\xdc\x83a)\xdcV[\x90P`\x89`\x02\n\x81\x10\x15a9\xefWa9\xffV[a9\xf8\x81a:['\
                             'V[\x91Pa:\x0bV[a:\x08\x81a:\x9dV[\x91P[P\x91\x90PV[`\x00`\x00a:&a:!\x84a)\xdcV[a)\xdcV[\x90P`\x89`\x02\n\x81\x10\x15a:9Wa:IV[a:B\x81'\
                             'a:\x9dV[\x91Pa:UV[a:R\x81a:[V[\x91P[P\x91\x90PV[`\x00`\x00a:h\x83a)\xdcV[\x90P`\x8a`\x02\n\x81\x10\x15a:{Wa:\x8bV[a:\x84\x81a:\xe7V['\
                             '\x91Pa:\x97V[a:\x94\x81a;)V[\x91P[P\x91\x90PV[`\x00`\x00a:\xb2a:\xad\x84a)\xdcV[a)\xdcV[\x90P`\x8a`\x02\n\x81\x10\x15a:\xc5Wa:\xd5V[a:\xce\x81a;'\
                             ')V[\x91Pa:\xe1V[a:\xde\x81a:\xe7V[\x91P[P\x91\x90PV[`\x00`\x00a:\xf4\x83a)\xdcV[\x90P`\x8b`\x02\n\x81\x10\x15a;\x07Wa;\x17V[a;\x10\x81a;sV[\x91P'\
                             'a;#V[a; \x81a;\xb5V[\x91P[P\x91\x90PV[`\x00`\x00a;>a;9\x84a)\xdcV[a)\xdcV[\x90P`\x8b`\x02\n\x81\x10\x15a;QWa;aV[a;Z\x81a;\xb5V'\
                             '[\x91Pa;mV[a;j\x81a;sV[\x91P[P\x91\x90PV[`\x00`\x00a;\x80\x83a)\xdcV[\x90P`\x8c`\x02\n\x81\x10\x15a;\x93Wa;\xa3V[a;\x9c\x81a;\xffV[\x91Pa;'\
                             '\xafV[a;\xac\x81a<AV[\x91P[P\x91\x90PV[`\x00`\x00a;\xcaa;\xc5\x84a)\xdcV[a)\xdcV[\x90P`\x8c`\x02\n\x81\x10\x15a;\xddWa;\xedV[a;\xe6\x81a<AV[\x91'\
                             'Pa;\xf9V[a;\xf6\x81a;\xffV[\x91P[P\x91\x90PV[`\x00`\x00a<\x0c\x83a)\xdcV[\x90P`\x8d`\x02\n\x81\x10\x15a<\x1fWa</V[a<(\x81a<\x8bV[\x91Pa<;V'\
                             '[a<8\x81a<\xcdV[\x91P[P\x91\x90PV[`\x00`\x00a<Va<Q\x84a)\xdcV[a)\xdcV[\x90P`\x8d`\x02\n\x81\x10\x15a<iWa<yV[a<r\x81a<\xcdV[\x91Pa'\
                             '<\x85V[a<\x82\x81a<\x8bV[\x91P[P\x91\x90PV[`\x00`\x00a<\x98\x83a)\xdcV[\x90P`\x8e`\x02\n\x81\x10\x15a<\xabWa<\xbbV[a<\xb4\x81a=\x17V[\x91Pa<\xc7V[a'\
                             '<\xc4\x81a=YV[\x91P[P\x91\x90PV[`\x00`\x00a<\xe2a<\xdd\x84a)\xdcV[a)\xdcV[\x90P`\x8e`\x02\n\x81\x10\x15a<\xf5Wa=\x05V[a<\xfe\x81a=YV[\x91Pa=\x11'\
                             'V[a=\x0e\x81a=\x17V[\x91P[P\x91\x90PV[`\x00`\x00a=$\x83a)\xdcV[\x90P`\x8f`\x02\n\x81\x10\x15a=7Wa=GV[a=@\x81a=\xa3V[\x91Pa=SV[a=P'\
                             '\x81a=\xe5V[\x91P[P\x91\x90PV[`\x00`\x00a=na=i\x84a)\xdcV[a)\xdcV[\x90P`\x8f`\x02\n\x81\x10\x15a=\x81Wa=\x91V[a=\x8a\x81a=\xe5V[\x91Pa=\x9dV['\
                             'a=\x9a\x81a=\xa3V[\x91P[P\x91\x90PV[`\x00`\x00a=\xb0\x83a)\xdcV[\x90P`\x90`\x02\n\x81\x10\x15a=\xc3Wa=\xd3V[a=\xcc\x81a>/V[\x91Pa=\xdfV[a=\xdc\x81a'\
                             '>qV[\x91P[P\x91\x90PV[`\x00`\x00a=\xfaa=\xf5\x84a)\xdcV[a)\xdcV[\x90P`\x90`\x02\n\x81\x10\x15a>\rWa>\x1dV[a>\x16\x81a>qV[\x91Pa>)V[a>'\
                             '&\x81a>/V[\x91P[P\x91\x90PV[`\x00`\x00a><\x83a)\xdcV[\x90P`\x91`\x02\n\x81\x10\x15a>OWa>_V[a>X\x81a>\xbbV[\x91Pa>kV[a>h\x81a>\xfd'\
                             'V[\x91P[P\x91\x90PV[`\x00`\x00a>\x86a>\x81\x84a)\xdcV[a)\xdcV[\x90P`\x91`\x02\n\x81\x10\x15a>\x99Wa>\xa9V[a>\xa2\x81a>\xfdV[\x91Pa>\xb5V[a>\xb2\x81'\
                             'a>\xbbV[\x91P[P\x91\x90PV[`\x00`\x00a>\xc8\x83a)\xdcV[\x90P`\x92`\x02\n\x81\x10\x15a>\xdbWa>\xebV[a>\xe4\x81a?GV[\x91Pa>\xf7V[a>\xf4\x81a?\x89V['\
                             '\x91P[P\x91\x90PV[`\x00`\x00a?\x12a?\r\x84a)\xdcV[a)\xdcV[\x90P`\x92`\x02\n\x81\x10\x15a?%Wa?5V[a?.\x81a?\x89V[\x91Pa?AV[a?>\x81a?'\
                             'GV[\x91P[P\x91\x90PV[`\x00`\x00a?T\x83a)\xdcV[\x90P`\x93`\x02\n\x81\x10\x15a?gWa?wV[a?p\x81a?\xd3V[\x91Pa?\x83V[a?\x80\x81a@\x15V[\x91P'\
                             '[P\x91\x90PV[`\x00`\x00a?\x9ea?\x99\x84a)\xdcV[a)\xdcV[\x90P`\x93`\x02\n\x81\x10\x15a?\xb1Wa?\xc1V[a?\xba\x81a@\x15V[\x91Pa?\xcdV[a?\xca\x81a?\xd3V'\
                             '[\x91P[P\x91\x90PV[`\x00`\x00a?\xe0\x83a)\xdcV[\x90P`\x94`\x02\n\x81\x10\x15a?\xf3Wa@\x03V[a?\xfc\x81a@_V[\x91Pa@\x0fV[a@\x0c\x81a@\xa1V[\x91P[P'\
                             '\x91\x90PV[`\x00`\x00a@*a@%\x84a)\xdcV[a)\xdcV[\x90P`\x94`\x02\n\x81\x10\x15a@=Wa@MV[a@F\x81a@\xa1V[\x91Pa@YV[a@V\x81a@_V[\x91'\
                             'P[P\x91\x90PV[`\x00`\x00a@l\x83a)\xdcV[\x90P`\x95`\x02\n\x81\x10\x15a@\x7fWa@\x8fV[a@\x88\x81a@\xebV[\x91Pa@\x9bV[a@\x98\x81aA-V[\x91P[P\x91\x90'\
                             'PV[`\x00`\x00a@\xb6a@\xb1\x84a)\xdcV[a)\xdcV[\x90P`\x95`\x02\n\x81\x10\x15a@\xc9Wa@\xd9V[a@\xd2\x81aA-V[\x91Pa@\xe5V[a@\xe2\x81a@\xebV[\x91P['\
                             "P\x91\x90PV[`\x00`\x00a@\xf8\x83a)\xdcV[\x90P`\x96`\x02\n\x81\x10\x15aA\x0bWaA\x1bV[aA\x14\x81aAwV[\x91PaA'V[aA$\x81aA\xb9V[\x91P[P\x91\x90PV"\
                             '[`\x00`\x00aABaA=\x84a)\xdcV[a)\xdcV[\x90P`\x96`\x02\n\x81\x10\x15aAUWaAeV[aA^\x81aA\xb9V[\x91PaAqV[aAn\x81aAwV[\x91P[P\x91'\
                             '\x90PV[`\x00`\x00aA\x84\x83a)\xdcV[\x90P`\x97`\x02\n\x81\x10\x15aA\x97WaA\xa7V[aA\xa0\x81aB\x03V[\x91PaA\xb3V[aA\xb0\x81aBEV[\x91P[P\x91\x90PV[`'\
                             '\x00`\x00aA\xceaA\xc9\x84a)\xdcV[a)\xdcV[\x90P`\x97`\x02\n\x81\x10\x15aA\xe1WaA\xf1V[aA\xea\x81aBEV[\x91PaA\xfdV[aA\xfa\x81aB\x03V[\x91P[P\x91\x90P'\
                             'V[`\x00`\x00aB\x10\x83a)\xdcV[\x90P`\x98`\x02\n\x81\x10\x15aB#WaB3V[aB,\x81aB\x8fV[\x91PaB?V[aB<\x81aB\xd1V[\x91P[P\x91\x90PV[`\x00`'\
                             '\x00aBZaBU\x84a)\xdcV[a)\xdcV[\x90P`\x98`\x02\n\x81\x10\x15aBmWaB}V[aBv\x81aB\xd1V[\x91PaB\x89V[aB\x86\x81aB\x8fV[\x91P[P\x91\x90PV['\
                             '`\x00`\x00aB\x9c\x83a)\xdcV[\x90P`\x99`\x02\n\x81\x10\x15aB\xafWaB\xbfV[aB\xb8\x81aC\x1bV[\x91PaB\xcbV[aB\xc8\x81aC]V[\x91P[P\x91\x90PV[`\x00`\x00a'\
                             'B\xe6aB\xe1\x84a)\xdcV[a)\xdcV[\x90P`\x99`\x02\n\x81\x10\x15aB\xf9WaC\tV[aC\x02\x81aC]V[\x91PaC\x15V[aC\x12\x81aC\x1bV[\x91P[P\x91\x90PV[`\x00'\
                             '`\x00aC(\x83a)\xdcV[\x90P`\x9a`\x02\n\x81\x10\x15aC;WaCKV[aCD\x81aC\xa7V[\x91PaCWV[aCT\x81aC\xe9V[\x91P[P\x91\x90PV[`\x00`\x00aCr'\
                             'aCm\x84a)\xdcV[a)\xdcV[\x90P`\x9a`\x02\n\x81\x10\x15aC\x85WaC\x95V[aC\x8e\x81aC\xe9V[\x91PaC\xa1V[aC\x9e\x81aC\xa7V[\x91P[P\x91\x90PV[`\x00`\x00'\
                             'aC\xb4\x83a)\xdcV[\x90P`\x9b`\x02\n\x81\x10\x15aC\xc7WaC\xd7V[aC\xd0\x81aD3V[\x91PaC\xe3V[aC\xe0\x81aDuV[\x91P[P\x91\x90PV[`\x00`\x00aC\xfeaC'\
                             '\xf9\x84a)\xdcV[a)\xdcV[\x90P`\x9b`\x02\n\x81\x10\x15aD\x11WaD!V[aD\x1a\x81aDuV[\x91PaD-V[aD*\x81aD3V[\x91P[P\x91\x90PV[`\x00`\x00aD'\
                             '@\x83a)\xdcV[\x90P`\x9c`\x02\n\x81\x10\x15aDSWaDcV[aD\\\x81aD\xbfV[\x91PaDoV[aDl\x81aE\x01V[\x91P[P\x91\x90PV[`\x00`\x00aD\x8aaD\x85\x84'\
                             'a)\xdcV[a)\xdcV[\x90P`\x9c`\x02\n\x81\x10\x15aD\x9dWaD\xadV[aD\xa6\x81aE\x01V[\x91PaD\xb9V[aD\xb6\x81aD\xbfV[\x91P[P\x91\x90PV[`\x00`\x00aD\xcc\x83'\
                             'a)\xdcV[\x90P`\x9d`\x02\n\x81\x10\x15aD\xdfWaD\xefV[aD\xe8\x81aEKV[\x91PaD\xfbV[aD\xf8\x81aE\x8dV[\x91P[P\x91\x90PV[`\x00`\x00aE\x16aE\x11\x84a)'\
                             '\xdcV[a)\xdcV[\x90P`\x9d`\x02\n\x81\x10\x15aE)WaE9V[aE2\x81aE\x8dV[\x91PaEEV[aEB\x81aEKV[\x91P[P\x91\x90PV[`\x00`\x00aEX\x83a)'\
                             '\xdcV[\x90P`\x9e`\x02\n\x81\x10\x15aEkWaE{V[aEt\x81aE\xd7V[\x91PaE\x87V[aE\x84\x81aF\x19V[\x91P[P\x91\x90PV[`\x00`\x00aE\xa2aE\x9d\x84a)\xdcV'\
                             '[a)\xdcV[\x90P`\x9e`\x02\n\x81\x10\x15aE\xb5WaE\xc5V[aE\xbe\x81aF\x19V[\x91PaE\xd1V[aE\xce\x81aE\xd7V[\x91P[P\x91\x90PV[`\x00`\x00aE\xe4\x83a)\xdcV'\
                             '[\x90P`\x9f`\x02\n\x81\x10\x15aE\xf7WaF\x07V[aF\x00\x81aFcV[\x91PaF\x13V[aF\x10\x81aF\xa5V[\x91P[P\x91\x90PV[`\x00`\x00aF.aF)\x84a)\xdcV[a'\
                             ')\xdcV[\x90P`\x9f`\x02\n\x81\x10\x15aFAWaFQV[aFJ\x81aF\xa5V[\x91PaF]V[aFZ\x81aFcV[\x91P[P\x91\x90PV[`\x00`\x00aFp\x83a)\xdcV[\x90'\
                             'P`\xa0`\x02\n\x81\x10\x15aF\x83WaF\x93V[aF\x8c\x81aF\xefV[\x91PaF\x9fV[aF\x9c\x81aG1V[\x91P[P\x91\x90PV[`\x00`\x00aF\xbaaF\xb5\x84a)\xdcV[a)\xdc'\
                             'V[\x90P`\xa0`\x02\n\x81\x10\x15aF\xcdWaF\xddV[aF\xd6\x81aG1V[\x91PaF\xe9V[aF\xe6\x81aF\xefV[\x91P[P\x91\x90PV[`\x00`\x00aF\xfc\x83a)\xdcV[\x90P`'\
                             '\xa1`\x02\n\x81\x10\x15aG\x0fWaG\x1fV[aG\x18\x81aG{V[\x91PaG+V[aG(\x81aG\xbdV[\x91P[P\x91\x90PV[`\x00`\x00aGFaGA\x84a)\xdcV[a)\xdcV['\
                             '\x90P`\xa1`\x02\n\x81\x10\x15aGYWaGiV[aGb\x81aG\xbdV[\x91PaGuV[aGr\x81aG{V[\x91P[P\x91\x90PV[`\x00`\x00aG\x88\x83a)\xdcV[\x90P`\xa2`'\
                             '\x02\n\x81\x10\x15aG\x9bWaG\xabV[aG\xa4\x81aH\x07V[\x91PaG\xb7V[aG\xb4\x81aHIV[\x91P[P\x91\x90PV[`\x00`\x00aG\xd2aG\xcd\x84a)\xdcV[a)\xdcV[\x90P'\
                             '`\xa2`\x02\n\x81\x10\x15aG\xe5WaG\xf5V[aG\xee\x81aHIV[\x91PaH\x01V[aG\xfe\x81aH\x07V[\x91P[P\x91\x90PV[`\x00`\x00aH\x14\x83a)\xdcV[\x90P`\xa3`\x02\n'\
                             "\x81\x10\x15aH'WaH7V[aH0\x81aH\x93V[\x91PaHCV[aH@\x81aH\xd5V[\x91P[P\x91\x90PV[`\x00`\x00aH^aHY\x84a)\xdcV[a)\xdcV[\x90P`\xa3"\
                             '`\x02\n\x81\x10\x15aHqWaH\x81V[aHz\x81aH\xd5V[\x91PaH\x8dV[aH\x8a\x81aH\x93V[\x91P[P\x91\x90PV[`\x00`\x00aH\xa0\x83a)\xdcV[\x90P`\xa4`\x02\n\x81\x10'\
                             '\x15aH\xb3WaH\xc3V[aH\xbc\x81aI\x1fV[\x91PaH\xcfV[aH\xcc\x81aIaV[\x91P[P\x91\x90PV[`\x00`\x00aH\xeaaH\xe5\x84a)\xdcV[a)\xdcV[\x90P`\xa4`\x02'\
                             '\n\x81\x10\x15aH\xfdWaI\rV[aI\x06\x81aIaV[\x91PaI\x19V[aI\x16\x81aI\x1fV[\x91P[P\x91\x90PV[`\x00`\x00aI,\x83a)\xdcV[\x90P`\xa5`\x02\n\x81\x10\x15a'\
                             'I?WaIOV[aIH\x81aI\xabV[\x91PaI[V[aIX\x81aI\xedV[\x91P[P\x91\x90PV[`\x00`\x00aIvaIq\x84a)\xdcV[a)\xdcV[\x90P`\xa5`\x02\n\x81'\
                             '\x10\x15aI\x89WaI\x99V[aI\x92\x81aI\xedV[\x91PaI\xa5V[aI\xa2\x81aI\xabV[\x91P[P\x91\x90PV[`\x00`\x00aI\xb8\x83a)\xdcV[\x90P`\xa6`\x02\n\x81\x10\x15aI\xcb'\
                             'WaI\xdbV[aI\xd4\x81aJ7V[\x91PaI\xe7V[aI\xe4\x81aJyV[\x91P[P\x91\x90PV[`\x00`\x00aJ\x02aI\xfd\x84a)\xdcV[a)\xdcV[\x90P`\xa6`\x02\n\x81\x10\x15'\
                             'aJ\x15WaJ%V[aJ\x1e\x81aJyV[\x91PaJ1V[aJ.\x81aJ7V[\x91P[P\x91\x90PV[`\x00`\x00aJD\x83a)\xdcV[\x90P`\xa7`\x02\n\x81\x10\x15aJWWa'\
                             'JgV[aJ`\x81aJ\xc3V[\x91PaJsV[aJp\x81aK\x05V[\x91P[P\x91\x90PV[`\x00`\x00aJ\x8eaJ\x89\x84a)\xdcV[a)\xdcV[\x90P`\xa7`\x02\n\x81\x10\x15aJ'\
                             '\xa1WaJ\xb1V[aJ\xaa\x81aK\x05V[\x91PaJ\xbdV[aJ\xba\x81aJ\xc3V[\x91P[P\x91\x90PV[`\x00`\x00aJ\xd0\x83a)\xdcV[\x90P`\xa8`\x02\n\x81\x10\x15aJ\xe3WaJ\xf3'\
                             'V[aJ\xec\x81aKOV[\x91PaJ\xffV[aJ\xfc\x81aK\x91V[\x91P[P\x91\x90PV[`\x00`\x00aK\x1aaK\x15\x84a)\xdcV[a)\xdcV[\x90P`\xa8`\x02\n\x81\x10\x15aK-W'\
                             'aK=V[aK6\x81aK\x91V[\x91PaKIV[aKF\x81aKOV[\x91P[P\x91\x90PV[`\x00`\x00aK\\\x83a)\xdcV[\x90P`\xa9`\x02\n\x81\x10\x15aKoWaK\x7fV['\
                             'aKx\x81aK\xdbV[\x91PaK\x8bV[aK\x88\x81aL\x1dV[\x91P[P\x91\x90PV[`\x00`\x00aK\xa6aK\xa1\x84a)\xdcV[a)\xdcV[\x90P`\xa9`\x02\n\x81\x10\x15aK\xb9WaK'\
                             '\xc9V[aK\xc2\x81aL\x1dV[\x91PaK\xd5V[aK\xd2\x81aK\xdbV[\x91P[P\x91\x90PV[`\x00`\x00aK\xe8\x83a)\xdcV[\x90P`\xaa`\x02\n\x81\x10\x15aK\xfbWaL\x0bV[aL'\
                             '\x04\x81aLgV[\x91PaL\x17V[aL\x14\x81aL\xa9V[\x91P[P\x91\x90PV[`\x00`\x00aL2aL-\x84a)\xdcV[a)\xdcV[\x90P`\xaa`\x02\n\x81\x10\x15aLEWaLUV'\
                             '[aLN\x81aL\xa9V[\x91PaLaV[aL^\x81aLgV[\x91P[P\x91\x90PV[`\x00`\x00aLt\x83a)\xdcV[\x90P`\xab`\x02\n\x81\x10\x15aL\x87WaL\x97V[aL\x90\x81'\
                             'aL\xf3V[\x91PaL\xa3V[aL\xa0\x81aM5V[\x91P[P\x91\x90PV[`\x00`\x00aL\xbeaL\xb9\x84a)\xdcV[a)\xdcV[\x90P`\xab`\x02\n\x81\x10\x15aL\xd1WaL\xe1V[a'\
                             'L\xda\x81aM5V[\x91PaL\xedV[aL\xea\x81aL\xf3V[\x91P[P\x91\x90PV[`\x00`\x00aM\x00\x83a)\xdcV[\x90P`\xac`\x02\n\x81\x10\x15aM\x13WaM#V[aM\x1c\x81aM'\
                             '\x7fV[\x91PaM/V[aM,\x81aM\xc1V[\x91P[P\x91\x90PV[`\x00`\x00aMJaME\x84a)\xdcV[a)\xdcV[\x90P`\xac`\x02\n\x81\x10\x15aM]WaMmV[aMf'\
                             '\x81aM\xc1V[\x91PaMyV[aMv\x81aM\x7fV[\x91P[P\x91\x90PV[`\x00`\x00aM\x8c\x83a)\xdcV[\x90P`\xad`\x02\n\x81\x10\x15aM\x9fWaM\xafV[aM\xa8\x81aN\x0bV'\
                             '[\x91PaM\xbbV[aM\xb8\x81aNMV[\x91P[P\x91\x90PV[`\x00`\x00aM\xd6aM\xd1\x84a)\xdcV[a)\xdcV[\x90P`\xad`\x02\n\x81\x10\x15aM\xe9WaM\xf9V[aM\xf2\x81a'\
                             'NMV[\x91PaN\x05V[aN\x02\x81aN\x0bV[\x91P[P\x91\x90PV[`\x00`\x00aN\x18\x83a)\xdcV[\x90P`\xae`\x02\n\x81\x10\x15aN+WaN;V[aN4\x81aN\x97V[\x91'\
                             'PaNGV[aND\x81aN\xd9V[\x91P[P\x91\x90PV[`\x00`\x00aNbaN]\x84a)\xdcV[a)\xdcV[\x90P`\xae`\x02\n\x81\x10\x15aNuWaN\x85V[aN~\x81aN\xd9'\
                             'V[\x91PaN\x91V[aN\x8e\x81aN\x97V[\x91P[P\x91\x90PV[`\x00`\x00aN\xa4\x83a)\xdcV[\x90P`\xaf`\x02\n\x81\x10\x15aN\xb7WaN\xc7V[aN\xc0\x81aO#V[\x91Pa'\
                             'N\xd3V[aN\xd0\x81aOeV[\x91P[P\x91\x90PV[`\x00`\x00aN\xeeaN\xe9\x84a)\xdcV[a)\xdcV[\x90P`\xaf`\x02\n\x81\x10\x15aO\x01WaO\x11V[aO\n\x81aOeV['\
                             '\x91PaO\x1dV[aO\x1a\x81aO#V[\x91P[P\x91\x90PV[`\x00`\x00aO0\x83a)\xdcV[\x90P`\xb0`\x02\n\x81\x10\x15aOCWaOSV[aOL\x81aO\xafV[\x91PaO_'\
                             'V[aO\\\x81aO\xf1V[\x91P[P\x91\x90PV[`\x00`\x00aOzaOu\x84a)\xdcV[a)\xdcV[\x90P`\xb0`\x02\n\x81\x10\x15aO\x8dWaO\x9dV[aO\x96\x81aO\xf1V[\x91P'\
                             'aO\xa9V[aO\xa6\x81aO\xafV[\x91P[P\x91\x90PV[`\x00`\x00aO\xbc\x83a)\xdcV[\x90P`\xb1`\x02\n\x81\x10\x15aO\xcfWaO\xdfV[aO\xd8\x81a*\x11V[\x91PaO\xebV['\
                             'aO\xe8\x81a*#V[\x91P[P\x91\x90PV[`\x00`\x00aP\x06aP\x01\x84a)\xdcV[a)\xdcV[\x90P`\xb1`\x02\n\x81\x10\x15aP\x19WaP)V[aP"\x81a*#V[\x91PaP'\
                             '5V[aP2\x81a*\x11V[\x91P[P\x91\x90PV',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xe0`\x02\n`\x005\x04\x80c\x01\xf9\x9a\xd7\x14a\x08\xc3W\x80c\x02'\
                                     ':bJ\x14a\x08\xd8W\x80c\x03\xbd\xec\xf5\x14a\x08\xedW\x80c\x05\xfe'\
                                     '\x03_\x14a\t\x02W\x80c\x08-\x8fI\x14a\t\x17W\x80c\t\x0b\xf3'\
                                     '\xb7\x14a\t,W\x80c\x0b\xd9\xc54\x14a\tAW\x80c\x0cK\xfa\x94'\
                                     '\x14a\tVW\x80c\x0e \xeb\xe2\x14a\tkW\x80c\x0fv\xde\r\x14'\
                                     'a\t\x80W\x80c\x10\xcf\xcc\x19\x14a\t\x95W\x80c\x13\xce\x15\xa9\x14a'\
                                     '\t\xaaW\x80c\x14\r\xce\xc4\x14a\t\xbfW\x80c\x14\xd0z>\x14a\t'\
                                     '\xd4W\x80c\x16\x87\xf1\x12\x14a\t\xe9W\x80c\x16\xebf\x03\x14a\t\xfe'\
                                     'W\x80c\x17,\xf7\x17\x14a\n\x13W\x80c\x1b\xd6\xf5\x96\x14a\n(W'\
                                     '\x80c\x1c\xdb\x85q\x14a\n=W\x80c\x1c\xf7N\xce\x14a\nRW\x80'\
                                     'c\x1d\t\xba,\x14a\ngW\x80c\x1fi\xaaQ\x14a\n|W\x80c'\
                                     '"=\xcct\x14a\n\x91W\x80c%\xe5$\xd3\x14a\n\xa6W\x80c&'\
                                     '\x1d\xe7\xc4\x14a\n\xbbW\x80c&2\x92M\x14a\n\xd0W\x80c)\t'\
                                     '\xcc]\x14a\n\xe5W\x80c)\x81i\x98\x14a\n\xfaW\x80c*\x85\xa4'\
                                     ']\x14a\x0b\x0fW\x80c,\xa3m\xa0\x14a\x0b$W\x80c,\xbf\x1f\r'\
                                     '\x14a\x0b9W\x80c-\x0fUs\x14a\x0bNW\x80c-\x97\x86x\x14'\
                                     'a\x0bcW\x80c1\xdb\x9e\xfd\x14a\x0bxW\x80c2\x06M\xb7\x14a'\
                                     '\x0b\x8dW\x80c2\x93\x1f\xbb\x14a\x0b\xa2W\x80c5_Q\xa0\x14a\x0b'\
                                     '\xb7W\x80c6\x1b\xb3@\x14a\x0b\xccW\x80c6M\xdb\x0e\x14a\x0b\xe1'\
                                     'W\x80c7\x92\xa0\x18\x14a\x0b\xf6W\x80c8\xc6\x8f\x8f\x14a\x0c\x0bW'\
                                     '\x80c8\xe5\x86\xfd\x14a\x0c W\x80c9-B\xae\x14a\x0c5W\x80'\
                                     'c9\xa8{\xd9\x14a\x0cJW\x80c:\x95\xa32\x14a\x0c_W\x80c'\
                                     ';\x8e\xcd\xf9\x14a\x0ctW\x80c<\xf0e\x9a\x14a\x0c\x89W\x80c>'\
                                     '\xaf\x99#\x14a\x0c\x9eW\x80c?\xe9~\xad\x14a\x0c\xb3W\x80c?\xf1'\
                                     '\x1c\x8b\x14a\x0c\xc8W\x80c@N\xfcS\x14a\x0c\xddW\x80c@\x7f\xce'\
                                     '{\x14a\x0c\xf2W\x80c@\xc3\xb1\x87\x14a\r\x07W\x80cD\x02\x08\xc3'\
                                     '\x14a\r\x1cW\x80cD\xe8k/\x14a\r1W\x80cE]\xf5y\x14'\
                                     'a\rFW\x80cF\x89\xabM\x14a\r[W\x80cF\xbe.\x0c\x14a'\
                                     '\rpW\x80cH|\xd8o\x14a\r\x85W\x80cH\xe6\x17\x82\x14a\r'\
                                     '\x9aW\x80cI\xd4\xa3D\x14a\r\xafW\x80cJ\x0fYt\x14a\r\xc4'\
                                     'W\x80cK\xc2N\xc5\x14a\r\xd9W\x80cL/\xe4V\x14a\r\xeeW'\
                                     '\x80cL\xc8\x85\xd4\x14a\x0e\x03W\x80cN\xaa\xad{\x14a\x0e\x18W\x80'\
                                     'cN\xb1f\xaf\x14a\x0e-W\x80cPP\t4\x14a\x0eBW\x80c'\
                                     'Pk\xff\x11\x14a\x0eWW\x80cP\x87b\xc1\x14a\x0elW\x80cR'\
                                     'i8\xf8\x14a\x0e\x81W\x80cT@\x0c`\x14a\x0e\x96W\x80cU\x95'\
                                     '\x10\xd8\x14a\x0e\xabW\x80cU\xa5\xf7\x02\x14a\x0e\xc0W\x80cV\xcaR'\
                                     '\x8f\x14a\x0e\xd5W\x80cW\n*\x16\x14a\x0e\xeaW\x80c]\xab.\x0f'\
                                     '\x14a\x0e\xffW\x80c]\xcaS\xd3\x14a\x0f\x14W\x80cb\x01~\xbc\x14'\
                                     'a\x0f)W\x80cb\x1a%\xf8\x14a\x0f>W\x80cbmJ6\x14a'\
                                     '\x0fSW\x80cb\xb6\xa2\x82\x14a\x0fhW\x80cd\xfa\xf2,\x14a\x0f'\
                                     '}W\x80cf\xd7\xff\xde\x14a\x0f\x92W\x80cg\xb8\x86\xe8\x14a\x0f\xa7'\
                                     'W\x80cg\xe9\x02\xc7\x14a\x0f\xbcW\x80ci\xd7w@\x14a\x0f\xd1W'\
                                     '\x80ckz\xe8\xe6\x14a\x0f\xe6W\x80cl;e\x91\x14a\x0f\xfbW\x80'\
                                     'cnT\x18\x1e\x14a\x10\x10W\x80cn\x97\x8d\x91\x14a\x10%W\x80c'\
                                     'oc\xd2\xec\x14a\x10:W\x80cpc2\xd1\x14a\x10OW\x80cp'\
                                     '\xacK\xb9\x14a\x10dW\x80cq8\xefR\x14a\x10yW\x80cq\xdd'\
                                     'F\xa9\x14a\x10\x8eW\x80cr\xa7\xc2)\x14a\x10\xa3W\x80csv\xfc'\
                                     '\x8d\x14a\x10\xb8W\x80cs\x8a&y\x14a\x10\xcdW\x80ctU&P'\
                                     '\x14a\x10\xe2W\x80cto\xc8\xd0\x14a\x10\xf7W\x80cy%K\xb8\x14'\
                                     'a\x11\x0cW\x80cz\xda\xa3\xf8\x14a\x11!W\x80c~N\xb3[\x14a'\
                                     '\x116W\x80c\x88^\xc1\x8e\x14a\x11KW\x80c\x8b\x9f\xf6\xb6\x14a\x11'\
                                     '`W\x80c\x8c\xe1\x13\xdc\x14a\x11uW\x80c\x8d\xef\xbc^\x14a\x11\x8a'\
                                     'W\x80c\x8fF\x13\xd5\x14a\x11\x9fW\x80c\x8f\xdc$\xba\x14a\x11\xb4W'\
                                     '\x80c\x90\x02\xdb\xa4\x14a\x11\xc9W\x80c\x91\xd1W5\x14a\x11\xdeW\x80'\
                                     'c\x91\xd4;#\x14a\x11\xf3W\x80c\x93\xb1M\xaa\x14a\x12\x08W\x80c'\
                                     '\x94\xd6:\xfd\x14a\x12\x1dW\x80c\x95\x80]\xad\x14a\x122W\x80c\x96'\
                                     '\xf6\x87\x82\x14a\x12GW\x80c\x97@\xe4\xa2\x14a\x12\\W\x80c\x98\x12'\
                                     '\x90\x13\x14a\x12qW\x80c\x99\xa3\xf0\xe8\x14a\x12\x86W\x80c\x9a\xcb\x1a'\
                                     '\xd4\x14a\x12\x9bW\x80c\x9b\xe0y\x08\x14a\x12\xb0W\x80c\x9c\x15\xbe\x0b'\
                                     '\x14a\x12\xc5W\x80c\x9dE\x1cM\x14a\x12\xdaW\x80c\x9d\x8e\xe9C\x14'\
                                     'a\x12\xefW\x80c\x9e\xf6\xca\x0f\x14a\x13\x04W\x80c\xa0\xdb\n"\x14a'\
                                     '\x13\x19W\x80c\xa1\x8e.\xb9\x14a\x13.W\x80c\xa4\x088I\x14a\x13'\
                                     'CW\x80c\xa5uD\xda\x14a\x13XW\x80c\xa5\xa8>M\x14a\x13m'\
                                     'W\x80c\xa6\x84?4\x14a\x13\x82W\x80c\xa6\xda\xcd\xd7\x14a\x13\x97W'\
                                     '\x80c\xa8\xc4\xc8\xbc\x14a\x13\xacW\x80c\xaa\x05\x8as\x14a\x13\xc1W\x80'\
                                     'c\xaa\xd6-\xa2\x14a\x13\xd6W\x80c\xaa\xf3\xe4\xf4\x14a\x13\xebW\x80c'\
                                     '\xab\x81\xe7s\x14a\x14\x00W\x80c\xab\xc9:\xee\x14a\x14\x15W\x80c\xab'\
                                     '\xde3\xf7\x14a\x14*W\x80c\xb1\x14\xb9l\x14a\x14?W\x80c\xb3\xdf'\
                                     '\x877\x14a\x14TW\x80c\xb4\x17L\xb0\x14a\x14iW\x80c\xb5\xd0*'\
                                     'V\x14a\x14~W\x80c\xb71\xe8H\x14a\x14\x93W\x80c\xb7\xb9g#'\
                                     '\x14a\x14\xa8W\x80c\xbb\xcd\xedz\x14a\x14\xbdW\x80c\xbb\xec\xec\xa9\x14'\
                                     'a\x14\xd2W\x80c\xbe\xcat@\x14a\x14\xe7W\x80c\xbf\x89\x81\xc0\x14a'\
                                     '\x14\xfcW\x80c\xc0(\xc6t\x14a\x15\x11W\x80c\xc28_\xa6\x14a\x15'\
                                     '&W\x80c\xc3\x19\xa0,\x14a\x15;W\x80c\xc5i\xba\xe0\x14a\x15P'\
                                     'W\x80c\xc6q_\x81\x14a\x15eW\x80c\xc7\xb9\x8d\xec\x14a\x15zW'\
                                     '\x80c\xc9\xac\xab\x84\x14a\x15\x8fW\x80c\xca\x9e\xfcs\x14a\x15\xa4W\x80'\
                                     'c\xca\xd8\x00$\x14a\x15\xb9W\x80c\xcd\xad\xb0\xfa\x14a\x15\xceW\x80c'\
                                     '\xcd\xbd\xf3\x91\x14a\x15\xe3W\x80c\xcfF\x0f\xa5\x14a\x15\xf8W\x80c\xcf'\
                                     'i1\x8a\x14a\x16\rW\x80c\xd1\x83[\x8c\x14a\x16"W\x80c\xd3S'\
                                     '\xa1\xcb\x14a\x167W\x80c\xd3\xe1A\xe0\x14a\x16LW\x80c\xd5\xec~'\
                                     '\x1d\x14a\x16aW\x80c\xd7\xea\xd1\xde\x14a\x16vW\x80c\xd9\x0b\x02\xaa'\
                                     '\x14a\x16\x8bW\x80c\xd9Y\xe2D\x14a\x16\xa0W\x80c\xd9\xe6\x8bD\x14'\
                                     'a\x16\xb5W\x80c\xda\xac\xb2O\x14a\x16\xcaW\x80c\xdc\x12\xa8\x05\x14a'\
                                     '\x16\xdfW\x80c\xdd\x94`3\x14a\x16\xf4W\x80c\xdd\xa5\x14$\x14a\x17'\
                                     '\tW\x80c\xdef\x12\x17\x14a\x17\x1eW\x80c\xdf\xb9V\x0c\x14a\x173'\
                                     "W\x80c\xe08'\xd2\x14a\x17HW\x80c\xe2\x17 \x00\x14a\x17]W"\
                                     '\x80c\xe2\xc7\x18\xd8\x14a\x17rW\x80c\xe3\xdaS\x99\x14a\x17\x87W\x80'\
                                     'c\xe4\x8e`?\x14a\x17\x9cW\x80c\xe5\xf9\xec)\x14a\x17\xb1W\x80c'\
                                     '\xe6\xc0E\x9a\x14a\x17\xc6W\x80c\xe7\n\xdd\xec\x14a\x17\xdbW\x80c\xe7'\
                                     "\xa0\x12\x15\x14a\x17\xf0W\x80c\xea\x7fM'\x14a\x18\x05W\x80c\xeb\xb6"\
                                     '\xc5\x9f\x14a\x18\x1aW\x80c\xedc\x02\xbe\x14a\x18/W\x80c\xedd\xb3'\
                                     "k\x14a\x18DW\x80c\xee\xcd'\x89\x14a\x18YW\x80c\xf0\xed\x14\xe0"\
                                     '\x14a\x18nW\x80c\xf0\xf2\x13D\x14a\x18\x83W\x80c\xf1\xe3(\xf9\x14'\
                                     'a\x18\x98W\x80c\xf1\xe6\xf4\xcd\x14a\x18\xadW\x80c\xf3/\xe9\x95\x14a'\
                                     '\x18\xc2W\x80c\xf7Qe\xc6\x14a\x18\xd7W\x80c\xf7\xedq\xd0\x14a\x18'\
                                     '\xecW\x80c\xf8\x0fD\xf3\x14a\x19\x01W\x80c\xf8\xbc\x05\x05\x14a\x19\x16'\
                                     'W\x80c\xfb\xd3\xc5\x1a\x14a\x19+W\x80c\xfdr\x00\x90\x14a\x19@W'\
                                     '\x80c\xfe\xd3\xa3\x00\x14a\x19UW\x00[a\x08\xce`\x045a.\xdfV'\
                                     '[\x80`\x00R` `\x00\xf3[a\x08\xe3`\x045a/\xb5V[\x80'\
                                     '`\x00R` `\x00\xf3[a\x08\xf8`\x045a?GV[\x80`\x00'\
                                     'R` `\x00\xf3[a\t\r`\x045a*\x11V[\x80`\x00R`'\
                                     ' `\x00\xf3[a\t"`\x045a\'\xecV[\x80`\x00R` `'\
                                     '\x00\xf3[a\t7`\x045a!\\V[\x80`\x00R` `\x00\xf3'\
                                     '[a\tL`\x045a(\xc2V[\x80`\x00R` `\x00\xf3[a'\
                                     '\ta`\x045a1\x0fV[\x80`\x00R` `\x00\xf3[a\tv'\
                                     '`\x045aN\x0bV[\x80`\x00R` `\x00\xf3[a\t\x8b`\x04'\
                                     '5a2iV[\x80`\x00R` `\x00\xf3[a\t\xa0`\x045a'\
                                     '\x1a\x82V[\x80`\x00R` `\x00\xf3[a\t\xb5`\x045a>q'\
                                     'V[\x80`\x00R` `\x00\xf3[a\t\xca`\x045a\x1d\xd2V['\
                                     '\x80`\x00R` `\x00\xf3[a\t\xdf`\x045a \xd0V[\x80`'\
                                     '\x00R` `\x00\xf3[a\t\xf4`\x045a7UV[\x80`\x00R'\
                                     '` `\x00\xf3[a\n\t`\x045a4\xe3V[\x80`\x00R` '\
                                     '`\x00\xf3[a\n\x1e`\x045a7\xe1V[\x80`\x00R` `\x00'\
                                     '\xf3[a\n3`\x045a8+V[\x80`\x00R` `\x00\xf3['\
                                     'a\nH`\x045a+\x0bV[\x80`\x00R` `\x00\xf3[a\n'\
                                     ']`\x045a8mV[\x80`\x00R` `\x00\xf3[a\nr`'\
                                     '\x045a1\xe5V[\x80`\x00R` `\x00\xf3[a\n\x87`\x045'\
                                     'aC\xe9V[\x80`\x00R` `\x00\xf3[a\n\x9c`\x045a1'\
                                     '\x9bV[\x80`\x00R` `\x00\xf3[a\n\xb1`\x045a.\x11V'\
                                     '[\x80`\x00R` `\x00\xf3[a\n\xc6`\x045a#JV[\x80'\
                                     '`\x00R` `\x00\xf3[a\n\xdb`\x045a!\xe8V[\x80`\x00'\
                                     'R` `\x00\xf3[a\n\xf0`\x045a\x19\xf6V[\x80`\x00R`'\
                                     ' `\x00\xf3[a\x0b\x05`\x045a;\xffV[\x80`\x00R` `'\
                                     '\x00\xf3[a\x0b\x1a`\x045a&\x06V[\x80`\x00R` `\x00\xf3'\
                                     '[a\x0b/`\x045a&\xd4V[\x80`\x00R` `\x00\xf3[a'\
                                     '\x0bD`\x045a;\xb5V[\x80`\x00R` `\x00\xf3[a\x0bY'\
                                     '`\x045a$bV[\x80`\x00R` `\x00\xf3[a\x0bn`\x04'\
                                     '5a\x1e\x14V[\x80`\x00R` `\x00\xf3[a\x0b\x83`\x045a'\
                                     'I\xabV[\x80`\x00R` `\x00\xf3[a\x0b\x98`\x045a\x1c&'\
                                     'V[\x80`\x00R` `\x00\xf3[a\x0b\xad`\x045a*\x7fV['\
                                     '\x80`\x00R` `\x00\xf3[a\x0b\xc2`\x045a4WV[\x80`'\
                                     '\x00R` `\x00\xf3[a\x0b\xd7`\x045a4\rV[\x80`\x00R'\
                                     '` `\x00\xf3[a\x0b\xec`\x045a6=V[\x80`\x00R` '\
                                     '`\x00\xf3[a\x0c\x01`\x045a.SV[\x80`\x00R` `\x00'\
                                     '\xf3[a\x0c\x16`\x045aG{V[\x80`\x00R` `\x00\xf3['\
                                     'a\x0c+`\x045a,mV[\x80`\x00R` `\x00\xf3[a\x0c'\
                                     '@`\x045a&HV[\x80`\x00R` `\x00\xf3[a\x0cU`'\
                                     '\x045a"tV[\x80`\x00R` `\x00\xf3[a\x0cj`\x045'\
                                     'a8\xf9V[\x80`\x00R` `\x00\xf3[a\x0c\x7f`\x045a+'\
                                     'UV[\x80`\x00R` `\x00\xf3[a\x0c\x94`\x045a\x1e\xeaV'\
                                     '[\x80`\x00R` `\x00\xf3[a\x0c\xa9`\x045a>\xbbV[\x80'\
                                     '`\x00R` `\x00\xf3[a\x0c\xbe`\x045a4\x99V[\x80`\x00'\
                                     'R` `\x00\xf3[a\x0c\xd3`\x045aH\x07V[\x80`\x00R`'\
                                     ' `\x00\xf3[a\x0c\xe8`\x045a\x1f\xb8V[\x80`\x00R` `'\
                                     '\x00\xf3[a\x0c\xfd`\x045a0\x83V[\x80`\x00R` `\x00\xf3'\
                                     '[a\r\x12`\x045a%\xbcV[\x80`\x00R` `\x00\xf3[a'\
                                     "\r'`\x045a0AV[\x80`\x00R` `\x00\xf3[a\r<"\
                                     '`\x045a@\xa1V[\x80`\x00R` `\x00\xf3[a\rQ`\x04'\
                                     '5aG\xbdV[\x80`\x00R` `\x00\xf3[a\rf`\x045a'\
                                     '\x1cpV[\x80`\x00R` `\x00\xf3[a\r{`\x045a#\x00'\
                                     'V[\x80`\x00R` `\x00\xf3[a\r\x90`\x045a#\xd6V['\
                                     '\x80`\x00R` `\x00\xf3[a\r\xa5`\x045a,#V[\x80`'\
                                     '\x00R` `\x00\xf3[a\r\xba`\x045aO\xafV[\x80`\x00R'\
                                     '` `\x00\xf3[a\r\xcf`\x045a DV[\x80`\x00R` '\
                                     '`\x00\xf3[a\r\xe4`\x045a:\xe7V[\x80`\x00R` `\x00'\
                                     '\xf3[a\r\xf9`\x045aL\xf3V[\x80`\x00R` `\x00\xf3['\
                                     'a\x0e\x0e`\x045a=\x17V[\x80`\x00R` `\x00\xf3[a\x0e'\
                                     '#`\x045aA-V[\x80`\x00R` `\x00\xf3[a\x0e8`'\
                                     '\x045aAwV[\x80`\x00R` `\x00\xf3[a\x0eM`\x045'\
                                     'a \x8eV[\x80`\x00R` `\x00\xf3[a\x0eb`\x045a-'\
                                     '\xc7V[\x80`\x00R` `\x00\xf3[a\x0ew`\x045a/)V'\
                                     '[\x80`\x00R` `\x00\xf3[a\x0e\x8c`\x045a$\xa4V[\x80'\
                                     '`\x00R` `\x00\xf3[a\x0e\xa1`\x045a\x1bXV[\x80`\x00'\
                                     'R` `\x00\xf3[a\x0e\xb6`\x045a6\xc9V[\x80`\x00R`'\
                                     " `\x00\xf3[a\x0e\xcb`\x045a2'V[\x80`\x00R` `"\
                                     '\x00\xf3[a\x0e\xe0`\x045a\x1a\xccV[\x80`\x00R` `\x00\xf3'\
                                     '[a\x0e\xf5`\x045a6\x87V[\x80`\x00R` `\x00\xf3[a'\
                                     '\x0f\n`\x045aF\xa5V[\x80`\x00R` `\x00\xf3[a\x0f\x1f'\
                                     '`\x045a!\xa6V[\x80`\x00R` `\x00\xf3[a\x0f4`\x04'\
                                     '5a2\xf5V[\x80`\x00R` `\x00\xf3[a\x0fI`\x045a'\
                                     '=\xa3V[\x80`\x00R` `\x00\xf3[a\x0f^`\x045a7\x9f'\
                                     'V[\x80`\x00R` `\x00\xf3[a\x0fs`\x045a(xV['\
                                     '\x80`\x00R` `\x00\xf3[a\x0f\x88`\x045a\x1b\x0eV[\x80`'\
                                     '\x00R` `\x00\xf3[a\x0f\x9d`\x045a\x1e\xa0V[\x80`\x00R'\
                                     '` `\x00\xf3[a\x0f\xb2`\x045aN\xd9V[\x80`\x00R` '\
                                     '`\x00\xf3[a\x0f\xc7`\x045aK\xdbV[\x80`\x00R` `\x00'\
                                     '\xf3[a\x0f\xdc`\x045aL\x1dV[\x80`\x00R` `\x00\xf3['\
                                     'a\x0f\xf1`\x045aBEV[\x80`\x00R` `\x00\xf3[a\x10'\
                                     '\x06`\x045aF\xefV[\x80`\x00R` `\x00\xf3[a\x10\x1b`'\
                                     '\x045aB\x8fV[\x80`\x00R` `\x00\xf3[a\x100`\x045'\
                                     'aJ\xc3V[\x80`\x00R` `\x00\xf3[a\x10E`\x045a='\
                                     '\xe5V[\x80`\x00R` `\x00\xf3[a\x10Z`\x045a2\xb3V'\
                                     '[\x80`\x00R` `\x00\xf3[a\x10o`\x045a"\xbeV[\x80'\
                                     '`\x00R` `\x00\xf3[a\x10\x84`\x045a.\x9dV[\x80`\x00'\
                                     'R` `\x00\xf3[a\x10\x99`\x045a\x1b\x9aV[\x80`\x00R`'\
                                     " `\x00\xf3[a\x10\xae`\x045a'\xaaV[\x80`\x00R` `"\
                                     '\x00\xf3[a\x10\xc3`\x045a>/V[\x80`\x00R` `\x00\xf3'\
                                     '[a\x10\xd8`\x045aHIV[\x80`\x00R` `\x00\xf3[a'\
                                     '\x10\xed`\x045aM\xc1V[\x80`\x00R` `\x00\xf3[a\x11\x02'\
                                     '`\x045a3?V[\x80`\x00R` `\x00\xf3[a\x11\x17`\x04'\
                                     '5a!\x1aV[\x80`\x00R` `\x00\xf3[a\x11,`\x045a'\
                                     '&\x92V[\x80`\x00R` `\x00\xf3[a\x11A`\x045a)\x04'\
                                     'V[\x80`\x00R` `\x00\xf3[a\x11V`\x045a-;V['\
                                     '\x80`\x00R` `\x00\xf3[a\x11k`\x045aK\x91V[\x80`'\
                                     '\x00R` `\x00\xf3[a\x11\x80`\x045a:[V[\x80`\x00R'\
                                     '` `\x00\xf3[a\x11\x95`\x045a"2V[\x80`\x00R` '\
                                     '`\x00\xf3[a\x11\xaa`\x045a/kV[\x80`\x00R` `\x00'\
                                     '\xf3[a\x11\xbf`\x045aM5V[\x80`\x00R` `\x00\xf3['\
                                     'a\x11\xd4`\x045a\x1a@V[\x80`\x00R` `\x00\xf3[a\x11'\
                                     '\xe9`\x045a/\xf7V[\x80`\x00R` `\x00\xf3[a\x11\xfe`'\
                                     '\x045aC\x1bV[\x80`\x00R` `\x00\xf3[a\x12\x13`\x045'\
                                     'a1YV[\x80`\x00R` `\x00\xf3[a\x12(`\x045a+'\
                                     '\x97V[\x80`\x00R` `\x00\xf3[a\x12=`\x045a)\x90V'\
                                     '[\x80`\x00R` `\x00\xf3[a\x12R`\x045a;sV[\x80'\
                                     '`\x00R` `\x00\xf3[a\x12g`\x045aIaV[\x80`\x00'\
                                     'R` `\x00\xf3[a\x12|`\x045a3\x81V[\x80`\x00R`'\
                                     ' `\x00\xf3[a\x12\x91`\x045a?\xd3V[\x80`\x00R` `'\
                                     '\x00\xf3[a\x12\xa6`\x045a%zV[\x80`\x00R` `\x00\xf3'\
                                     '[a\x12\xbb`\x045aE\x01V[\x80`\x00R` `\x00\xf3[a'\
                                     '\x12\xd0`\x045a=YV[\x80`\x00R` `\x00\xf3[a\x12\xe5'\
                                     '`\x045aC\xa7V[\x80`\x00R` `\x00\xf3[a\x12\xfa`\x04'\
                                     '5a@_V[\x80`\x00R` `\x00\xf3[a\x13\x0f`\x045a'\
                                     '#\x8cV[\x80`\x00R` `\x00\xf3[a\x13$`\x045a+\xe1'\
                                     'V[\x80`\x00R` `\x00\xf3[a\x139`\x045a?\x89V['\
                                     '\x80`\x00R` `\x00\xf3[a\x13N`\x045a)NV[\x80`'\
                                     '\x00R` `\x00\xf3[a\x13c`\x045a$\xeeV[\x80`\x00R'\
                                     '` `\x00\xf3[a\x13x`\x045aKOV[\x80`\x00R` '\
                                     '`\x00\xf3[a\x13\x8d`\x045a3\xcbV[\x80`\x00R` `\x00'\
                                     '\xf3[a\x13\xa2`\x045a9\xcfV[\x80`\x00R` `\x00\xf3['\
                                     'a\x13\xb7`\x045a<\x8bV[\x80`\x00R` `\x00\xf3[a\x13'\
                                     '\xcc`\x045a,\xf9V[\x80`\x00R` `\x00\xf3[a\x13\xe1`'\
                                     '\x045aJyV[\x80`\x00R` `\x00\xf3[a\x13\xf6`\x045'\
                                     'aI\xedV[\x80`\x00R` `\x00\xf3[a\x14\x0b`\x045a;'\
                                     ')V[\x80`\x00R` `\x00\xf3[a\x14 `\x045a<\xcdV'\
                                     '[\x80`\x00R` `\x00\xf3[a\x145`\x045a\x1fvV[\x80'\
                                     '`\x00R` `\x00\xf3[a\x14J`\x045aO\xf1V[\x80`\x00'\
                                     'R` `\x00\xf3[a\x14_`\x045a5%V[\x80`\x00R`'\
                                     ' `\x00\xf3[a\x14t`\x045a5oV[\x80`\x00R` `'\
                                     '\x00\xf3[a\x14\x89`\x045a)\xdcV[\x80`\x00R` `\x00\xf3'\
                                     '[a\x14\x9e`\x045aL\xa9V[\x80`\x00R` `\x00\xf3[a'\
                                     '\x14\xb3`\x045a-\x85V[\x80`\x00R` `\x00\xf3[a\x14\xc8'\
                                     '`\x045aA\xb9V[\x80`\x00R` `\x00\xf3[a\x14\xdd`\x04'\
                                     '5aDuV[\x80`\x00R` `\x00\xf3[a\x14\xf2`\x045a'\
                                     '5\xfbV[\x80`\x00R` `\x00\xf3[a\x15\x07`\x045a%0'\
                                     'V[\x80`\x00R` `\x00\xf3[a\x15\x1c`\x045aFcV['\
                                     '\x80`\x00R` `\x00\xf3[a\x151`\x045aD3V[\x80`'\
                                     '\x00R` `\x00\xf3[a\x15F`\x045aO#V[\x80`\x00R'\
                                     '` `\x00\xf3[a\x15[`\x045aLgV[\x80`\x00R` '\
                                     '`\x00\xf3[a\x15p`\x045a\x1d>V[\x80`\x00R` `\x00'\
                                     '\xf3[a\x15\x85`\x045a*=V[\x80`\x00R` `\x00\xf3['\
                                     'a\x15\x9a`\x045a:\x11V[\x80`\x00R` `\x00\xf3[a\x15'\
                                     '\xaf`\x045aF\x19V[\x80`\x00R` `\x00\xf3[a\x15\xc4`'\
                                     '\x045a9\x85V[\x80`\x00R` `\x00\xf3[a\x15\xd9`\x045'\
                                     'a9CV[\x80`\x00R` `\x00\xf3[a\x15\xee`\x045a$'\
                                     '\x18V[\x80`\x00R` `\x00\xf3[a\x16\x03`\x045a\x19\xb4V'\
                                     '[\x80`\x00R` `\x00\xf3[a\x16\x18`\x045a:\x9dV[\x80'\
                                     '`\x00R` `\x00\xf3[a\x16-`\x045a\x1c\xb2V[\x80`\x00'\
                                     'R` `\x00\xf3[a\x16B`\x045a)\xd2V[\x80`\x00R`'\
                                     ' `\x00\xf3[a\x16W`\x045a,\xafV[\x80`\x00R` `'\
                                     '\x00\xf3[a\x16l`\x045a\x1d\x88V[\x80`\x00R` `\x00\xf3'\
                                     '[a\x16\x81`\x045aB\x03V[\x80`\x00R` `\x00\xf3[a'\
                                     '\x16\x96`\x045aE\x8dV[\x80`\x00R` `\x00\xf3[a\x16\xab'\
                                     '`\x045a\x1f,V[\x80`\x00R` `\x00\xf3[a\x16\xc0`\x04'\
                                     '5a*#V[\x80`\x00R` `\x00\xf3[a\x16\xd5`\x045a'\
                                     '(6V[\x80`\x00R` `\x00\xf3[a\x16\xea`\x045a8\xb7'\
                                     'V[\x80`\x00R` `\x00\xf3[a\x16\xff`\x045aE\xd7V['\
                                     '\x80`\x00R` `\x00\xf3[a\x17\x14`\x045aEKV[\x80`'\
                                     '\x00R` `\x00\xf3[a\x17)`\x045aB\xd1V[\x80`\x00R'\
                                     '` `\x00\xf3[a\x17>`\x045a\x1e^V[\x80`\x00R` '\
                                     '`\x00\xf3[a\x17S`\x045a@\x15V[\x80`\x00R` `\x00'\
                                     '\xf3[a\x17h`\x045a<AV[\x80`\x00R` `\x00\xf3['\
                                     'a\x17}`\x045a\x1b\xe4V[\x80`\x00R` `\x00\xf3[a\x17'\
                                     '\x92`\x045aK\x05V[\x80`\x00R` `\x00\xf3[a\x17\xa7`'\
                                     '\x045a7\x13V[\x80`\x00R` `\x00\xf3[a\x17\xbc`\x045'\
                                     'a5\xb1V[\x80`\x00R` `\x00\xf3[a\x17\xd1`\x045aD'\
                                     '\xbfV[\x80`\x00R` `\x00\xf3[a\x17\xe6`\x045aI\x1fV'\
                                     '[\x80`\x00R` `\x00\xf3[a\x17\xfb`\x045a*\xc9V[\x80'\
                                     '`\x00R` `\x00\xf3[a\x18\x10`\x045a0\xcdV[\x80`\x00'\
                                     'R` `\x00\xf3[a\x18%`\x045a@\xebV[\x80`\x00R`'\
                                     ' `\x00\xf3[a\x18:`\x045aOeV[\x80`\x00R` `'\
                                     '\x00\xf3[a\x18O`\x045a\x19jV[\x80`\x00R` `\x00\xf3'\
                                     '[a\x18d`\x045aH\xd5V[\x80`\x00R` `\x00\xf3[a'\
                                     '\x18y`\x045aM\x7fV[\x80`\x00R` `\x00\xf3[a\x18\x8e'\
                                     '`\x045a \x02V[\x80`\x00R` `\x00\xf3[a\x18\xa3`\x04'\
                                     '5a>\xfdV[\x80`\x00R` `\x00\xf3[a\x18\xb8`\x045a'\
                                     "'\x1eV[\x80`\x00R` `\x00\xf3[a\x18\xcd`\x045aNM"\
                                     'V[\x80`\x00R` `\x00\xf3[a\x18\xe2`\x045a\x1c\xfcV['\
                                     "\x80`\x00R` `\x00\xf3[a\x18\xf7`\x045a'`V[\x80`"\
                                     '\x00R` `\x00\xf3[a\x19\x0c`\x045aN\x97V[\x80`\x00R'\
                                     '` `\x00\xf3[a\x19!`\x045aC]V[\x80`\x00R` '\
                                     '`\x00\xf3[a\x196`\x045aG1V[\x80`\x00R` `\x00'\
                                     '\xf3[a\x19K`\x045aH\x93V[\x80`\x00R` `\x00\xf3['\
                                     'a\x19``\x045aJ7V[\x80`\x00R` `\x00\xf3[`\x00'\
                                     '`\x00a\x19\x7fa\x19z\x84a)\xdcV[a)\xdcV[\x90P`]'\
                                     '`\x02\n\x81\x10\x15a\x19\x92Wa\x19\xa2V[a\x19\x9b\x81a\x19\xf6V'\
                                     '[\x91Pa\x19\xaeV[a\x19\xab\x81a\x19\xb4V[\x91P[P\x91\x90'\
                                     'PV[`\x00`\x00a\x19\xc1\x83a)\xdcV[\x90P`^`\x02\n'\
                                     '\x81\x10\x15a\x19\xd4Wa\x19\xe4V[a\x19\xdd\x81a\x1a@V[\x91P'\
                                     'a\x19\xf0V[a\x19\xed\x81a\x1a\x82V[\x91P[P\x91\x90PV['\
                                     '`\x00`\x00a\x1a\x0ba\x1a\x06\x84a)\xdcV[a)\xdcV[\x90P'\
                                     "`^`\x02\n\x81\x10\x15a\x1a\x1eWa\x1a.V[a\x1a'\x81a\x1a"\
                                     '\x82V[\x91Pa\x1a:V[a\x1a7\x81a\x1a@V[\x91P[P'\
                                     '\x91\x90PV[`\x00`\x00a\x1aM\x83a)\xdcV[\x90P`_`'\
                                     '\x02\n\x81\x10\x15a\x1a`Wa\x1apV[a\x1ai\x81a\x1a\xccV['\
                                     '\x91Pa\x1a|V[a\x1ay\x81a\x1b\x0eV[\x91P[P\x91\x90P'\
                                     'V[`\x00`\x00a\x1a\x97a\x1a\x92\x84a)\xdcV[a)\xdcV['\
                                     '\x90P`_`\x02\n\x81\x10\x15a\x1a\xaaWa\x1a\xbaV[a\x1a\xb3\x81'\
                                     'a\x1b\x0eV[\x91Pa\x1a\xc6V[a\x1a\xc3\x81a\x1a\xccV[\x91P'\
                                     '[P\x91\x90PV[`\x00`\x00a\x1a\xd9\x83a)\xdcV[\x90P`'\
                                     '``\x02\n\x81\x10\x15a\x1a\xecWa\x1a\xfcV[a\x1a\xf5\x81a\x1bX'\
                                     'V[\x91Pa\x1b\x08V[a\x1b\x05\x81a\x1b\x9aV[\x91P[P\x91'\
                                     '\x90PV[`\x00`\x00a\x1b#a\x1b\x1e\x84a)\xdcV[a)\xdc'\
                                     'V[\x90P```\x02\n\x81\x10\x15a\x1b6Wa\x1bFV[a\x1b'\
                                     '?\x81a\x1b\x9aV[\x91Pa\x1bRV[a\x1bO\x81a\x1bXV['\
                                     '\x91P[P\x91\x90PV[`\x00`\x00a\x1be\x83a)\xdcV[\x90'\
                                     'P`a`\x02\n\x81\x10\x15a\x1bxWa\x1b\x88V[a\x1b\x81\x81a'\
                                     '\x1b\xe4V[\x91Pa\x1b\x94V[a\x1b\x91\x81a\x1c&V[\x91P['\
                                     'P\x91\x90PV[`\x00`\x00a\x1b\xafa\x1b\xaa\x84a)\xdcV[a'\
                                     ')\xdcV[\x90P`a`\x02\n\x81\x10\x15a\x1b\xc2Wa\x1b\xd2V['\
                                     'a\x1b\xcb\x81a\x1c&V[\x91Pa\x1b\xdeV[a\x1b\xdb\x81a\x1b\xe4'\
                                     'V[\x91P[P\x91\x90PV[`\x00`\x00a\x1b\xf1\x83a)\xdcV'\
                                     '[\x90P`b`\x02\n\x81\x10\x15a\x1c\x04Wa\x1c\x14V[a\x1c\r'\
                                     '\x81a\x1cpV[\x91Pa\x1c V[a\x1c\x1d\x81a\x1c\xb2V[\x91'\
                                     'P[P\x91\x90PV[`\x00`\x00a\x1c;a\x1c6\x84a)\xdcV'\
                                     '[a)\xdcV[\x90P`b`\x02\n\x81\x10\x15a\x1cNWa\x1c^'\
                                     'V[a\x1cW\x81a\x1c\xb2V[\x91Pa\x1cjV[a\x1cg\x81a'\
                                     '\x1cpV[\x91P[P\x91\x90PV[`\x00`\x00a\x1c}\x83a)'\
                                     '\xdcV[\x90P`c`\x02\n\x81\x10\x15a\x1c\x90Wa\x1c\xa0V[a'\
                                     '\x1c\x99\x81a\x1c\xfcV[\x91Pa\x1c\xacV[a\x1c\xa9\x81a\x1d\x88V'\
                                     '[\x91P[P\x91\x90PV[`\x00`\x00a\x1c\xc7a\x1c\xc2\x84a)'\
                                     '\xdcV[a)\xdcV[\x90P`c`\x02\n\x81\x10\x15a\x1c\xdaWa'\
                                     '\x1c\xeaV[a\x1c\xe3\x81a\x1d\x88V[\x91Pa\x1c\xf6V[a\x1c\xf3'\
                                     '\x81a\x1c\xfcV[\x91P[P\x91\x90PV[`\x00`\x00a\x1d\t\x83'\
                                     'a)\xdcV[\x90P`d`\x02\n\x81\x10\x15a\x1d\x1cWa\x1d,V'\
                                     '[a\x1d%\x81a\x1d\xd2V[\x91Pa\x1d8V[a\x1d5\x81a\x1e'\
                                     '\x14V[\x91P[P\x91\x90PV[`\x00`\x00a\x1dSa\x1dN\x84'\
                                     'a)\xdcV[a)\xdcV[\x90P`z`\x02\n\x81\x10\x15a\x1df'\
                                     'Wa\x1dvV[a\x1do\x81a2iV[\x91Pa\x1d\x82V[a'\
                                     "\x1d\x7f\x81a2'V[\x91P[P\x91\x90PV[`\x00`\x00a\x1d"\
                                     '\x9da\x1d\x98\x84a)\xdcV[a)\xdcV[\x90P`d`\x02\n\x81'\
                                     '\x10\x15a\x1d\xb0Wa\x1d\xc0V[a\x1d\xb9\x81a\x1e\x14V[\x91Pa'\
                                     '\x1d\xccV[a\x1d\xc9\x81a\x1d\xd2V[\x91P[P\x91\x90PV[`'\
                                     '\x00`\x00a\x1d\xdf\x83a)\xdcV[\x90P`e`\x02\n\x81\x10\x15a'\
                                     '\x1d\xf2Wa\x1e\x02V[a\x1d\xfb\x81a\x1e^V[\x91Pa\x1e\x0eV'\
                                     '[a\x1e\x0b\x81a\x1e\xa0V[\x91P[P\x91\x90PV[`\x00`\x00'\
                                     'a\x1e)a\x1e$\x84a)\xdcV[a)\xdcV[\x90P`e`\x02'\
                                     '\n\x81\x10\x15a\x1e<Wa\x1eLV[a\x1eE\x81a\x1e\xa0V[\x91'\
                                     'Pa\x1eXV[a\x1eU\x81a\x1e^V[\x91P[P\x91\x90PV'\
                                     '[`\x00`\x00a\x1ek\x83a)\xdcV[\x90P`f`\x02\n\x81\x10'\
                                     '\x15a\x1e~Wa\x1e\x8eV[a\x1e\x87\x81a\x1e\xeaV[\x91Pa\x1e'\
                                     '\x9aV[a\x1e\x97\x81a\x1f,V[\x91P[P\x91\x90PV[`\x00'\
                                     '`\x00a\x1e\xb5a\x1e\xb0\x84a)\xdcV[a)\xdcV[\x90P`f'\
                                     '`\x02\n\x81\x10\x15a\x1e\xc8Wa\x1e\xd8V[a\x1e\xd1\x81a\x1f,V'\
                                     '[\x91Pa\x1e\xe4V[a\x1e\xe1\x81a\x1e\xeaV[\x91P[P\x91\x90'\
                                     'PV[`\x00`\x00a\x1e\xf7\x83a)\xdcV[\x90P`g`\x02\n'\
                                     '\x81\x10\x15a\x1f\nWa\x1f\x1aV[a\x1f\x13\x81a\x1fvV[\x91P'\
                                     'a\x1f&V[a\x1f#\x81a\x1f\xb8V[\x91P[P\x91\x90PV['\
                                     '`\x00`\x00a\x1fAa\x1f<\x84a)\xdcV[a)\xdcV[\x90P'\
                                     '`g`\x02\n\x81\x10\x15a\x1fTWa\x1fdV[a\x1f]\x81a\x1f'\
                                     '\xb8V[\x91Pa\x1fpV[a\x1fm\x81a\x1fvV[\x91P[P'\
                                     '\x91\x90PV[`\x00`\x00a\x1f\x83\x83a)\xdcV[\x90P`h`'\
                                     '\x02\n\x81\x10\x15a\x1f\x96Wa\x1f\xa6V[a\x1f\x9f\x81a \x02V['\
                                     '\x91Pa\x1f\xb2V[a\x1f\xaf\x81a DV[\x91P[P\x91\x90P'\
                                     'V[`\x00`\x00a\x1f\xcda\x1f\xc8\x84a)\xdcV[a)\xdcV['\
                                     '\x90P`h`\x02\n\x81\x10\x15a\x1f\xe0Wa\x1f\xf0V[a\x1f\xe9\x81'\
                                     'a DV[\x91Pa\x1f\xfcV[a\x1f\xf9\x81a \x02V[\x91P'\
                                     '[P\x91\x90PV[`\x00`\x00a \x0f\x83a)\xdcV[\x90P`'\
                                     'i`\x02\n\x81\x10\x15a "Wa 2V[a +\x81a \x8e'\
                                     'V[\x91Pa >V[a ;\x81a \xd0V[\x91P[P\x91'\
                                     '\x90PV[`\x00`\x00a Ya T\x84a)\xdcV[a)\xdc'\
                                     'V[\x90P`i`\x02\n\x81\x10\x15a lWa |V[a '\
                                     'u\x81a \xd0V[\x91Pa \x88V[a \x85\x81a \x8eV['\
                                     '\x91P[P\x91\x90PV[`\x00`\x00a \x9b\x83a)\xdcV[\x90'\
                                     'P`j`\x02\n\x81\x10\x15a \xaeWa \xbeV[a \xb7\x81a'\
                                     '!\x1aV[\x91Pa \xcaV[a \xc7\x81a!\\V[\x91P['\
                                     'P\x91\x90PV[`\x00`\x00a \xe5a \xe0\x84a)\xdcV[a'\
                                     ')\xdcV[\x90P`j`\x02\n\x81\x10\x15a \xf8Wa!\x08V['\
                                     'a!\x01\x81a!\\V[\x91Pa!\x14V[a!\x11\x81a!\x1a'\
                                     "V[\x91P[P\x91\x90PV[`\x00`\x00a!'\x83a)\xdcV"\
                                     '[\x90P`k`\x02\n\x81\x10\x15a!:Wa!JV[a!C'\
                                     '\x81a!\xa6V[\x91Pa!VV[a!S\x81a!\xe8V[\x91'\
                                     'P[P\x91\x90PV[`\x00`\x00a!qa!l\x84a)\xdcV'\
                                     '[a)\xdcV[\x90P`k`\x02\n\x81\x10\x15a!\x84Wa!\x94'\
                                     'V[a!\x8d\x81a!\xe8V[\x91Pa!\xa0V[a!\x9d\x81a'\
                                     '!\xa6V[\x91P[P\x91\x90PV[`\x00`\x00a!\xb3\x83a)'\
                                     '\xdcV[\x90P`l`\x02\n\x81\x10\x15a!\xc6Wa!\xd6V[a'\
                                     '!\xcf\x81a"2V[\x91Pa!\xe2V[a!\xdf\x81a"tV'\
                                     '[\x91P[P\x91\x90PV[`\x00`\x00a!\xfda!\xf8\x84a)'\
                                     '\xdcV[a)\xdcV[\x90P`l`\x02\n\x81\x10\x15a"\x10Wa'\
                                     '" V[a"\x19\x81a"tV[\x91Pa",V[a")'\
                                     '\x81a"2V[\x91P[P\x91\x90PV[`\x00`\x00a"?\x83'\
                                     'a)\xdcV[\x90P`m`\x02\n\x81\x10\x15a"RWa"bV'\
                                     '[a"[\x81a"\xbeV[\x91Pa"nV[a"k\x81a#'\
                                     '\x00V[\x91P[P\x91\x90PV[`\x00`\x00a"\x89a"\x84\x84'\
                                     'a)\xdcV[a)\xdcV[\x90P`m`\x02\n\x81\x10\x15a"\x9c'\
                                     'Wa"\xacV[a"\xa5\x81a#\x00V[\x91Pa"\xb8V[a'\
                                     '"\xb5\x81a"\xbeV[\x91P[P\x91\x90PV[`\x00`\x00a"'\
                                     '\xcb\x83a)\xdcV[\x90P`n`\x02\n\x81\x10\x15a"\xdeWa"'\
                                     '\xeeV[a"\xe7\x81a#JV[\x91Pa"\xfaV[a"\xf7\x81'\
                                     'a#\x8cV[\x91P[P\x91\x90PV[`\x00`\x00a#\x15a#'\
                                     '\x10\x84a)\xdcV[a)\xdcV[\x90P`n`\x02\n\x81\x10\x15a'\
                                     '#(Wa#8V[a#1\x81a#\x8cV[\x91Pa#DV'\
                                     '[a#A\x81a#JV[\x91P[P\x91\x90PV[`\x00`\x00'\
                                     'a#W\x83a)\xdcV[\x90P`o`\x02\n\x81\x10\x15a#jW'\
                                     'a#zV[a#s\x81a#\xd6V[\x91Pa#\x86V[a#'\
                                     '\x83\x81a$\x18V[\x91P[P\x91\x90PV[`\x00`\x00a#\xa1'\
                                     'a#\x9c\x84a)\xdcV[a)\xdcV[\x90P`o`\x02\n\x81\x10'\
                                     '\x15a#\xb4Wa#\xc4V[a#\xbd\x81a$\x18V[\x91Pa#'\
                                     '\xd0V[a#\xcd\x81a#\xd6V[\x91P[P\x91\x90PV[`\x00'\
                                     '`\x00a#\xe3\x83a)\xdcV[\x90P`p`\x02\n\x81\x10\x15a#'\
                                     '\xf6Wa$\x06V[a#\xff\x81a$bV[\x91Pa$\x12V['\
                                     'a$\x0f\x81a$\xa4V[\x91P[P\x91\x90PV[`\x00`\x00a'\
                                     '$-a$(\x84a)\xdcV[a)\xdcV[\x90P`p`\x02\n'\
                                     '\x81\x10\x15a$@Wa$PV[a$I\x81a$\xa4V[\x91P'\
                                     'a$\\V[a$Y\x81a$bV[\x91P[P\x91\x90PV['\
                                     '`\x00`\x00a$o\x83a)\xdcV[\x90P`q`\x02\n\x81\x10\x15'\
                                     'a$\x82Wa$\x92V[a$\x8b\x81a$\xeeV[\x91Pa$\x9e'\
                                     'V[a$\x9b\x81a%0V[\x91P[P\x91\x90PV[`\x00`'\
                                     '\x00a$\xb9a$\xb4\x84a)\xdcV[a)\xdcV[\x90P`q`'\
                                     '\x02\n\x81\x10\x15a$\xccWa$\xdcV[a$\xd5\x81a%0V['\
                                     '\x91Pa$\xe8V[a$\xe5\x81a$\xeeV[\x91P[P\x91\x90P'\
                                     'V[`\x00`\x00a$\xfb\x83a)\xdcV[\x90P`r`\x02\n\x81'\
                                     '\x10\x15a%\x0eWa%\x1eV[a%\x17\x81a%zV[\x91Pa'\
                                     "%*V[a%'\x81a%\xbcV[\x91P[P\x91\x90PV[`"\
                                     '\x00`\x00a%Ea%@\x84a)\xdcV[a)\xdcV[\x90P`'\
                                     'r`\x02\n\x81\x10\x15a%XWa%hV[a%a\x81a%\xbc'\
                                     'V[\x91Pa%tV[a%q\x81a%zV[\x91P[P\x91'\
                                     '\x90PV[`\x00`\x00a%\x87\x83a)\xdcV[\x90P`s`\x02'\
                                     '\n\x81\x10\x15a%\x9aWa%\xaaV[a%\xa3\x81a&\x06V[\x91'\
                                     'Pa%\xb6V[a%\xb3\x81a&HV[\x91P[P\x91\x90PV'\
                                     '[`\x00`\x00a%\xd1a%\xcc\x84a)\xdcV[a)\xdcV[\x90'\
                                     'P`s`\x02\n\x81\x10\x15a%\xe4Wa%\xf4V[a%\xed\x81a'\
                                     '&HV[\x91Pa&\x00V[a%\xfd\x81a&\x06V[\x91P['\
                                     'P\x91\x90PV[`\x00`\x00a&\x13\x83a)\xdcV[\x90P`t'\
                                     '`\x02\n\x81\x10\x15a&&Wa&6V[a&/\x81a&\x92V'\
                                     '[\x91Pa&BV[a&?\x81a&\xd4V[\x91P[P\x91\x90'\
                                     'PV[`\x00`\x00a&]a&X\x84a)\xdcV[a)\xdcV'\
                                     '[\x90P`t`\x02\n\x81\x10\x15a&pWa&\x80V[a&y'\
                                     '\x81a&\xd4V[\x91Pa&\x8cV[a&\x89\x81a&\x92V[\x91'\
                                     'P[P\x91\x90PV[`\x00`\x00a&\x9f\x83a)\xdcV[\x90P'\
                                     "`u`\x02\n\x81\x10\x15a&\xb2Wa&\xc2V[a&\xbb\x81a'"\
                                     "\x1eV[\x91Pa&\xceV[a&\xcb\x81a'`V[\x91P[P"\
                                     '\x91\x90PV[`\x00`\x00a&\xe9a&\xe4\x84a)\xdcV[a)'\
                                     "\xdcV[\x90P`u`\x02\n\x81\x10\x15a&\xfcWa'\x0cV[a"\
                                     "'\x05\x81a'`V[\x91Pa'\x18V[a'\x15\x81a'\x1eV"\
                                     "[\x91P[P\x91\x90PV[`\x00`\x00a'+\x83a)\xdcV["\
                                     "\x90P`v`\x02\n\x81\x10\x15a'>Wa'NV[a'G\x81"\
                                     "a'\xaaV[\x91Pa'ZV[a'W\x81a'\xecV[\x91P"\
                                     "[P\x91\x90PV[`\x00`\x00a'ua'p\x84a)\xdcV["\
                                     "a)\xdcV[\x90P`v`\x02\n\x81\x10\x15a'\x88Wa'\x98V"\
                                     "[a'\x91\x81a'\xecV[\x91Pa'\xa4V[a'\xa1\x81a'"\
                                     "\xaaV[\x91P[P\x91\x90PV[`\x00`\x00a'\xb7\x83a)\xdc"\
                                     "V[\x90P`w`\x02\n\x81\x10\x15a'\xcaWa'\xdaV[a'"\
                                     "\xd3\x81a(6V[\x91Pa'\xe6V[a'\xe3\x81a(xV["\
                                     "\x91P[P\x91\x90PV[`\x00`\x00a(\x01a'\xfc\x84a)\xdc"\
                                     'V[a)\xdcV[\x90P`w`\x02\n\x81\x10\x15a(\x14Wa('\
                                     '$V[a(\x1d\x81a(xV[\x91Pa(0V[a(-\x81'\
                                     'a(6V[\x91P[P\x91\x90PV[`\x00`\x00a(C\x83a'\
                                     ')\xdcV[\x90P`x`\x02\n\x81\x10\x15a(VWa(fV['\
                                     'a(_\x81a(\xc2V[\x91Pa(rV[a(o\x81a)\x04'\
                                     'V[\x91P[P\x91\x90PV[`\x00`\x00a(\x8da(\x88\x84a'\
                                     ')\xdcV[a)\xdcV[\x90P`x`\x02\n\x81\x10\x15a(\xa0W'\
                                     'a(\xb0V[a(\xa9\x81a)\x04V[\x91Pa(\xbcV[a('\
                                     '\xb9\x81a(\xc2V[\x91P[P\x91\x90PV[`\x00`\x00a(\xcf'\
                                     '\x83a)\xdcV[\x90P`y`\x02\n\x81\x10\x15a(\xe2Wa(\xf2'\
                                     'V[a(\xeb\x81a)NV[\x91Pa(\xfeV[a(\xfb\x81a'\
                                     '\x1d>V[\x91P[P\x91\x90PV[`\x00`\x00a)\x19a)\x14'\
                                     '\x84a)\xdcV[a)\xdcV[\x90P`y`\x02\n\x81\x10\x15a)'\
                                     ',Wa)<V[a)5\x81a\x1d>V[\x91Pa)HV['\
                                     'a)E\x81a)NV[\x91P[P\x91\x90PV[`\x00`\x00a'\
                                     ')[\x83a)\xdcV[\x90P`z`\x02\n\x81\x10\x15a)nWa'\
                                     ")~V[a)w\x81a2'V[\x91Pa)\x8aV[a)\x87"\
                                     '\x81a2iV[\x91P[P\x91\x90PV[`\x00`\x00a)\x9d\x83'\
                                     'a)\xdcV[\x90P`N`\x02\n\x81\x10\x15a)\xb0Wa)\xc0V'\
                                     '[a)\xb9\x81a*\x7fV[\x91Pa)\xccV[a)\xc9\x81a*'\
                                     '=V[\x91P[P\x91\x90PV[`\x00\x81\x90P\x91\x90PV[`'\
                                     '\x00`\x00\x7fXQ\xf4-L\x95\x7f,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x90P\x82\x81\x02`\x01\x01\x91P'\
                                     'P\x91\x90PV[`\x00a*\x1c\x82a)\xd2V[\x90P\x91\x90PV'\
                                     '[`\x00a*6a*1\x83a)\xdcV[a)\xd2V[\x90P\x91'\
                                     '\x90PV[`\x00`\x00a*J\x83a)\xdcV[\x90P`O`\x02'\
                                     '\n\x81\x10\x15a*]Wa*mV[a*f\x81a*\xc9V[\x91'\
                                     'Pa*yV[a*v\x81a+\x0bV[\x91P[P\x91\x90PV'\
                                     '[`\x00`\x00a*\x94a*\x8f\x84a)\xdcV[a)\xdcV[\x90'\
                                     'P`O`\x02\n\x81\x10\x15a*\xa7Wa*\xb7V[a*\xb0\x81a'\
                                     '+\x0bV[\x91Pa*\xc3V[a*\xc0\x81a*\xc9V[\x91P['\
                                     'P\x91\x90PV[`\x00`\x00a*\xd6\x83a)\xdcV[\x90P`P'\
                                     '`\x02\n\x81\x10\x15a*\xe9Wa*\xf9V[a*\xf2\x81a+UV'\
                                     '[\x91Pa+\x05V[a+\x02\x81a+\x97V[\x91P[P\x91\x90'\
                                     'PV[`\x00`\x00a+ a+\x1b\x84a)\xdcV[a)\xdcV'\
                                     '[\x90P`P`\x02\n\x81\x10\x15a+3Wa+CV[a+<'\
                                     '\x81a+\x97V[\x91Pa+OV[a+L\x81a+UV[\x91'\
                                     'P[P\x91\x90PV[`\x00`\x00a+b\x83a)\xdcV[\x90P'\
                                     '`Q`\x02\n\x81\x10\x15a+uWa+\x85V[a+~\x81a+'\
                                     '\xe1V[\x91Pa+\x91V[a+\x8e\x81a,#V[\x91P[P'\
                                     '\x91\x90PV[`\x00`\x00a+\xaca+\xa7\x84a)\xdcV[a)'\
                                     '\xdcV[\x90P`Q`\x02\n\x81\x10\x15a+\xbfWa+\xcfV[a'\
                                     '+\xc8\x81a,#V[\x91Pa+\xdbV[a+\xd8\x81a+\xe1V'\
                                     '[\x91P[P\x91\x90PV[`\x00`\x00a+\xee\x83a)\xdcV['\
                                     '\x90P`R`\x02\n\x81\x10\x15a,\x01Wa,\x11V[a,\n\x81'\
                                     'a,mV[\x91Pa,\x1dV[a,\x1a\x81a,\xafV[\x91P'\
                                     '[P\x91\x90PV[`\x00`\x00a,8a,3\x84a)\xdcV['\
                                     'a)\xdcV[\x90P`R`\x02\n\x81\x10\x15a,KWa,[V'\
                                     '[a,T\x81a,\xafV[\x91Pa,gV[a,d\x81a,'\
                                     'mV[\x91P[P\x91\x90PV[`\x00`\x00a,z\x83a)\xdc'\
                                     'V[\x90P`S`\x02\n\x81\x10\x15a,\x8dWa,\x9dV[a,'\
                                     '\x96\x81a,\xf9V[\x91Pa,\xa9V[a,\xa6\x81a-;V['\
                                     '\x91P[P\x91\x90PV[`\x00`\x00a,\xc4a,\xbf\x84a)\xdc'\
                                     'V[a)\xdcV[\x90P`S`\x02\n\x81\x10\x15a,\xd7Wa,'\
                                     '\xe7V[a,\xe0\x81a-;V[\x91Pa,\xf3V[a,\xf0\x81'\
                                     'a,\xf9V[\x91P[P\x91\x90PV[`\x00`\x00a-\x06\x83a'\
                                     ')\xdcV[\x90P`T`\x02\n\x81\x10\x15a-\x19Wa-)V['\
                                     'a-"\x81a-\x85V[\x91Pa-5V[a-2\x81a-\xc7'\
                                     'V[\x91P[P\x91\x90PV[`\x00`\x00a-Pa-K\x84a'\
                                     ')\xdcV[a)\xdcV[\x90P`T`\x02\n\x81\x10\x15a-cW'\
                                     'a-sV[a-l\x81a-\xc7V[\x91Pa-\x7fV[a-'\
                                     '|\x81a-\x85V[\x91P[P\x91\x90PV[`\x00`\x00a-\x92'\
                                     '\x83a)\xdcV[\x90P`U`\x02\n\x81\x10\x15a-\xa5Wa-\xb5'\
                                     'V[a-\xae\x81a.\x11V[\x91Pa-\xc1V[a-\xbe\x81a'\
                                     '.SV[\x91P[P\x91\x90PV[`\x00`\x00a-\xdca-\xd7'\
                                     '\x84a)\xdcV[a)\xdcV[\x90P`U`\x02\n\x81\x10\x15a-'\
                                     '\xefWa-\xffV[a-\xf8\x81a.SV[\x91Pa.\x0bV['\
                                     'a.\x08\x81a.\x11V[\x91P[P\x91\x90PV[`\x00`\x00a'\
                                     '.\x1e\x83a)\xdcV[\x90P`V`\x02\n\x81\x10\x15a.1Wa'\
                                     '.AV[a.:\x81a.\x9dV[\x91Pa.MV[a.J'\
                                     '\x81a.\xdfV[\x91P[P\x91\x90PV[`\x00`\x00a.ha'\
                                     '.c\x84a)\xdcV[a)\xdcV[\x90P`V`\x02\n\x81\x10\x15'\
                                     'a.{Wa.\x8bV[a.\x84\x81a.\xdfV[\x91Pa.\x97'\
                                     'V[a.\x94\x81a.\x9dV[\x91P[P\x91\x90PV[`\x00`'\
                                     '\x00a.\xaa\x83a)\xdcV[\x90P`W`\x02\n\x81\x10\x15a.\xbd'\
                                     'Wa.\xcdV[a.\xc6\x81a/)V[\x91Pa.\xd9V[a'\
                                     '.\xd6\x81a/kV[\x91P[P\x91\x90PV[`\x00`\x00a.'\
                                     '\xf4a.\xef\x84a)\xdcV[a)\xdcV[\x90P`W`\x02\n\x81'\
                                     '\x10\x15a/\x07Wa/\x17V[a/\x10\x81a/kV[\x91Pa'\
                                     '/#V[a/ \x81a/)V[\x91P[P\x91\x90PV[`'\
                                     '\x00`\x00a/6\x83a)\xdcV[\x90P`X`\x02\n\x81\x10\x15a'\
                                     '/IWa/YV[a/R\x81a/\xb5V[\x91Pa/eV'\
                                     '[a/b\x81a/\xf7V[\x91P[P\x91\x90PV[`\x00`\x00'\
                                     'a/\x80a/{\x84a)\xdcV[a)\xdcV[\x90P`X`\x02'\
                                     '\n\x81\x10\x15a/\x93Wa/\xa3V[a/\x9c\x81a/\xf7V[\x91'\
                                     'Pa/\xafV[a/\xac\x81a/\xb5V[\x91P[P\x91\x90PV'\
                                     '[`\x00`\x00a/\xc2\x83a)\xdcV[\x90P`Y`\x02\n\x81\x10'\
                                     '\x15a/\xd5Wa/\xe5V[a/\xde\x81a0AV[\x91Pa/'\
                                     '\xf1V[a/\xee\x81a0\x83V[\x91P[P\x91\x90PV[`\x00'\
                                     '`\x00a0\x0ca0\x07\x84a)\xdcV[a)\xdcV[\x90P`Y'\
                                     '`\x02\n\x81\x10\x15a0\x1fWa0/V[a0(\x81a0\x83V'\
                                     '[\x91Pa0;V[a08\x81a0AV[\x91P[P\x91\x90'\
                                     'PV[`\x00`\x00a0N\x83a)\xdcV[\x90P`Z`\x02\n'\
                                     '\x81\x10\x15a0aWa0qV[a0j\x81a0\xcdV[\x91P'\
                                     'a0}V[a0z\x81a1\x0fV[\x91P[P\x91\x90PV['\
                                     '`\x00`\x00a0\x98a0\x93\x84a)\xdcV[a)\xdcV[\x90P'\
                                     '`Z`\x02\n\x81\x10\x15a0\xabWa0\xbbV[a0\xb4\x81a1'\
                                     '\x0fV[\x91Pa0\xc7V[a0\xc4\x81a0\xcdV[\x91P[P'\
                                     '\x91\x90PV[`\x00`\x00a0\xda\x83a)\xdcV[\x90P`[`'\
                                     '\x02\n\x81\x10\x15a0\xedWa0\xfdV[a0\xf6\x81a1YV['\
                                     '\x91Pa1\tV[a1\x06\x81a1\x9bV[\x91P[P\x91\x90P'\
                                     'V[`\x00`\x00a1$a1\x1f\x84a)\xdcV[a)\xdcV['\
                                     '\x90P`[`\x02\n\x81\x10\x15a17Wa1GV[a1@\x81'\
                                     'a1\x9bV[\x91Pa1SV[a1P\x81a1YV[\x91P'\
                                     '[P\x91\x90PV[`\x00`\x00a1f\x83a)\xdcV[\x90P`'\
                                     '\\`\x02\n\x81\x10\x15a1yWa1\x89V[a1\x82\x81a1\xe5'\
                                     'V[\x91Pa1\x95V[a1\x92\x81a\x19jV[\x91P[P\x91'\
                                     '\x90PV[`\x00`\x00a1\xb0a1\xab\x84a)\xdcV[a)\xdc'\
                                     'V[\x90P`\\`\x02\n\x81\x10\x15a1\xc3Wa1\xd3V[a1'\
                                     '\xcc\x81a\x19jV[\x91Pa1\xdfV[a1\xdc\x81a1\xe5V['\
                                     '\x91P[P\x91\x90PV[`\x00`\x00a1\xf2\x83a)\xdcV[\x90'\
                                     'P`]`\x02\n\x81\x10\x15a2\x05Wa2\x15V[a2\x0e\x81a'\
                                     '\x19\xb4V[\x91Pa2!V[a2\x1e\x81a\x19\xf6V[\x91P['\
                                     'P\x91\x90PV[`\x00`\x00a24\x83a)\xdcV[\x90P`{'\
                                     '`\x02\n\x81\x10\x15a2GWa2WV[a2P\x81a2\xb3V'\
                                     '[\x91Pa2cV[a2`\x81a2\xf5V[\x91P[P\x91\x90'\
                                     'PV[`\x00`\x00a2~a2y\x84a)\xdcV[a)\xdcV'\
                                     '[\x90P`{`\x02\n\x81\x10\x15a2\x91Wa2\xa1V[a2\x9a'\
                                     '\x81a2\xf5V[\x91Pa2\xadV[a2\xaa\x81a2\xb3V[\x91'\
                                     'P[P\x91\x90PV[`\x00`\x00a2\xc0\x83a)\xdcV[\x90P'\
                                     '`|`\x02\n\x81\x10\x15a2\xd3Wa2\xe3V[a2\xdc\x81a3'\
                                     '?V[\x91Pa2\xefV[a2\xec\x81a3\x81V[\x91P[P'\
                                     '\x91\x90PV[`\x00`\x00a3\na3\x05\x84a)\xdcV[a)'\
                                     '\xdcV[\x90P`|`\x02\n\x81\x10\x15a3\x1dWa3-V[a'\
                                     '3&\x81a3\x81V[\x91Pa39V[a36\x81a3?V'\
                                     '[\x91P[P\x91\x90PV[`\x00`\x00a3L\x83a)\xdcV['\
                                     '\x90P`}`\x02\n\x81\x10\x15a3_Wa3oV[a3h\x81'\
                                     'a3\xcbV[\x91Pa3{V[a3x\x81a4\rV[\x91P'\
                                     '[P\x91\x90PV[`\x00`\x00a3\x96a3\x91\x84a)\xdcV['\
                                     'a)\xdcV[\x90P`}`\x02\n\x81\x10\x15a3\xa9Wa3\xb9V'\
                                     '[a3\xb2\x81a4\rV[\x91Pa3\xc5V[a3\xc2\x81a3'\
                                     '\xcbV[\x91P[P\x91\x90PV[`\x00`\x00a3\xd8\x83a)\xdc'\
                                     'V[\x90P`~`\x02\n\x81\x10\x15a3\xebWa3\xfbV[a3'\
                                     '\xf4\x81a4WV[\x91Pa4\x07V[a4\x04\x81a4\x99V['\
                                     '\x91P[P\x91\x90PV[`\x00`\x00a4"a4\x1d\x84a)\xdc'\
                                     'V[a)\xdcV[\x90P`~`\x02\n\x81\x10\x15a45Wa4'\
                                     'EV[a4>\x81a4\x99V[\x91Pa4QV[a4N\x81'\
                                     'a4WV[\x91P[P\x91\x90PV[`\x00`\x00a4d\x83a'\
                                     ')\xdcV[\x90P`\x7f`\x02\n\x81\x10\x15a4wWa4\x87V['\
                                     'a4\x80\x81a4\xe3V[\x91Pa4\x93V[a4\x90\x81a5%'\
                                     'V[\x91P[P\x91\x90PV[`\x00`\x00a4\xaea4\xa9\x84a'\
                                     ')\xdcV[a)\xdcV[\x90P`\x7f`\x02\n\x81\x10\x15a4\xc1W'\
                                     'a4\xd1V[a4\xca\x81a5%V[\x91Pa4\xddV[a4'\
                                     '\xda\x81a4\xe3V[\x91P[P\x91\x90PV[`\x00`\x00a4\xf0'\
                                     '\x83a)\xdcV[\x90P`\x80`\x02\n\x81\x10\x15a5\x03Wa5\x13'\
                                     'V[a5\x0c\x81a5oV[\x91Pa5\x1fV[a5\x1c\x81a'\
                                     '5\xb1V[\x91P[P\x91\x90PV[`\x00`\x00a5:a55'\
                                     '\x84a)\xdcV[a)\xdcV[\x90P`\x80`\x02\n\x81\x10\x15a5'\
                                     'MWa5]V[a5V\x81a5\xb1V[\x91Pa5iV['\
                                     'a5f\x81a5oV[\x91P[P\x91\x90PV[`\x00`\x00a'\
                                     '5|\x83a)\xdcV[\x90P`\x81`\x02\n\x81\x10\x15a5\x8fWa'\
                                     '5\x9fV[a5\x98\x81a5\xfbV[\x91Pa5\xabV[a5\xa8'\
                                     '\x81a6=V[\x91P[P\x91\x90PV[`\x00`\x00a5\xc6a'\
                                     '5\xc1\x84a)\xdcV[a)\xdcV[\x90P`\x81`\x02\n\x81\x10\x15'\
                                     'a5\xd9Wa5\xe9V[a5\xe2\x81a6=V[\x91Pa5\xf5'\
                                     'V[a5\xf2\x81a5\xfbV[\x91P[P\x91\x90PV[`\x00`'\
                                     '\x00a6\x08\x83a)\xdcV[\x90P`\x82`\x02\n\x81\x10\x15a6\x1b'\
                                     'Wa6+V[a6$\x81a6\x87V[\x91Pa67V[a'\
                                     '64\x81a6\xc9V[\x91P[P\x91\x90PV[`\x00`\x00a6'\
                                     'Ra6M\x84a)\xdcV[a)\xdcV[\x90P`\x82`\x02\n\x81'\
                                     '\x10\x15a6eWa6uV[a6n\x81a6\xc9V[\x91Pa'\
                                     '6\x81V[a6~\x81a6\x87V[\x91P[P\x91\x90PV[`'\
                                     '\x00`\x00a6\x94\x83a)\xdcV[\x90P`\x83`\x02\n\x81\x10\x15a'\
                                     '6\xa7Wa6\xb7V[a6\xb0\x81a7\x13V[\x91Pa6\xc3V'\
                                     '[a6\xc0\x81a7UV[\x91P[P\x91\x90PV[`\x00`\x00'\
                                     'a6\xdea6\xd9\x84a)\xdcV[a)\xdcV[\x90P`\x83`\x02'\
                                     '\n\x81\x10\x15a6\xf1Wa7\x01V[a6\xfa\x81a7UV[\x91'\
                                     'Pa7\rV[a7\n\x81a7\x13V[\x91P[P\x91\x90PV'\
                                     '[`\x00`\x00a7 \x83a)\xdcV[\x90P`\x84`\x02\n\x81\x10'\
                                     '\x15a73Wa7CV[a7<\x81a7\x9fV[\x91Pa7'\
                                     'OV[a7L\x81a7\xe1V[\x91P[P\x91\x90PV[`\x00'\
                                     '`\x00a7ja7e\x84a)\xdcV[a)\xdcV[\x90P`\x84'\
                                     '`\x02\n\x81\x10\x15a7}Wa7\x8dV[a7\x86\x81a7\xe1V'\
                                     '[\x91Pa7\x99V[a7\x96\x81a7\x9fV[\x91P[P\x91\x90'\
                                     'PV[`\x00`\x00a7\xac\x83a)\xdcV[\x90P`\x85`\x02\n'\
                                     '\x81\x10\x15a7\xbfWa7\xcfV[a7\xc8\x81a8+V[\x91P'\
                                     'a7\xdbV[a7\xd8\x81a8mV[\x91P[P\x91\x90PV['\
                                     '`\x00`\x00a7\xf6a7\xf1\x84a)\xdcV[a)\xdcV[\x90P'\
                                     '`\x85`\x02\n\x81\x10\x15a8\tWa8\x19V[a8\x12\x81a8'\
                                     'mV[\x91Pa8%V[a8"\x81a8+V[\x91P[P'\
                                     '\x91\x90PV[`\x00`\x00a88\x83a)\xdcV[\x90P`\x86`'\
                                     '\x02\n\x81\x10\x15a8KWa8[V[a8T\x81a8\xb7V['\
                                     '\x91Pa8gV[a8d\x81a8\xf9V[\x91P[P\x91\x90P'\
                                     'V[`\x00`\x00a8\x82a8}\x84a)\xdcV[a)\xdcV['\
                                     '\x90P`\x86`\x02\n\x81\x10\x15a8\x95Wa8\xa5V[a8\x9e\x81'\
                                     'a8\xf9V[\x91Pa8\xb1V[a8\xae\x81a8\xb7V[\x91P'\
                                     '[P\x91\x90PV[`\x00`\x00a8\xc4\x83a)\xdcV[\x90P`'\
                                     '\x87`\x02\n\x81\x10\x15a8\xd7Wa8\xe7V[a8\xe0\x81a9C'\
                                     'V[\x91Pa8\xf3V[a8\xf0\x81a9\x85V[\x91P[P\x91'\
                                     '\x90PV[`\x00`\x00a9\x0ea9\t\x84a)\xdcV[a)\xdc'\
                                     'V[\x90P`\x87`\x02\n\x81\x10\x15a9!Wa91V[a9'\
                                     '*\x81a9\x85V[\x91Pa9=V[a9:\x81a9CV['\
                                     '\x91P[P\x91\x90PV[`\x00`\x00a9P\x83a)\xdcV[\x90'\
                                     'P`\x88`\x02\n\x81\x10\x15a9cWa9sV[a9l\x81a'\
                                     '9\xcfV[\x91Pa9\x7fV[a9|\x81a:\x11V[\x91P['\
                                     'P\x91\x90PV[`\x00`\x00a9\x9aa9\x95\x84a)\xdcV[a'\
                                     ')\xdcV[\x90P`\x88`\x02\n\x81\x10\x15a9\xadWa9\xbdV['\
                                     'a9\xb6\x81a:\x11V[\x91Pa9\xc9V[a9\xc6\x81a9\xcf'\
                                     'V[\x91P[P\x91\x90PV[`\x00`\x00a9\xdc\x83a)\xdcV'\
                                     '[\x90P`\x89`\x02\n\x81\x10\x15a9\xefWa9\xffV[a9\xf8'\
                                     '\x81a:[V[\x91Pa:\x0bV[a:\x08\x81a:\x9dV[\x91'\
                                     'P[P\x91\x90PV[`\x00`\x00a:&a:!\x84a)\xdcV'\
                                     '[a)\xdcV[\x90P`\x89`\x02\n\x81\x10\x15a:9Wa:I'\
                                     'V[a:B\x81a:\x9dV[\x91Pa:UV[a:R\x81a'\
                                     ':[V[\x91P[P\x91\x90PV[`\x00`\x00a:h\x83a)'\
                                     '\xdcV[\x90P`\x8a`\x02\n\x81\x10\x15a:{Wa:\x8bV[a'\
                                     ':\x84\x81a:\xe7V[\x91Pa:\x97V[a:\x94\x81a;)V'\
                                     '[\x91P[P\x91\x90PV[`\x00`\x00a:\xb2a:\xad\x84a)'\
                                     '\xdcV[a)\xdcV[\x90P`\x8a`\x02\n\x81\x10\x15a:\xc5Wa'\
                                     ':\xd5V[a:\xce\x81a;)V[\x91Pa:\xe1V[a:\xde'\
                                     '\x81a:\xe7V[\x91P[P\x91\x90PV[`\x00`\x00a:\xf4\x83'\
                                     'a)\xdcV[\x90P`\x8b`\x02\n\x81\x10\x15a;\x07Wa;\x17V'\
                                     '[a;\x10\x81a;sV[\x91Pa;#V[a; \x81a;'\
                                     '\xb5V[\x91P[P\x91\x90PV[`\x00`\x00a;>a;9\x84'\
                                     'a)\xdcV[a)\xdcV[\x90P`\x8b`\x02\n\x81\x10\x15a;Q'\
                                     'Wa;aV[a;Z\x81a;\xb5V[\x91Pa;mV[a'\
                                     ';j\x81a;sV[\x91P[P\x91\x90PV[`\x00`\x00a;'\
                                     '\x80\x83a)\xdcV[\x90P`\x8c`\x02\n\x81\x10\x15a;\x93Wa;'\
                                     '\xa3V[a;\x9c\x81a;\xffV[\x91Pa;\xafV[a;\xac\x81'\
                                     'a<AV[\x91P[P\x91\x90PV[`\x00`\x00a;\xcaa;'\
                                     '\xc5\x84a)\xdcV[a)\xdcV[\x90P`\x8c`\x02\n\x81\x10\x15a'\
                                     ';\xddWa;\xedV[a;\xe6\x81a<AV[\x91Pa;\xf9V'\
                                     '[a;\xf6\x81a;\xffV[\x91P[P\x91\x90PV[`\x00`\x00'\
                                     'a<\x0c\x83a)\xdcV[\x90P`\x8d`\x02\n\x81\x10\x15a<\x1fW'\
                                     'a</V[a<(\x81a<\x8bV[\x91Pa<;V[a<'\
                                     '8\x81a<\xcdV[\x91P[P\x91\x90PV[`\x00`\x00a<V'\
                                     'a<Q\x84a)\xdcV[a)\xdcV[\x90P`\x8d`\x02\n\x81\x10'\
                                     '\x15a<iWa<yV[a<r\x81a<\xcdV[\x91Pa<'\
                                     '\x85V[a<\x82\x81a<\x8bV[\x91P[P\x91\x90PV[`\x00'\
                                     '`\x00a<\x98\x83a)\xdcV[\x90P`\x8e`\x02\n\x81\x10\x15a<'\
                                     '\xabWa<\xbbV[a<\xb4\x81a=\x17V[\x91Pa<\xc7V['\
                                     'a<\xc4\x81a=YV[\x91P[P\x91\x90PV[`\x00`\x00a'\
                                     '<\xe2a<\xdd\x84a)\xdcV[a)\xdcV[\x90P`\x8e`\x02\n'\
                                     '\x81\x10\x15a<\xf5Wa=\x05V[a<\xfe\x81a=YV[\x91P'\
                                     'a=\x11V[a=\x0e\x81a=\x17V[\x91P[P\x91\x90PV['\
                                     '`\x00`\x00a=$\x83a)\xdcV[\x90P`\x8f`\x02\n\x81\x10\x15'\
                                     'a=7Wa=GV[a=@\x81a=\xa3V[\x91Pa=S'\
                                     'V[a=P\x81a=\xe5V[\x91P[P\x91\x90PV[`\x00`'\
                                     '\x00a=na=i\x84a)\xdcV[a)\xdcV[\x90P`\x8f`'\
                                     '\x02\n\x81\x10\x15a=\x81Wa=\x91V[a=\x8a\x81a=\xe5V['\
                                     '\x91Pa=\x9dV[a=\x9a\x81a=\xa3V[\x91P[P\x91\x90P'\
                                     'V[`\x00`\x00a=\xb0\x83a)\xdcV[\x90P`\x90`\x02\n\x81'\
                                     '\x10\x15a=\xc3Wa=\xd3V[a=\xcc\x81a>/V[\x91Pa'\
                                     '=\xdfV[a=\xdc\x81a>qV[\x91P[P\x91\x90PV[`'\
                                     '\x00`\x00a=\xfaa=\xf5\x84a)\xdcV[a)\xdcV[\x90P`'\
                                     '\x90`\x02\n\x81\x10\x15a>\rWa>\x1dV[a>\x16\x81a>q'\
                                     'V[\x91Pa>)V[a>&\x81a>/V[\x91P[P\x91'\
                                     '\x90PV[`\x00`\x00a><\x83a)\xdcV[\x90P`\x91`\x02'\
                                     '\n\x81\x10\x15a>OWa>_V[a>X\x81a>\xbbV[\x91'\
                                     'Pa>kV[a>h\x81a>\xfdV[\x91P[P\x91\x90PV'\
                                     '[`\x00`\x00a>\x86a>\x81\x84a)\xdcV[a)\xdcV[\x90'\
                                     'P`\x91`\x02\n\x81\x10\x15a>\x99Wa>\xa9V[a>\xa2\x81a'\
                                     '>\xfdV[\x91Pa>\xb5V[a>\xb2\x81a>\xbbV[\x91P['\
                                     'P\x91\x90PV[`\x00`\x00a>\xc8\x83a)\xdcV[\x90P`\x92'\
                                     '`\x02\n\x81\x10\x15a>\xdbWa>\xebV[a>\xe4\x81a?GV'\
                                     '[\x91Pa>\xf7V[a>\xf4\x81a?\x89V[\x91P[P\x91\x90'\
                                     'PV[`\x00`\x00a?\x12a?\r\x84a)\xdcV[a)\xdcV'\
                                     '[\x90P`\x92`\x02\n\x81\x10\x15a?%Wa?5V[a?.'\
                                     '\x81a?\x89V[\x91Pa?AV[a?>\x81a?GV[\x91'\
                                     'P[P\x91\x90PV[`\x00`\x00a?T\x83a)\xdcV[\x90P'\
                                     '`\x93`\x02\n\x81\x10\x15a?gWa?wV[a?p\x81a?'\
                                     '\xd3V[\x91Pa?\x83V[a?\x80\x81a@\x15V[\x91P[P'\
                                     '\x91\x90PV[`\x00`\x00a?\x9ea?\x99\x84a)\xdcV[a)'\
                                     '\xdcV[\x90P`\x93`\x02\n\x81\x10\x15a?\xb1Wa?\xc1V[a'\
                                     '?\xba\x81a@\x15V[\x91Pa?\xcdV[a?\xca\x81a?\xd3V'\
                                     '[\x91P[P\x91\x90PV[`\x00`\x00a?\xe0\x83a)\xdcV['\
                                     '\x90P`\x94`\x02\n\x81\x10\x15a?\xf3Wa@\x03V[a?\xfc\x81'\
                                     'a@_V[\x91Pa@\x0fV[a@\x0c\x81a@\xa1V[\x91P'\
                                     '[P\x91\x90PV[`\x00`\x00a@*a@%\x84a)\xdcV['\
                                     'a)\xdcV[\x90P`\x94`\x02\n\x81\x10\x15a@=Wa@MV'\
                                     '[a@F\x81a@\xa1V[\x91Pa@YV[a@V\x81a@'\
                                     '_V[\x91P[P\x91\x90PV[`\x00`\x00a@l\x83a)\xdc'\
                                     'V[\x90P`\x95`\x02\n\x81\x10\x15a@\x7fWa@\x8fV[a@'\
                                     '\x88\x81a@\xebV[\x91Pa@\x9bV[a@\x98\x81aA-V['\
                                     '\x91P[P\x91\x90PV[`\x00`\x00a@\xb6a@\xb1\x84a)\xdc'\
                                     'V[a)\xdcV[\x90P`\x95`\x02\n\x81\x10\x15a@\xc9Wa@'\
                                     '\xd9V[a@\xd2\x81aA-V[\x91Pa@\xe5V[a@\xe2\x81'\
                                     'a@\xebV[\x91P[P\x91\x90PV[`\x00`\x00a@\xf8\x83a'\
                                     ')\xdcV[\x90P`\x96`\x02\n\x81\x10\x15aA\x0bWaA\x1bV['\
                                     "aA\x14\x81aAwV[\x91PaA'V[aA$\x81aA\xb9"\
                                     'V[\x91P[P\x91\x90PV[`\x00`\x00aABaA=\x84a'\
                                     ')\xdcV[a)\xdcV[\x90P`\x96`\x02\n\x81\x10\x15aAUW'\
                                     'aAeV[aA^\x81aA\xb9V[\x91PaAqV[aA'\
                                     'n\x81aAwV[\x91P[P\x91\x90PV[`\x00`\x00aA\x84'\
                                     '\x83a)\xdcV[\x90P`\x97`\x02\n\x81\x10\x15aA\x97WaA\xa7'\
                                     'V[aA\xa0\x81aB\x03V[\x91PaA\xb3V[aA\xb0\x81a'\
                                     'BEV[\x91P[P\x91\x90PV[`\x00`\x00aA\xceaA\xc9'\
                                     '\x84a)\xdcV[a)\xdcV[\x90P`\x97`\x02\n\x81\x10\x15aA'\
                                     '\xe1WaA\xf1V[aA\xea\x81aBEV[\x91PaA\xfdV['\
                                     'aA\xfa\x81aB\x03V[\x91P[P\x91\x90PV[`\x00`\x00a'\
                                     'B\x10\x83a)\xdcV[\x90P`\x98`\x02\n\x81\x10\x15aB#Wa'\
                                     'B3V[aB,\x81aB\x8fV[\x91PaB?V[aB<'\
                                     '\x81aB\xd1V[\x91P[P\x91\x90PV[`\x00`\x00aBZa'\
                                     'BU\x84a)\xdcV[a)\xdcV[\x90P`\x98`\x02\n\x81\x10\x15'\
                                     'aBmWaB}V[aBv\x81aB\xd1V[\x91PaB\x89'\
                                     'V[aB\x86\x81aB\x8fV[\x91P[P\x91\x90PV[`\x00`'\
                                     '\x00aB\x9c\x83a)\xdcV[\x90P`\x99`\x02\n\x81\x10\x15aB\xaf'\
                                     'WaB\xbfV[aB\xb8\x81aC\x1bV[\x91PaB\xcbV[a'\
                                     'B\xc8\x81aC]V[\x91P[P\x91\x90PV[`\x00`\x00aB'\
                                     '\xe6aB\xe1\x84a)\xdcV[a)\xdcV[\x90P`\x99`\x02\n\x81'\
                                     '\x10\x15aB\xf9WaC\tV[aC\x02\x81aC]V[\x91Pa'\
                                     'C\x15V[aC\x12\x81aC\x1bV[\x91P[P\x91\x90PV[`'\
                                     '\x00`\x00aC(\x83a)\xdcV[\x90P`\x9a`\x02\n\x81\x10\x15a'\
                                     'C;WaCKV[aCD\x81aC\xa7V[\x91PaCWV'\
                                     '[aCT\x81aC\xe9V[\x91P[P\x91\x90PV[`\x00`\x00'\
                                     'aCraCm\x84a)\xdcV[a)\xdcV[\x90P`\x9a`\x02'\
                                     '\n\x81\x10\x15aC\x85WaC\x95V[aC\x8e\x81aC\xe9V[\x91'\
                                     'PaC\xa1V[aC\x9e\x81aC\xa7V[\x91P[P\x91\x90PV'\
                                     '[`\x00`\x00aC\xb4\x83a)\xdcV[\x90P`\x9b`\x02\n\x81\x10'\
                                     '\x15aC\xc7WaC\xd7V[aC\xd0\x81aD3V[\x91PaC'\
                                     '\xe3V[aC\xe0\x81aDuV[\x91P[P\x91\x90PV[`\x00'\
                                     '`\x00aC\xfeaC\xf9\x84a)\xdcV[a)\xdcV[\x90P`\x9b'\
                                     '`\x02\n\x81\x10\x15aD\x11WaD!V[aD\x1a\x81aDuV'\
                                     '[\x91PaD-V[aD*\x81aD3V[\x91P[P\x91\x90'\
                                     'PV[`\x00`\x00aD@\x83a)\xdcV[\x90P`\x9c`\x02\n'\
                                     '\x81\x10\x15aDSWaDcV[aD\\\x81aD\xbfV[\x91P'\
                                     'aDoV[aDl\x81aE\x01V[\x91P[P\x91\x90PV['\
                                     '`\x00`\x00aD\x8aaD\x85\x84a)\xdcV[a)\xdcV[\x90P'\
                                     '`\x9c`\x02\n\x81\x10\x15aD\x9dWaD\xadV[aD\xa6\x81aE'\
                                     '\x01V[\x91PaD\xb9V[aD\xb6\x81aD\xbfV[\x91P[P'\
                                     '\x91\x90PV[`\x00`\x00aD\xcc\x83a)\xdcV[\x90P`\x9d`'\
                                     '\x02\n\x81\x10\x15aD\xdfWaD\xefV[aD\xe8\x81aEKV['\
                                     '\x91PaD\xfbV[aD\xf8\x81aE\x8dV[\x91P[P\x91\x90P'\
                                     'V[`\x00`\x00aE\x16aE\x11\x84a)\xdcV[a)\xdcV['\
                                     '\x90P`\x9d`\x02\n\x81\x10\x15aE)WaE9V[aE2\x81'\
                                     'aE\x8dV[\x91PaEEV[aEB\x81aEKV[\x91P'\
                                     '[P\x91\x90PV[`\x00`\x00aEX\x83a)\xdcV[\x90P`'\
                                     '\x9e`\x02\n\x81\x10\x15aEkWaE{V[aEt\x81aE\xd7'\
                                     'V[\x91PaE\x87V[aE\x84\x81aF\x19V[\x91P[P\x91'\
                                     '\x90PV[`\x00`\x00aE\xa2aE\x9d\x84a)\xdcV[a)\xdc'\
                                     'V[\x90P`\x9e`\x02\n\x81\x10\x15aE\xb5WaE\xc5V[aE'\
                                     '\xbe\x81aF\x19V[\x91PaE\xd1V[aE\xce\x81aE\xd7V['\
                                     '\x91P[P\x91\x90PV[`\x00`\x00aE\xe4\x83a)\xdcV[\x90'\
                                     'P`\x9f`\x02\n\x81\x10\x15aE\xf7WaF\x07V[aF\x00\x81a'\
                                     'FcV[\x91PaF\x13V[aF\x10\x81aF\xa5V[\x91P['\
                                     'P\x91\x90PV[`\x00`\x00aF.aF)\x84a)\xdcV[a'\
                                     ')\xdcV[\x90P`\x9f`\x02\n\x81\x10\x15aFAWaFQV['\
                                     'aFJ\x81aF\xa5V[\x91PaF]V[aFZ\x81aFc'\
                                     'V[\x91P[P\x91\x90PV[`\x00`\x00aFp\x83a)\xdcV'\
                                     '[\x90P`\xa0`\x02\n\x81\x10\x15aF\x83WaF\x93V[aF\x8c'\
                                     '\x81aF\xefV[\x91PaF\x9fV[aF\x9c\x81aG1V[\x91'\
                                     'P[P\x91\x90PV[`\x00`\x00aF\xbaaF\xb5\x84a)\xdcV'\
                                     '[a)\xdcV[\x90P`\xa0`\x02\n\x81\x10\x15aF\xcdWaF\xdd'\
                                     'V[aF\xd6\x81aG1V[\x91PaF\xe9V[aF\xe6\x81a'\
                                     'F\xefV[\x91P[P\x91\x90PV[`\x00`\x00aF\xfc\x83a)'\
                                     '\xdcV[\x90P`\xa1`\x02\n\x81\x10\x15aG\x0fWaG\x1fV[a'\
                                     'G\x18\x81aG{V[\x91PaG+V[aG(\x81aG\xbdV'\
                                     '[\x91P[P\x91\x90PV[`\x00`\x00aGFaGA\x84a)'\
                                     '\xdcV[a)\xdcV[\x90P`\xa1`\x02\n\x81\x10\x15aGYWa'\
                                     'GiV[aGb\x81aG\xbdV[\x91PaGuV[aGr'\
                                     '\x81aG{V[\x91P[P\x91\x90PV[`\x00`\x00aG\x88\x83'\
                                     'a)\xdcV[\x90P`\xa2`\x02\n\x81\x10\x15aG\x9bWaG\xabV'\
                                     '[aG\xa4\x81aH\x07V[\x91PaG\xb7V[aG\xb4\x81aH'\
                                     'IV[\x91P[P\x91\x90PV[`\x00`\x00aG\xd2aG\xcd\x84'\
                                     'a)\xdcV[a)\xdcV[\x90P`\xa2`\x02\n\x81\x10\x15aG\xe5'\
                                     'WaG\xf5V[aG\xee\x81aHIV[\x91PaH\x01V[a'\
                                     'G\xfe\x81aH\x07V[\x91P[P\x91\x90PV[`\x00`\x00aH'\
                                     "\x14\x83a)\xdcV[\x90P`\xa3`\x02\n\x81\x10\x15aH'WaH"\
                                     '7V[aH0\x81aH\x93V[\x91PaHCV[aH@\x81'\
                                     'aH\xd5V[\x91P[P\x91\x90PV[`\x00`\x00aH^aH'\
                                     'Y\x84a)\xdcV[a)\xdcV[\x90P`\xa3`\x02\n\x81\x10\x15a'\
                                     'HqWaH\x81V[aHz\x81aH\xd5V[\x91PaH\x8dV'\
                                     '[aH\x8a\x81aH\x93V[\x91P[P\x91\x90PV[`\x00`\x00'\
                                     'aH\xa0\x83a)\xdcV[\x90P`\xa4`\x02\n\x81\x10\x15aH\xb3W'\
                                     'aH\xc3V[aH\xbc\x81aI\x1fV[\x91PaH\xcfV[aH'\
                                     '\xcc\x81aIaV[\x91P[P\x91\x90PV[`\x00`\x00aH\xea'\
                                     'aH\xe5\x84a)\xdcV[a)\xdcV[\x90P`\xa4`\x02\n\x81\x10'\
                                     '\x15aH\xfdWaI\rV[aI\x06\x81aIaV[\x91PaI'\
                                     '\x19V[aI\x16\x81aI\x1fV[\x91P[P\x91\x90PV[`\x00'\
                                     '`\x00aI,\x83a)\xdcV[\x90P`\xa5`\x02\n\x81\x10\x15aI'\
                                     '?WaIOV[aIH\x81aI\xabV[\x91PaI[V['\
                                     'aIX\x81aI\xedV[\x91P[P\x91\x90PV[`\x00`\x00a'\
                                     'IvaIq\x84a)\xdcV[a)\xdcV[\x90P`\xa5`\x02\n'\
                                     '\x81\x10\x15aI\x89WaI\x99V[aI\x92\x81aI\xedV[\x91P'\
                                     'aI\xa5V[aI\xa2\x81aI\xabV[\x91P[P\x91\x90PV['\
                                     '`\x00`\x00aI\xb8\x83a)\xdcV[\x90P`\xa6`\x02\n\x81\x10\x15'\
                                     'aI\xcbWaI\xdbV[aI\xd4\x81aJ7V[\x91PaI\xe7'\
                                     'V[aI\xe4\x81aJyV[\x91P[P\x91\x90PV[`\x00`'\
                                     '\x00aJ\x02aI\xfd\x84a)\xdcV[a)\xdcV[\x90P`\xa6`'\
                                     '\x02\n\x81\x10\x15aJ\x15WaJ%V[aJ\x1e\x81aJyV['\
                                     '\x91PaJ1V[aJ.\x81aJ7V[\x91P[P\x91\x90P'\
                                     'V[`\x00`\x00aJD\x83a)\xdcV[\x90P`\xa7`\x02\n\x81'\
                                     '\x10\x15aJWWaJgV[aJ`\x81aJ\xc3V[\x91Pa'\
                                     'JsV[aJp\x81aK\x05V[\x91P[P\x91\x90PV[`'\
                                     '\x00`\x00aJ\x8eaJ\x89\x84a)\xdcV[a)\xdcV[\x90P`'\
                                     '\xa7`\x02\n\x81\x10\x15aJ\xa1WaJ\xb1V[aJ\xaa\x81aK\x05'\
                                     'V[\x91PaJ\xbdV[aJ\xba\x81aJ\xc3V[\x91P[P\x91'\
                                     '\x90PV[`\x00`\x00aJ\xd0\x83a)\xdcV[\x90P`\xa8`\x02'\
                                     '\n\x81\x10\x15aJ\xe3WaJ\xf3V[aJ\xec\x81aKOV[\x91'\
                                     'PaJ\xffV[aJ\xfc\x81aK\x91V[\x91P[P\x91\x90PV'\
                                     '[`\x00`\x00aK\x1aaK\x15\x84a)\xdcV[a)\xdcV[\x90'\
                                     'P`\xa8`\x02\n\x81\x10\x15aK-WaK=V[aK6\x81a'\
                                     'K\x91V[\x91PaKIV[aKF\x81aKOV[\x91P['\
                                     'P\x91\x90PV[`\x00`\x00aK\\\x83a)\xdcV[\x90P`\xa9'\
                                     '`\x02\n\x81\x10\x15aKoWaK\x7fV[aKx\x81aK\xdbV'\
                                     '[\x91PaK\x8bV[aK\x88\x81aL\x1dV[\x91P[P\x91\x90'\
                                     'PV[`\x00`\x00aK\xa6aK\xa1\x84a)\xdcV[a)\xdcV'\
                                     '[\x90P`\xa9`\x02\n\x81\x10\x15aK\xb9WaK\xc9V[aK\xc2'\
                                     '\x81aL\x1dV[\x91PaK\xd5V[aK\xd2\x81aK\xdbV[\x91'\
                                     'P[P\x91\x90PV[`\x00`\x00aK\xe8\x83a)\xdcV[\x90P'\
                                     '`\xaa`\x02\n\x81\x10\x15aK\xfbWaL\x0bV[aL\x04\x81aL'\
                                     'gV[\x91PaL\x17V[aL\x14\x81aL\xa9V[\x91P[P'\
                                     '\x91\x90PV[`\x00`\x00aL2aL-\x84a)\xdcV[a)'\
                                     '\xdcV[\x90P`\xaa`\x02\n\x81\x10\x15aLEWaLUV[a'\
                                     'LN\x81aL\xa9V[\x91PaLaV[aL^\x81aLgV'\
                                     '[\x91P[P\x91\x90PV[`\x00`\x00aLt\x83a)\xdcV['\
                                     '\x90P`\xab`\x02\n\x81\x10\x15aL\x87WaL\x97V[aL\x90\x81'\
                                     'aL\xf3V[\x91PaL\xa3V[aL\xa0\x81aM5V[\x91P'\
                                     '[P\x91\x90PV[`\x00`\x00aL\xbeaL\xb9\x84a)\xdcV['\
                                     'a)\xdcV[\x90P`\xab`\x02\n\x81\x10\x15aL\xd1WaL\xe1V'\
                                     '[aL\xda\x81aM5V[\x91PaL\xedV[aL\xea\x81aL'\
                                     '\xf3V[\x91P[P\x91\x90PV[`\x00`\x00aM\x00\x83a)\xdc'\
                                     'V[\x90P`\xac`\x02\n\x81\x10\x15aM\x13WaM#V[aM'\
                                     '\x1c\x81aM\x7fV[\x91PaM/V[aM,\x81aM\xc1V['\
                                     '\x91P[P\x91\x90PV[`\x00`\x00aMJaME\x84a)\xdc'\
                                     'V[a)\xdcV[\x90P`\xac`\x02\n\x81\x10\x15aM]WaM'\
                                     'mV[aMf\x81aM\xc1V[\x91PaMyV[aMv\x81'\
                                     'aM\x7fV[\x91P[P\x91\x90PV[`\x00`\x00aM\x8c\x83a'\
                                     ')\xdcV[\x90P`\xad`\x02\n\x81\x10\x15aM\x9fWaM\xafV['\
                                     'aM\xa8\x81aN\x0bV[\x91PaM\xbbV[aM\xb8\x81aNM'\
                                     'V[\x91P[P\x91\x90PV[`\x00`\x00aM\xd6aM\xd1\x84a'\
                                     ')\xdcV[a)\xdcV[\x90P`\xad`\x02\n\x81\x10\x15aM\xe9W'\
                                     'aM\xf9V[aM\xf2\x81aNMV[\x91PaN\x05V[aN'\
                                     '\x02\x81aN\x0bV[\x91P[P\x91\x90PV[`\x00`\x00aN\x18'\
                                     '\x83a)\xdcV[\x90P`\xae`\x02\n\x81\x10\x15aN+WaN;'\
                                     'V[aN4\x81aN\x97V[\x91PaNGV[aND\x81a'\
                                     'N\xd9V[\x91P[P\x91\x90PV[`\x00`\x00aNbaN]'\
                                     '\x84a)\xdcV[a)\xdcV[\x90P`\xae`\x02\n\x81\x10\x15aN'\
                                     'uWaN\x85V[aN~\x81aN\xd9V[\x91PaN\x91V['\
                                     'aN\x8e\x81aN\x97V[\x91P[P\x91\x90PV[`\x00`\x00a'\
                                     'N\xa4\x83a)\xdcV[\x90P`\xaf`\x02\n\x81\x10\x15aN\xb7Wa'\
                                     'N\xc7V[aN\xc0\x81aO#V[\x91PaN\xd3V[aN\xd0'\
                                     '\x81aOeV[\x91P[P\x91\x90PV[`\x00`\x00aN\xeea'\
                                     'N\xe9\x84a)\xdcV[a)\xdcV[\x90P`\xaf`\x02\n\x81\x10\x15'\
                                     'aO\x01WaO\x11V[aO\n\x81aOeV[\x91PaO\x1d'\
                                     'V[aO\x1a\x81aO#V[\x91P[P\x91\x90PV[`\x00`'\
                                     '\x00aO0\x83a)\xdcV[\x90P`\xb0`\x02\n\x81\x10\x15aOC'\
                                     'WaOSV[aOL\x81aO\xafV[\x91PaO_V[a'\
                                     'O\\\x81aO\xf1V[\x91P[P\x91\x90PV[`\x00`\x00aO'\
                                     'zaOu\x84a)\xdcV[a)\xdcV[\x90P`\xb0`\x02\n\x81'\
                                     '\x10\x15aO\x8dWaO\x9dV[aO\x96\x81aO\xf1V[\x91Pa'\
                                     'O\xa9V[aO\xa6\x81aO\xafV[\x91P[P\x91\x90PV[`'\
                                     '\x00`\x00aO\xbc\x83a)\xdcV[\x90P`\xb1`\x02\n\x81\x10\x15a'\
                                     'O\xcfWaO\xdfV[aO\xd8\x81a*\x11V[\x91PaO\xebV'\
                                     '[aO\xe8\x81a*#V[\x91P[P\x91\x90PV[`\x00`\x00'\
                                     'aP\x06aP\x01\x84a)\xdcV[a)\xdcV[\x90P`\xb1`\x02'\
                                     '\n\x81\x10\x15aP\x19WaP)V[aP"\x81a*#V[\x91'\
                                     'PaP5V[aP2\x81a*\x11V[\x91P[P\x91\x90PV', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = '\x95\x80]\xad\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_ackermann32(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 100000000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\xe0`\x02\n`\x005\x04\x80c(9\xe9(\x14`\x1eW\x80ca\x04\x7f\xf4\x14`4W\x00[`*`\x045`$5`GV[\x80`\x00R` `\x00\xf3[`=`\x045`\x99V[\x80`\x00R` `\x00\xf3'\
                             '[`\x00\x82`\x00\x14`TW`^V[\x81`\x01\x01\x90P`\x93V[\x81`\x00\x14`iW`{V[`u`\x01\x84\x03`\x01`GV[\x90P`\x93V[`\x90`\x01\x84\x03`\x8c\x85`\x01\x86\x03`GV[`'\
                             'GV[\x90P[\x92\x91PPV[`\x00\x81`\x00\x14\x80`\xa9WP\x81`\x01\x14[`\xb0W`\xb7V[\x81\x90P`\xcfV[`\xc1`\x02\x83\x03`\x99V[`\xcb`\x01\x84\x03`\x99V[\x01\x90P[\x91\x90PV',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xe0`\x02\n`\x005\x04\x80c(9\xe9(\x14`\x1eW\x80ca\x04'\
                                     '\x7f\xf4\x14`4W\x00[`*`\x045`$5`GV[\x80`\x00'\
                                     'R` `\x00\xf3[`=`\x045`\x99V[\x80`\x00R` `'\
                                     '\x00\xf3[`\x00\x82`\x00\x14`TW`^V[\x81`\x01\x01\x90P`'\
                                     '\x93V[\x81`\x00\x14`iW`{V[`u`\x01\x84\x03`\x01`'\
                                     'GV[\x90P`\x93V[`\x90`\x01\x84\x03`\x8c\x85`\x01\x86\x03`'\
                                     'GV[`GV[\x90P[\x92\x91PPV[`\x00\x81`\x00\x14\x80'\
                                     '`\xa9WP\x81`\x01\x14[`\xb0W`\xb7V[\x81\x90P`\xcfV['\
                                     '`\xc1`\x02\x83\x03`\x99V[`\xcb`\x01\x84\x03`\x99V[\x01\x90P'\
                                     '[\x91\x90PV', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = '(9\xe9(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_ackermann33(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 100000000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xe0`\x02\n`\x005\x04\x80c(9\xe9(\x14`\x1eW\x80ca\x04'\
                                     '\x7f\xf4\x14`4W\x00[`*`\x045`$5`GV[\x80`\x00'\
                                     'R` `\x00\xf3[`=`\x045`\x99V[\x80`\x00R` `'\
                                     '\x00\xf3[`\x00\x82`\x00\x14`TW`^V[\x81`\x01\x01\x90P`'\
                                     '\x93V[\x81`\x00\x14`iW`{V[`u`\x01\x84\x03`\x01`'\
                                     'GV[\x90P`\x93V[`\x90`\x01\x84\x03`\x8c\x85`\x01\x86\x03`'\
                                     'GV[`GV[\x90P[\x92\x91PPV[`\x00\x81`\x00\x14\x80'\
                                     '`\xa9WP\x81`\x01\x14[`\xb0W`\xb7V[\x81\x90P`\xcfV['\
                                     '`\xc1`\x02\x83\x03`\x99V[`\xcb`\x01\x84\x03`\x99V[\x01\x90P'\
                                     '[\x91\x90PV', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = '(9\xe9(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_ackermann31(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 100000000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\xe0`\x02\n`\x005\x04\x80c(9\xe9(\x14`\x1eW\x80ca\x04\x7f\xf4\x14`4W\x00[`*`\x045`$5`GV[\x80`\x00R` `\x00\xf3[`=`\x045`\x99V[\x80`\x00R` `\x00\xf3'\
                             '[`\x00\x82`\x00\x14`TW`^V[\x81`\x01\x01\x90P`\x93V[\x81`\x00\x14`iW`{V[`u`\x01\x84\x03`\x01`GV[\x90P`\x93V[`\x90`\x01\x84\x03`\x8c\x85`\x01\x86\x03`GV[`'\
                             'GV[\x90P[\x92\x91PPV[`\x00\x81`\x00\x14\x80`\xa9WP\x81`\x01\x14[`\xb0W`\xb7V[\x81\x90P`\xcfV[`\xc1`\x02\x83\x03`\x99V[`\xcb`\x01\x84\x03`\x99V[\x01\x90P[\x91\x90PV',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xe0`\x02\n`\x005\x04\x80c(9\xe9(\x14`\x1eW\x80ca\x04'\
                                     '\x7f\xf4\x14`4W\x00[`*`\x045`$5`GV[\x80`\x00'\
                                     'R` `\x00\xf3[`=`\x045`\x99V[\x80`\x00R` `'\
                                     '\x00\xf3[`\x00\x82`\x00\x14`TW`^V[\x81`\x01\x01\x90P`'\
                                     '\x93V[\x81`\x00\x14`iW`{V[`u`\x01\x84\x03`\x01`'\
                                     'GV[\x90P`\x93V[`\x90`\x01\x84\x03`\x8c\x85`\x01\x86\x03`'\
                                     'GV[`GV[\x90P[\x92\x91PPV[`\x00\x81`\x00\x14\x80'\
                                     '`\xa9WP\x81`\x01\x14[`\xb0W`\xb7V[\x81\x90P`\xcfV['\
                                     '`\xc1`\x02\x83\x03`\x99V[`\xcb`\x01\x84\x03`\x99V[\x01\x90P'\
                                     '[\x91\x90PV', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = '(9\xe9(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_loop_exp_32b_100k(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 20000,
                   'gaslimit': 100000000000,
                   'number': 9999,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '```@R`\xe0`\x02\n`\x005\x04c3\x92\xff\xc8\x81\x14a\x00?W\x80c<w\xb9\\\x14a\x00jW\x80c\xceg\xbd\xa6\x14a\x00\xc2W\x80c\xeb\xbb\xe0\x0b\x14a\x00\xe8W[a\x00\x02V[4a\x00\x02Wa\x01'\
                             '\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90\x85\x90\n\x90`\x01\x01a\x00UV[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90\x85\x90\n\x85'\
                             '\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x90`\x10\x01a\x00\x80V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`'\
                             '\x00\x80[\x82\x81\x10\x15a\x01)W[`\x01\x01a\x00\xd7V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x80[\x82\x81\x10\x15a\x01)W[`\x10\x01a\x00\xfdV[`@\x80Q\x91\x82RQ\x90\x81\x90\x03`'\
                             ' \x01\x90\xf3[P\x94\x93PPPPV[P\x91\x93\x92PPPV',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='```@R`\xe0`\x02\n`\x005\x04c3\x92\xff\xc8\x81\x14a\x00'\
                                     '?W\x80c<w\xb9\\\x14a\x00jW\x80c\xceg\xbd\xa6\x14a\x00\xc2'\
                                     'W\x80c\xeb\xbb\xe0\x0b\x14a\x00\xe8W[a\x00\x02V[4a\x00\x02W'\
                                     'a\x01\x0e`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01'\
                                     ' W\x90\x85\x90\n\x90`\x01\x01a\x00UV[4a\x00\x02Wa\x01\x0e'\
                                     '`\x045`$5`D5`\x00\x82\x81[\x83\x81\x10\x15a\x01 W\x90'\
                                     '\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90'\
                                     '\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85\x90\n\x85'\
                                     '\x90\n\x90`\x10\x01a\x00\x80V[4a\x00\x02Wa\x01\x0e`\x045`'\
                                     '$5`D5`\x00\x80[\x82\x81\x10\x15a\x01)W[`\x01\x01a\x00'\
                                     '\xd7V[4a\x00\x02Wa\x01\x0e`\x045`$5`D5`\x00\x80'\
                                     '[\x82\x81\x10\x15a\x01)W[`\x10\x01a\x00\xfdV[`@\x80Q\x91'\
                                     '\x82RQ\x90\x81\x90\x03` \x01\x90\xf3[P\x94\x93PPPPV[P'\
                                     '\x91\x93\x92PPPV', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = '3\x92\xff\xc8\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00XQ\xf4-L\x95\x7f-\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x86\xa0'
        caller = 1170859069862169782511871033392474246841492526721L
        value = 0        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log3_logMemStartTooHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x01\x7f\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xa3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log3_nonEmptyMem_logMemSize1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x01`\x00\xa3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x01`\x00'\
                                     '\xa3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log3_PC(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\xff`\x00SXXX` `\x00\xa3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xff`\x00SXXX` `\x00\xa3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log2_nonEmptyMem(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R`\x00`\x00` `\x00\xa2',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R`\x00`\x00` `\x00\xa2', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log2_emptyMem(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x00`\x00`\x00`\x00\xa2',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x00`\x00`\x00`\x00\xa2', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log1_emptyMem(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x00`\x00`\x00\xa1',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x00`\x00`\x00\xa1', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log0_nonEmptyMem_logMemSize1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x01`\x00\xa0',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x01`\x00\xa0', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log1_nonEmptyMem_logMemSize1_logMemStart31(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x01`\x1f\xa1',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x01`\x1f\xa1', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log0_logMemsizeTooHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '`\x01\xa0', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log3_Caller(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\xff`\x00S3`\x00`\x00` `\x00\xa3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xff`\x00S3`\x00`\x00` `\x00\xa3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log1_logMemsizeTooHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00\x7f\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff`\x01\xa1', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log4_PC(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\xff`\x00SXXXX` `\x00\xa4',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xff`\x00SXXXX` `\x00\xa4', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log3_nonEmptyMem(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R`\x00`\x00`\x00` `\x00\xa3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R`\x00`\x00`\x00` `\x00'\
                                     '\xa3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log3_logMemsizeTooHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00\x7f\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff`\x01\xa3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log1_logMemsizeZero(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x01\xa1',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x01\xa1', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log0_emptyMem(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x00`\x00\xa0',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x00`\x00\xa0', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log4_nonEmptyMem(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R`\x00`\x00`\x00`\x00` `\x00\xa4',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R`\x00`\x00`\x00`\x00` '\
                                     '`\x00\xa4', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log3_logMemsizeZero(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x00`\x01\xa3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x00`\x01'\
                                     '\xa3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log_2logs(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R` `\x00\xa0`\x10`\x02\xa0',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R` `\x00\xa0`\x10`\x02\xa0', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log4_emptyMem(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x00`\x00`\x00`\x00`\x00`\x00\xa4',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x00`\x00`\x00`\x00`\x00`\x00\xa4', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log0_logMemsizeZero(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x01\xa0',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x01\xa0', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log2_nonEmptyMem_logMemSize1_logMemStart31(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x01`\x1f\xa2',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x01`\x1f\xa2', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log1_nonEmptyMem(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R`\x00` `\x00\xa1',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R`\x00` `\x00\xa1', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log0_nonEmptyMem_logMemSize1_logMemStart31(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x01`\x1f\xa0',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x01`\x1f\xa0', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log2_Caller(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\xff`\x00S3`\x00` `\x00\xa2',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xff`\x00S3`\x00` `\x00\xa2', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log2_nonEmptyMem_logMemSize1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x01`\x00\xa2',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x01`\x00\xa2', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log1_nonEmptyMem_logMemSize1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x01`\x00\xa1',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x01`\x00\xa1', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log0_logMemStartTooHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x01\x7f\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xa0', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log3_MaxTopic(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff'\
                             '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff` `\x00\xa3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff` `'\
                                     '\x00\xa3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log1_logMemStartTooHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x01\x7f\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xa1', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log2_logMemsizeTooHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00\x7f\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff`\x01\xa2', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log1_Caller(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\xff`\x00S3` `\x00\xa1',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xff`\x00S3` `\x00\xa1', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log4_logMemStartTooHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x00`\x01'\
                                     '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xa4', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log0_nonEmptyMem(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R` `\x00\xa0',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00R` `\x00\xa0', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log3_emptyMem(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x00`\x00`\x00`\x00`\x00\xa3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x00`\x00`\x00`\x00`\x00\xa3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log4_logMemsizeTooHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x00\x7f\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff`\x01\xa4', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log4_MaxTopic(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff'\
                             '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff'\
                             '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff` `\x00\xa4',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff` `\x00\xa4', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log4_nonEmptyMem_logMemSize1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x00`\x01`\x00\xa4',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x00`\x01'\
                                     '`\x00\xa4', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log3_nonEmptyMem_logMemSize1_logMemStart31(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x01`\x1f\xa3',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x01`\x1f'\
                                     '\xa3', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log2_logMemStartTooHigh(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x01\x7f\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xa2', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log1_MaxTopic(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff` '\
                             '`\x00\xa1',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '` `\x00\xa1', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log2_MaxTopic(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff'\
                             '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff` `\x00\xa2',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff` `\x00\xa2', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log2_logMemsizeZero(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x01\xa2',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x01\xa2', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log4_logMemsizeZero(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x00`\x00`\x01\xa4',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x00`\x00'\
                                     '`\x01\xa4', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log4_nonEmptyMem_logMemSize1_logMemStart31(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x00`\x01`\x1f\xa4',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xaa\xbb\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xcc\xdd`\x00R`\x00`\x00`\x00`\x00`\x01'\
                                     '`\x1f\xa4', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_log4_Caller(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\xff`\x00S3`\x00`\x00`\x00` `\x00\xa4',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xff`\x00S3`\x00`\x00`\x00` `\x00\xa4', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\xff`\x03U',
                             'storage': {
                              3: 255
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap13(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x9cU',
                             'storage': {
                              13: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`'\
                                     '\x02`\x01`\x03\x9cU', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'b\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 14544639
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='b\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swapjump1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x05`\x02`\x01`\x0cWPP\x00', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap10(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x99U',
                             'storage': {
                              10: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x99'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap11(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x9aU',
                             'storage': {
                              11: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01`'\
                                     '\x03\x9aU', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap12(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x9bU',
                             'storage': {
                              12: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`'\
                                     '\x01`\x03\x9bU', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'a\xee\xff`\x03U',
                             'storage': {
                              3: 61183
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='a\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap14(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x0e`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x9dU',
                             'storage': {
                              14: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x0e`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`'\
                                     '\x03`\x02`\x01`\x03\x9dU', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap15(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x0f`\x0e`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x9eU',
                             'storage': {
                              15: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x0f`\x0e`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`'\
                                     '\x04`\x03`\x02`\x01`\x03\x9eU', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap16(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x10`\x0f`\x0e`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x9fU',
                             'storage': {
                              16: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x10`\x0f`\x0e`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`'\
                                     '\x05`\x04`\x03`\x02`\x01`\x03\x9fU', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push32Undefined3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push5(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'd\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 806595981055
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='d\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push33(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`ea\x07\xd2b\x04\xa0\xc7c\x02i!\xf4d\x0b\xc5X\x8e\xb1e7-'\
                                     '\x0f\x1d\xcanf\x1b\xa1\xd9\x01\x96\x1cqg\x0cU\xf7\xbc#\x03\x8e8h\x05'\
                                     'k\xc7^-c\x0f\xff\xffi\x02\x1e\x19\xe0\xc9\xba\xb2@\x00\x01j\x08]\x1c'\
                                     'n\x80P\xf0\xea\x1cq\xbdk\x06\x88\xbe6T?<6\xe68\xe3zl\x03'\
                                     '\xd4\x1fs\xd5]\rH*\xe5UU7m\xc7h\x10\xd0\xfe\x03\xc9\x19d\xd3'\
                                     '\x1cq\xc6\xf4na]\xd06\x0c\x07\xd91f;\x14\xe3\x8e8\xb1o-\xa3'\
                                     "\xf9\x99U\xa3\xad\xcf'\xeb\xb1\xca\xaa\xaa\xaanp\x14\xcc\xbaj\x8b\xb1\xed5"\
                                     '\xbd\x86\xbf\x06\\q\xc7\x1c+q\tI\x1c]G\x81\xb7\x9c\x90\t\xdek\xfb'\
                                     '\x8e8\xe3\x8d\xe8r\x04\x14\xa0\xf6\xfd\xec\x810MLV>t\x0b\xff\xff\xff'\
                                     "\xff\xa5s\x11\x84'\xb3\xb4\xa0[\xc8\xa8\xa4\xde\x84Y\x86\x80\x00\x00\x00\x00\x01"\
                                     't\x06\xeb\x15\xe73\x1ery@\xd4\xacT\xb7\xcd\xca\x1cq\xc7\x1cq\xbdu'\
                                     '\x05g\xa9\x1c\x9f\xef\xc9n\xba\xa6&\xa2/\x98\xc5\xe68\xe3\x8e8\xe3zv'\
                                     '\x03*\xbd\x16\xc5\xb6\x80\x06\xe1]Z\xa3\x07\xe3\x83\xf4\xe5UUUUU7'\
                                     'w\x01\xa6B{\xdcO\rX\xea\xb5\xf4\x8a>\xc6\x7fd\xe2\x1cq\xc7\x1cq'\
                                     '\xc6\xf4x\x08\r\xd0\xa0\xc9\xb9\xff,*\x0ct\x0b\x06\x85:\n\x98\x0e\xe3\x8e'\
                                     '8\xe3\x8e8\xb1y\x03\xc6y\xcb^\x8f/\x9c\xb3\xb5\xd6e+\x0es4\xf7'\
                                     'F\xfa\xaa\xaa\xaa\xaa\xaa\xaanz\x01\xb8s\x81Y\x17\xeb\xb2\xbf;\x89\n\x1a'\
                                     '\xf4\x95\xd6#[\xae<q\xc7\x1cq\xc7\x1c+{\x07\xaeL\xca\x96\xe1\xa5]'\
                                     '\xfaI\xc8Z\xd3\xc3\xe6\x0eBk\x92\xfb\x8e8\xe3\x8e8\xe3\x8d\xe8|\x03`'\
                                     '\x18\xbf\x07N)+\xcc}l\x8b\xea\x0f\x96\x99D0F\x17\x8b\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xa5}\x0e}4\xc6J\x9c\x85\xd4F\r\xbb\xca\x87\x19kaa\x8a'\
                                     'K\xd2\x16\x80\x00\x00\x00\x00\x00\x00\x00\x01~\x05\xb9\x01\xf4\x8a[\x99Mer'\
                                     'P+\xc4\xeaC', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push32(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\x10\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 7267278018962933114737518846705396307879025787387688620599141924857001668351L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\x10\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DU'\
                                     'fw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push31(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '~\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 30272441630670900764332283662402067049651745785153368133042924362431065855L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='~\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUf'\
                                     'w\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push30(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '}"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 236041529438367161416226149772452280584519538267845844975618940456529663L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='}"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw'\
                                     '\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push7(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'f\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 43253395009433343
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='f\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push32Undefined2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\x01\x02\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00U',
                             'storage': {
                              0: 455867247951863528723853059459259808159848198720826202355039887506167300096L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\x01\x02\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push6(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'e\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 187723572702975
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='e\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push19(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'r\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 4949284185019554202595601089728027494736326399L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='r\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push18(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'q\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 20819496144286488316207351472739601914654463L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='q\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap2error(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\x10\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DU'\
                                     'fw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03\x91U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push8(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'g\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 9843086184167632639L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='g\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push11(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'jUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 103242581054127139266096895L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='jUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push10(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'ifw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 483886386883659416071935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='ifw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push13(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'l3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 4061784511476386809083292675839L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='l3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push12(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'kDUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 21148223248905591812551208703L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='kDUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push15(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'n\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 88962710306127702866241727433142015L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='n\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push14(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'm"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 693663711035633181223289836400383L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='m"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push17(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'p\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 86772092527549614310863391136828327063295L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='p\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push16(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'o\x10\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 21356610642864781669327154691918655231L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='o\x10\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup5(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x05`\x04`\x03`\x02`\x01\x84`\x03U',
                             'storage': {
                              3: 5
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x05`\x04`\x03`\x02`\x01\x84`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x04`\x03`\x02`\x01\x83`\x03U',
                             'storage': {
                              3: 4
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x04`\x03`\x02`\x01\x83`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup7(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x07`\x06`\x05`\x04`\x03`\x02`\x01\x86`\x03U',
                             'storage': {
                              3: 7
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x07`\x06`\x05`\x04`\x03`\x02`\x01\x86`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup6(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x06`\x05`\x04`\x03`\x02`\x01\x85`\x03U',
                             'storage': {
                              3: 6
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x06`\x05`\x04`\x03`\x02`\x01\x85`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\x10\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x80`\x03U',
                             'storage': {
                              3: 7267278018962933114737518846705396307879025787387688620599141924857001668351L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\x10\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DU'\
                                     'fw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x80`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'c\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 3437096703
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='c\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x03`\x02`\x01\x82`\x03U',
                             'storage': {
                              3: 3
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x03`\x02`\x01\x82`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x02`\x01\x81`\x03U',
                             'storage': {
                              3: 2
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x02`\x01\x81`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push9(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'hw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 2205005630955604274943L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='hw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push22(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'u\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 63879021646223206928745599140482742456160626713423615L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='u\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff'\
                                     '`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup9(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01\x88`\x03U',
                             'storage': {
                              3: 9
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01\x88`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup8(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01\x87`\x03U',
                             'storage': {
                              3: 8
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01\x87`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap5(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x05`\x04`\x03`\x02`\x01`\x03\x94U',
                             'storage': {
                              5: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x05`\x04`\x03`\x02`\x01`\x03\x94U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push32FillUpInputWithZerosAtTheEnd(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\xff\x10\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xff\x10\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3D'\
                                     'Ufw\x88\x99\xaa\xbb\xcc\xdd', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x02`\x01`\x03\x91U',
                             'storage': {
                              2: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x02`\x01`\x03\x91U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push1_missingStack(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap7(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x07`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x96U',
                             'storage': {
                              7: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x07`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x96U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push32AndSuicide(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            1072149959305905970786075080742599377868915793390L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xff\x10\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3D'\
                                     'Ufw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap3(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x03`\x02`\x01`\x03\x92U',
                             'storage': {
                              3: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x03`\x02`\x01`\x03\x92U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push24(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'w\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 3349428664555350441202743570125338097865186683354112454399L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='w\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd'\
                                     '\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push25(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'xw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 750324535175570361337661684931837641614045484574574219489023L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='xw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc'\
                                     '\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push26(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'yfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 164658005049592578466617795103730423098878750850419443420229375L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='yfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb'\
                                     '\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push27(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'zUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 35131629848125220974259712924447428653982015895563991539578171135L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='zUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa'\
                                     '\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push20(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 's\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 1169583401433082817146156952160516058783057571583L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='s\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push21(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 't\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 274470389582311928521235220670105440734442443108095L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='t\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`'\
                                     '\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup2error(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\x10\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DU'\
                                     'fw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x81`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push23(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': 'v\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 14718367631176285414980439046265314310810353482594119423L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='v\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee'\
                                     '\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap6(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x95U',
                             'storage': {
                              6: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x95U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap1(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\x10\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03\x90U',
                             'storage': {
                              7267278018962933114737518846705396307879025787387688620599141924857001668351L: 3
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\x10\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DU'\
                                     'fw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03\x90U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push28(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '{DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 7196367463310013916432685595414036826338848503132903556832724643583L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='{DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99'\
                                     '\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push29(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '|3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U',
                             'storage': {
                              3: 1382153647487992643444450455033415201181833214052702100093116847353599L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='|3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x00\x11"3DUfw\x88'\
                                     '\x99\xaa\xbb\xcc\xdd\xee\xff`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap8(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x97U',
                             'storage': {
                              8: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x97U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap9(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x98U',
                             'storage': {
                              9: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01`\x03\x98U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup15(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x0f`\x0e`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01\x8e`\x03U',
                             'storage': {
                              3: 15
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x0f`\x0e`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`'\
                                     '\x04`\x03`\x02`\x01\x8e`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup14(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x0e`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01\x8d`\x03U',
                             'storage': {
                              3: 14
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x0e`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`'\
                                     '\x03`\x02`\x01\x8d`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup16(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x10`\x0f`\x0e`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01\x8f`\x03U',
                             'storage': {
                              3: 16
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x10`\x0f`\x0e`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`'\
                                     '\x05`\x04`\x03`\x02`\x01\x8f`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup11(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01\x8a`\x03U',
                             'storage': {
                              3: 11
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01\x8a'\
                                     '`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup10(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01\x89`\x03U',
                             'storage': {
                              3: 10
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01\x89`\x03'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup13(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01\x8c`\x03U',
                             'storage': {
                              3: 13
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\r`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`'\
                                     '\x02`\x01\x8c`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dup12(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`\x01\x8b`\x03U',
                             'storage': {
                              3: 12
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x0c`\x0b`\n`\t`\x08`\x07`\x06`\x05`\x04`\x03`\x02`'\
                                     '\x01\x8b`\x03U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_swap4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\x04`\x03`\x02`\x01`\x03\x93U',
                             'storage': {
                              4: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x04`\x03`\x02`\x01`\x03\x93U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_push32Undefined(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '\x7f\x01\x02\x03`\x00U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\x01\x02\x03`\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_c2777acefaf392edc6fb737a319dc1decfa98dc50e1f54034c38af66b9801c05(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01t\x01\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa2', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_cc4aafff7f0bd1d277c231a2e807bdba6e2af6a1ec19024edc1f311b5c4b3a47(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '~!B\x10n\x8c2$87=E\xa1~\xce\xce\x13\xff.PR\x1e\x8e\x95\x9a\xb4\xa3\x8dOS\xa2Y`U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='~!B\x10n\x8c2$87=E\xa1~\xce\xce\x13\xff.PR\x1e\x8e'\
                                     '\x95\x9a\xb4\xa3\x8dOS\xa2Y`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_d5193db656cc4e52ae34d75fa172241eec0ac47079da537290b531515dd1dfe2(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00s'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x7f'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01`\x00t\x01\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf1`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_c1c8a2b249ca523f6c91b0e2118bf7eedb06a7b3aa76470c325602f113ceb4a8(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'h`\x12\xabKfeq\xa7\xe9`U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='h`\x12\xabKfeq\xa7\xe9`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_e3085a847285614cec4bbc7590d6e2786dc3356b56569aa174be8e868a3fbce9(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'q~q\xe34\xc7\x9a\xd0\x96c\xa7\x99\xc8\xceg2x0P`U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='q~q\xe34\xc7\x9a\xd0\x96c\xa7\x99\xc8\xceg2x0P`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_9a8675e9c165e133e82f5e6100a599cf28c0a1e27292d7c5251fc6f238a5c300(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfft\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                             '\xff\xff\xff\xff\xff\xff\xff`\x01`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfft\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00s\xff\xff'\
                             '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01\x8a`U`\x01U`\x02U`\x03U`\x04U`\x05U`\x06U`\x07U`\x08U`\tU`\nU`\x0bU',
                             'storage': {
                              1: 85,
                              2: 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                              3: 1,
                              4: 1461501637330902918203684832716283019655932542975L,
                              6: 1461501637330902918203684832716283019655932542976L,
                              7: 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                              9: 1,
                              10: 1461501637330902918203684832716283019655932542975L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfft\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     't\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`'\
                                     '\x00s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`'\
                                     '\x01\x8a`U`\x01U`\x02U`\x03U`\x04U`\x05U`\x06U`'\
                                     '\x07U`\x08U`\tU`\nU`\x0bU', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_9cdebfc35c7f26ebb37490cd25a103252f331389b10c86736d478c519e8cc1a9(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 's\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfft\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                             '\x00\x00\x00\x00\x00\x00\x00`\x01`\x00s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfft\x01\x00\x00'\
                             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x01`\x00\x9a`U`\x01U`\x02U`\x03U`\x04U`\x05U`\x06U`\x07U`\x08U`\tU`\nU`\x0bU',
                             'storage': {
                              1: 85,
                              2: 1461501637330902918203684832716283019655932542975L,
                              3: 1,
                              4: 1461501637330902918203684832716283019655932542976L,
                              5: 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                              7: 1461501637330902918203684832716283019655932542975L,
                              9: 1,
                              10: 1461501637330902918203684832716283019655932542976L,
                              11: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00'\
                                     '\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfft\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x01`\x00s\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     't\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`'\
                                     '\x01`\x00\x9a`U`\x01U`\x02U`\x03U`\x04U`\x05U`\x06'\
                                     'U`\x07U`\x08U`\tU`\nU`\x0bU', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dcdb8328694f05633968ab03ad33836917e7a467d5afd31764aa07d8b7427b46(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'u\xb2\xff\x18/\xe3\xe6\x8e\xe5\xd6\xd2\x19\x1f\x89\xc3g\xc7\xe0*\xcd1ut`U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='u\xb2\xff\x18/\xe3\xe6\x8e\xe5\xd6\xd2\x19\x1f\x89\xc3g\xc7\xe0*\xcd1ut'\
                                     '`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_c895ead53370c0efb147e15d8ec3da4f46d37ec75f2198d946490024a31915f4(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 's\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfft\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00`\x01\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                             '\xff\xff\xff\xff\xff\xff\xff\xff\xff\x93`U`\x01U`\x02U`\x03U`\x04U',
                             'storage': {
                              1: 85,
                              2: 1461501637330902918203684832716283019655932542975L,
                              3: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfft\x01'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00`'\
                                     '\x01\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x93`U`\x01U`\x02U`\x03U'\
                                     '`\x04U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_7a1e84544ad51587b3d4d23215c6855def29505004d4013902bf5a4f95383a62(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'bz79`U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='bz79`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_d242eca817cb34da8f5afd76a70a8b27e398a0018df902ee4dc2fc24543ee9f1(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00`\x01s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x92`U`\x01U`\x02U`\x03U',
                             'storage': {
                              1: 85,
                              3: 1461501637330902918203684832716283019655932542975L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00`\x01s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x92`U`\x01U`\x02U`\x03'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_4b1bd09d446eea86504b929663fa425cea3affe0590085f4901ec72900aa2d4c(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 't\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                             '\xff\xff\xff\xff\xff\xff\xff`\x01`\x00t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00s\xff\xff'\
                             '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01`\x00\x9a`U`\x01U`\x02U`\x03U`\x04U`\x05U`\x06U`\x07U`\x08U`\tU`\nU`\x0bU',
                             'storage': {
                              1: 85,
                              2: 1461501637330902918203684832716283019655932542976L,
                              3: 1,
                              4: 1461501637330902918203684832716283019655932542975L,
                              6: 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                              7: 1461501637330902918203684832716283019655932542976L,
                              9: 1,
                              10: 1461501637330902918203684832716283019655932542975L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01`\x00t\x01\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`'\
                                     '\x00s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`'\
                                     '\x01`\x00\x9a`U`\x01U`\x02U`\x03U`\x04U`\x05U`\x06'\
                                     'U`\x07U`\x08U`\tU`\nU`\x0bU', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_7b17caafd0024277b8d1568490a6128acde8d353a79aed71ed9886ba869956ad(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'f\xc4G(\xbc \xaa\x7f`U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='f\xc4G(\xbc \xaa\x7f`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_0260446d49ec345b6abb0d04b6a254d4d6a153d06e832ea5c0e351872cb1e0b4(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 't\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                             '\xff\xff\xff\xff\xff\xff\xff`\x00\x84`U`\x01U`\x02U`\x03U`\x04U`\x05U',
                             'storage': {
                              1: 85,
                              2: 1461501637330902918203684832716283019655932542976L,
                              4: 1461501637330902918203684832716283019655932542975L,
                              5: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x84`U`\x01U`\x02U`\x03U'\
                                     '`\x04U`\x05U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_023c70c2311e1479be29eb810a5030a4120d5f9ebba8937c454f29f77a674008(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'o\xd1\xf8<\xd5\xae\xc9Gk\xe6-\xadD\xca\x85`\xa4`U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='o\xd1\xf8<\xd5\xae\xc9Gk\xe6-\xadD\xca\x85`\xa4`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_3756d6e41d9c5d63e7ec9a616448cd1471f12f2162a4ff7be5c609ff60c7c56a(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'm\xbe\xa7Q\xcf\xfa\xf6\x88.q\xb8\x9e\x9f\xf4S`U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='m\xbe\xa7Q\xcf\xfa\xf6\x88.q\xb8\x9e\x9f\xf4S`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_da05a8c24fb72885d756f21b0d7b28f4b5bfcaf48eb2f25c7126b82010d5d430(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 's\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                             '\x00\x00\x00\x00\x00\x00\x00`\x00`\x00s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01t\x01\x00\x00'\
                             '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00`\x00s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                             '\xff\xff\xff\xff\xff`\x01t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9e`U`\x01U`\x02U`\x03U`\x04U`\x05U`\x06U`\x07U`\x08U`\tU`\nU`\x0bU`\x0cU`\rU'\
                             '`\x0eU`\x0fU',
                             'storage': {
                              1: 85,
                              2: 1461501637330902918203684832716283019655932542975L,
                              3: 1,
                              4: 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                              5: 1461501637330902918203684832716283019655932542975L,
                              8: 1461501637330902918203684832716283019655932542976L,
                              9: 1,
                              10: 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                              11: 1461501637330902918203684832716283019655932542975L,
                              14: 1461501637330902918203684832716283019655932542976L,
                              15: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff`\x01t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00`\x00s\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01'\
                                     't\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`'\
                                     '\x00`\x00s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01t\x01\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9e`U`\x01U`\x02U`\x03'\
                                     'U`\x04U`\x05U`\x06U`\x07U`\x08U`\tU`\nU`'\
                                     '\x0bU`\x0cU`\rU`\x0eU`\x0fU', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_305c15282d0676cd3d983bcc47152fba92d8b90877f23fc1f459002e21cb6770(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'j\xe8H9\x89\x97\x15pc\xb9\xfe)`U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='j\xe8H9\x89\x97\x15pc\xb9\xfe)`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_3cc34b068c2f11faac107c604b113a73b58a0110bf23970af65c1a52804dcdb8(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfft\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x01s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xf1`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_fa5263e785982a75204d577444728525cf269aa6cd6372370f743c404af81113(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'x|N#\xc9\x8d\x96\xae)f\xdb\xe1a\xd3\xf9{?\xd0y\xff\\\xa0\xe0\xf0V,`U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='x|N#\xc9\x8d\x96\xae)f\xdb\xe1a\xd3\xf9{?\xd0y\xff\\\xa0\xe0'\
                                     '\xf0V,`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_36826ade8020efc0461856b93b2a19f4f3d41c33a715079793dce6a163cdffb8(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': '`\x00t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x01s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                             '\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00`\x00t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x01s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                             '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x99`U`\x01U`\x02U`\x03U`\x04U`\x05U`\x06U`\x07U`\x08U`\tU`\nU',
                             'storage': {
                              1: 85,
                              3: 1461501637330902918203684832716283019655932542975L,
                              4: 1,
                              5: 1461501637330902918203684832716283019655932542976L,
                              8: 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                              9: 1461501637330902918203684832716283019655932542975L,
                              10: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='`\x00t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
                                     '\x00`\x01s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00`\x00t\x01\x00\x00\x00\x00\x00\x00'\
                                     '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x01s\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\x99`U`\x01U`\x02U`\x03U`\x04U`\x05U`\x06U`'\
                                     '\x07U`\x08U`\tU`\nU', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_ec79fd5f65d7011d705657b6f5128c8ad0dacc3e0aa5344d70fad9413cf4291f(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'l\xb9w\xc7+(n8\xa2V\x8b\xd8\xe7\xba`U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='l\xb9w\xc7+(n8\xa2V\x8b\xd8\xe7\xba`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_8b3bca72cb870d7e089f473dffdbb37c51aa64e24a3eb39e2b301d3c60492c4e(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 't\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00`\x01s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                             '\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x94`U`\x01U`\x02U`\x03U`\x04U`\x05U',
                             'storage': {
                              1: 85,
                              2: 1461501637330902918203684832716283019655932542976L,
                              3: 1461501637330902918203684832716283019655932542975L,
                              4: 1
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='t\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00`\x01s\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x00\x94`U`\x01U`\x02U`'\
                                     '\x03U`\x04U`\x05U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_dc3b5c08df6bd74e698ca6c6d9709e1ed47d19605c867f05bb032d658e495846(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'i\xb4\x9e\xc9\xd5?=ko=\x1f`U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='i\xb4\x9e\xc9\xd5?=ko=\x1f`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_3be1c5b460bc1ffdfc2979d2b39e996e6d552a84b183aaf38942e8124ad55896(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 's\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x83`U`\x01U`\x02U`\x03U`'\
                             '\x04U',
                             'storage': {
                              1: 85,
                              2: 1461501637330902918203684832716283019655932542975L,
                              3: 115792089237316195423570985008687907853269984665640564039457584007913129639935L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01'\
                                     '`\x00\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x83`U`\x01U`\x02U`\x03'\
                                     'U`\x04U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_9bcfadd98d53e7b49e0c523cc297d4bd06580149cd41531a2b26f24251b1b091(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'w\xb0\xab\xbc\xf5\x9a\xcd\xb3<6\x85\xedKQ\x17\x9fd\xa8t\xb7!\xac/\x81\xc3`U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='w\xb0\xab\xbc\xf5\x9a\xcd\xb3<6\x85\xedKQ\x17\x9fd\xa8t\xb7!\xac/'\
                                     '\x81\xc3`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_3b6c5391ab26f25d5c3ad025e075ad7bc6155390e7ee6357ff938f37459786f8(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 'j<\xa9\x8e\x9b\x12\xf7\xcbB$9|`U',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='j<\xa9\x8e\x9b\x12\xf7\xcbB$9|`U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_a3b2ededbcbf142949e963d5e35939e8a5f30a5abbb9a4090cf2a51722fd0c61(self):
        header ={
                   'hash': 42575053018967912481081396422302317792313617419357929919885147015760602644662L,
                   'timestamp': 2,
                   'gaslimit': 1000000000000,
                   'number': 300,
                   'difficulty': 115792089237316195423570985008687907853269984665640564039457584007913129639935L,
                   'coinbase': 244687034288125203496486448490407391986876152250L
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 1000000000000000000,
                             'code': 's\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01\x81`U`\x01U`\x02U',
                             'storage': {
                              1: 85,
                              2: 1461501637330902918203684832716283019655932542975L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=1000000000000000000, 
                                code='s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff`\x01'\
                                     '\x81`U`\x01U`\x02U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 1
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_boolean(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x01`\x01\x16\x15`\x1aW`\x00`\x00`\x00`\x00`\x023`\xc8Z'\
                                     '\x03\xf1P[`\x00`\x01\x16\x15`5W`\x00`\x00`\x00`\x00`\x03'\
                                     '3`\xc8Z\x03\xf1P[`\x01`\x00\x16\x15`PW`\x00`\x00`\x00'\
                                     '`\x00`\x043`\xc8Z\x03\xf1P[`\x00`\x00\x16\x15`kW`\x00'\
                                     '`\x00`\x00`\x00`\x053`\xc8Z\x03\xf1P[`\x01`\x01\x17\x15`'\
                                     '\x86W`\x00`\x00`\x00`\x00`\x0c3`\xc8Z\x03\xf1P[`\x00`'\
                                     '\x01\x17\x15`\xa1W`\x00`\x00`\x00`\x00`\r3`\xc8Z\x03\xf1P'\
                                     '[`\x01`\x00\x17\x15`\xbcW`\x00`\x00`\x00`\x00`\x0e3`\xc8'\
                                     'Z\x03\xf1P[`\x00`\x00\x17\x15`\xd7W`\x00`\x00`\x00`\x00`'\
                                     '\x0f3`\xc8Z\x03\xf1P[', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_suicide(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            1170859069862169782511871033392474246841492526721L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '',
                             'storage': {
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='3\xff', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_arith(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x00`\x00`\x00`\x00`\x02`\x02`\x08\x03\x03`\x02`\x03\x06`\x02'\
                                     '`\x02\x04`\x04`\x04`\x04\x02\x02`\x02`\x02\x01\x01\x01\x01\x013`\xc8'\
                                     'Z\x03\xf1', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_mktx(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\x00`\x00`\x00`\x00g\x06\xf0[Y\xd3\xb2\x00\x003`\xc8Z\x03\xf1', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sha3_6(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\
                                     '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff `\x00'\
                                     'U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sha3_4(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`dd\x0f\xff\xff\xff\xff `\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sha3_5(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = None

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code="d\x0f\xff\xff\xff\xffa'\x10 `\x00U", 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    
    def test_sha3_2(self):
        header ={
                   'coinbase': 244687034288125203496486448490407391986876152250L,
                   'difficulty': 256,
                   'gaslimit': 1000000,
                   'number': 0,
                   'timestamp': 1
                  }
        pos_world = {
                            87579061662017136990230301793909925042452127430L: {
                             'nonce': 0,
                             'balance': 100000000000000000000000L,
                             'code': '`\n`\n `\x00U',
                             'storage': {
                              0: 48770040874999722911352515349406742418672666995386952638548776145659901556231L
                             }
                            }
                           }

        constraints = ConstraintSet()
        platform = evm.EVMWorld(constraints)           
        platform.create_account(address=87579061662017136990230301793909925042452127430L, 
                                balance=100000000000000000000000L, 
                                code='`\n`\n `\x00U', 
                                storage={
                                        }
                                )        
        address = 87579061662017136990230301793909925042452127430L
        origin = 1170859069862169782511871033392474246841492526721L
        price = 100000000000000
        data = ''
        caller = 1170859069862169782511871033392474246841492526721L
        value = 1000000000000000000        
        platform.transaction(address, origin, price, data, caller, value, header)
        
        throw = False
        try:
            platform.run()
        except state.TerminateState as e:                
            if e.message != 'STOP':
                throw = True

        if pos_world is None:
            self.assertTrue(throw)
        else:
            self.assertEqual( pos_world, platform.storage)
    

if __name__ == '__main__':
    unittest.main()
